-- MySQL dump 10.13  Distrib 8.0.19, for Win64 (x86_64)
--
-- Host: localhost    Database: myblog
-- ------------------------------------------------------
-- Server version	8.0.19

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `admin`
--

DROP TABLE IF EXISTS `admin`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `admin` (
  `id` int NOT NULL AUTO_INCREMENT,
  `loginId` varchar(255) NOT NULL,
  `name` varchar(255) NOT NULL,
  `loginPwd` varchar(255) NOT NULL,
  `createdAt` datetime NOT NULL,
  `updatedAt` datetime NOT NULL,
  `isValid` varchar(1) DEFAULT 'Y',
  `role` varchar(10) NOT NULL DEFAULT 'user',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `admin`
--

LOCK TABLES `admin` WRITE;
/*!40000 ALTER TABLE `admin` DISABLE KEYS */;
INSERT INTO `admin` VALUES (1,'admin','超级管理员','e10adc3949ba59abbe56e057f20f883e','2024-08-20 11:32:44','2024-08-20 11:32:44','Y','admin');
/*!40000 ALTER TABLE `admin` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `banner`
--

DROP TABLE IF EXISTS `banner`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `banner` (
  `id` int NOT NULL AUTO_INCREMENT,
  `isValid` varchar(1) NOT NULL DEFAULT 'Y',
  `img` varchar(255) NOT NULL,
  `placeHolderImg` varchar(255) DEFAULT NULL,
  `title` varchar(255) NOT NULL,
  `description` varchar(255) NOT NULL,
  `createdAt` datetime NOT NULL,
  `updatedAt` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `banner`
--

LOCK TABLES `banner` WRITE;
/*!40000 ALTER TABLE `banner` DISABLE KEYS */;
INSERT INTO `banner` VALUES (1,'Y','http://localhost:8888/static/img/danmachi1.jpg',NULL,'僕がなりたい','英雄になりたい','2024-08-23 14:28:16','2024-08-23 14:28:16'),(2,'Y','http://localhost:8888/static/img/danmachi2.jpg',NULL,'本当の願いを教えてください','一番恥ずかしいのは何にも決められず、動けないでいることだ','2024-08-23 22:43:00','2024-08-23 22:43:08'),(3,'Y','http://localhost:8888/static/img/danmachi3.jpg',NULL,'偽善者になる','偽善者こそが英雄になる資格ある','2024-08-23 22:44:00','2024-08-23 22:44:03'),(4,'Y','http://localhost:8888/static/img/danmachi4.jpg',NULL,'あなたは自罰的すぎる、冒険者らしくない','逆に、少しでも自信を持たれれば、あなたはもっと強い冒険者になれる','2024-08-23 22:44:43','2024-08-23 22:44:46'),(5,'Y','http://localhost:8888/static/img/danmachi5.jpg',NULL,'叶えたい願いが','あります','2024-08-23 22:45:34','2024-08-23 22:45:40');
/*!40000 ALTER TABLE `banner` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog`
--

DROP TABLE IF EXISTS `blog`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `blog` (
  `id` int NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `description` varchar(255) DEFAULT '0',
  `toc` text NOT NULL,
  `htmlContent` text NOT NULL,
  `isValid` varchar(1) NOT NULL DEFAULT 'Y',
  `thumb` varchar(255) NOT NULL,
  `scanNumber` varchar(255) NOT NULL,
  `commentNumber` varchar(255) NOT NULL,
  `createDate` varchar(255) NOT NULL,
  `createdAt` datetime NOT NULL,
  `updatedAt` datetime NOT NULL,
  `blogType` int DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `blogType` (`blogType`),
  CONSTRAINT `blog_ibfk_1` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_10` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_11` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_12` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_13` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_14` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_15` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_16` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_17` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_18` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_19` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_2` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_20` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_21` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_22` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_23` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_24` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_25` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_26` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_27` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_28` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_29` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_3` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_30` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_31` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_32` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_33` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_34` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_35` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_36` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_37` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_38` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_39` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_4` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_40` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_41` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_42` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_43` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_44` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_45` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_46` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_47` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_48` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_49` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_5` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_50` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_51` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_52` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_53` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_54` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_55` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_56` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_57` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_58` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_59` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_6` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_60` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_61` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_62` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_63` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_64` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_65` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_66` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_67` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_68` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_69` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_7` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_70` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_71` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_72` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_73` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_74` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_75` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_76` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_77` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_78` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_79` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_8` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_80` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_81` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_82` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_83` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_84` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_85` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_86` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_87` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_88` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_89` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_9` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_90` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_91` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_ibfk_92` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog`
--

LOCK TABLES `blog` WRITE;
/*!40000 ALTER TABLE `blog` DISABLE KEYS */;
INSERT INTO `blog` VALUES (1,'HTTP与HTTPS协议','了解HTTP与HTTPS协议,学习网络请求原理','[{\"anchor\":\"http\",\"name\":\"http\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"c%2Fs-b%2Fs\",\"name\":\"c/s b/s\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"url-uniform-resource-location\",\"name\":\"url uniform resource location\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"http-protocol-%E5%BB%BA%E7%AB%8B%E5%9C%A8-tcp%2Fip-%E5%9F%BA%E7%A1%80%E4%B8%8A\",\"name\":\"http protocol 建立在 TCP/IP 基础上\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"request\",\"name\":\"Request\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"response\",\"name\":\"Response\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"ajax-webapi\",\"name\":\"ajax webApi\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"https-protocol-%E5%BB%BA%E7%AB%8B%E5%9C%A8-tcp%2Fip-ssl(%E5%8A%A0%E5%AF%86%E5%8D%8F%E8%AE%AE)%E4%B9%8B%E4%B8%8A\",\"name\":\"https protocol 建立在 TCP/IP SSL(加密协议)之上\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F\",\"name\":\"加密方式\",\"tag\":\"h3\",\"children\":[]}]}]}]','\"<h1 id=\\\"http\\\" tabindex=\\\"-1\\\">http</h1>\\n<h2 id=\\\"c%2Fs-b%2Fs\\\" tabindex=\\\"-1\\\">c/s b/s</h2>\\n<p><code>client</code> <code>browser</code> <code>server</code>\\n服务器就是一个应用程序,监听某一个 port\\n客户端也就一个应用程序\\n发出 Request 的是客户端\\n响应 Response 的是服务器</p>\\n<h2 id=\\\"url-uniform-resource-location\\\" tabindex=\\\"-1\\\">url uniform resource location</h2>\\n<p>http://www.baidu.com/s?wd=test#home\\nschema/protocol http\\nhost: www.baidu.com /ip\\nport: 80\\npath:/s\\nparams:?wd=test\\nhash:#home</p>\\n<h2 id=\\\"http-protocol-%E5%BB%BA%E7%AB%8B%E5%9C%A8-tcp%2Fip-%E5%9F%BA%E7%A1%80%E4%B8%8A\\\" tabindex=\\\"-1\\\">http protocol 建立在 TCP/IP 基础上</h2>\\n<ol>\\n<li>每次请求-响应是独立的。断开式连接。</li>\\n<li>传递消息都是 string, 格式为</li>\\n</ol>\\n<h3 id=\\\"request\\\" tabindex=\\\"-1\\\">Request</h3>\\n<pre><code class=\\\"language-ts\\\">   请求行          post  /api/user  HTTP/1.1\\n   请求头 Header   Content-Type: application/json\\n                  User-Agent: Molila5.0 ………………\\n\\t\\t\\t\\t  HOST:\\n\\t\\t\\t\\t  origin:\\n\\t\\t\\t\\t  Connection:\\n\\n   请求体 Body    {\\n\\t                 id:xxxx\\n                  }\\n\\n\\n</code></pre>\\n<p>约定俗成的</p>\\n<p>get delete 没有 body,传参只能 params\\npost put 有</p>\\n<p><strong>Content-Type</strong></p>\\n<ol>\\n<li>\\n<p>x-www-form-urlencoded</p>\\n<pre><code class=\\\"language-ts\\\">id = xxx\\n</code></pre>\\n</li>\\n<li>\\n<p>json</p>\\n<pre><code class=\\\"language-ts\\\">{\\n  id: xxx\\n}\\n</code></pre>\\n</li>\\n<li>\\n<p>form-data</p>\\n</li>\\n</ol>\\n<p>​ 文件上传</p>\\n<h3 id=\\\"response\\\" tabindex=\\\"-1\\\">Response</h3>\\n<pre><code class=\\\"language-ts\\\">   响应行  HTTP/1.1 200 Ok\\n   响应头  Content-Type: text/html;charset=utf-8\\n          Server: BWS/1.1\\n\\n   响应体  &lt;html&gt;&lt;/html&gt;\\n\\n</code></pre>\\n<p>响应码\\n1** 信息 服务器接到请求 需要客户端继续发送\\n2** 成功\\n3** 重定向\\n4** 客户端错误\\n5** 服务器错误</p>\\n<h2 id=\\\"ajax-webapi\\\" tabindex=\\\"-1\\\">ajax webApi</h2>\\n<pre><code class=\\\"language-ts\\\">// //原生ajax\\nconst xhr = new XMLHttpRequest()\\n\\nxhr.onreadystatechange = function () {\\n  switch (xhr.readyState) {\\n    case 1:\\n      console.log(&quot;open 方法被调用&quot;)\\n      break\\n    case 2:\\n      console.log(&quot;send method execute&quot;)\\n      break\\n    case 3:\\n      console.log(&quot;receiving response body&quot;)\\n      break\\n    case 4:\\n      console.log(&quot;received all response&quot;)\\n      const res = JSON.parse(xhr.responseText)\\n      break\\n  }\\n}\\n\\nxhr.setRequestHeader(&quot;Content-type&quot;, &quot;application/json&quot;)\\nxhr.open(&quot;post&quot;, &quot;www.baidu.com&quot;)\\nxhr.send(\\n  JSON.stringify({\\n    a: 1,\\n  }) || null\\n)\\n\\n// Fetch 使用ES6 Promise方法实现ajax\\nfetch(&quot;www.baidu.com&quot;, {\\n  method: &quot;post&quot;,\\n  headers: {\\n    &quot;Content-Type&quot;: &quot;application/json&quot;,\\n  },\\n  body: JSON.stringify({}),\\n}).then((res) =&gt; res.json() /**继续接收响应体 */)\\n</code></pre>\\n<h2 id=\\\"https-protocol-%E5%BB%BA%E7%AB%8B%E5%9C%A8-tcp%2Fip-ssl(%E5%8A%A0%E5%AF%86%E5%8D%8F%E8%AE%AE)%E4%B9%8B%E4%B8%8A\\\" tabindex=\\\"-1\\\">https protocol 建立在 TCP/IP SSL(加密协议)之上</h2>\\n<h3 id=\\\"%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F\\\" tabindex=\\\"-1\\\">加密方式</h3>\\n<ol>\\n<li>对称加密 加密解密都有同一个 key</li>\\n<li>非对称加密 生成一对密钥, 公钥加密只能用私钥解密</li>\\n</ol>\\n<p>现在的传输方式大概</p>\\n<p>A ----公钥----&gt; B\\n&lt;---公钥<em>key--\\n-----key</em>(data)--&gt;\\n但是第三方可以篡改，他保存别人的公钥，放送出自己的公钥，之后的通信就会被篡改</p>\\n<p><strong>https 原理</strong>\\n使用 Certificate Authority 的私钥 加密 网站的公钥，网站的证书签名(signature)，加上颁发机构，网站域名生成证书 Digital Certificate</p>\\n<p>公钥谁都能有,所以里面的公钥谁都能看到，但是你想篡改，浏览器可以通过这些公开信息计算出网站的证书签名,如果发现计算出来的签名和你给的签名不一致，\\n就是被发现</p>\\n<pre><code>\\t\\t\\t\\t ---域名,网站公钥---&gt;CA ---&gt;域名,网站的公钥,CA公钥通过算法生成签名---&gt;生成DA\\n\\t\\t\\t\\tA&lt;-------DA--------\\n    B&lt;---DA(有A的公钥)-----\\n    B-A的公钥*key--&gt;\\n\\t &lt;---key*data-&gt;\\n</code></pre>\\n<p>​</p>\\n\"','Y','/img/HTTP.png','2','4','2024-09-16','2024-09-16 13:34:34','2024-09-23 16:26:54',73),(2,'NodeJs学习','了解HTTP与HTTPS协议,学习网络请求原理','[{\"anchor\":\"node\",\"name\":\"node\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E6%A6%82%E8%BF%B0\",\"name\":\"概述\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"what\'s-node\",\"name\":\"what\'s node\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"why-need-node\",\"name\":\"why need node\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E7%89%B9%E7%82%B9\",\"name\":\"特点\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"global\",\"name\":\"global\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E6%A8%A1%E5%9D%97%E5%8C%96-commonjs\",\"name\":\"模块化 commonJs\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"%E6%A8%A1%E5%9D%97%E6%9F%A5%E6%89%BE\",\"name\":\"模块查找\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"module\",\"name\":\"module\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"require\",\"name\":\"require\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"require-%E7%BB%86%E8%8A%82\",\"name\":\"require 细节\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"nodejs-%E4%B8%AD%E7%9A%84-es-%E6%A8%A1%E5%9D%97\",\"name\":\"NodeJS 中的 ES 模块\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97\",\"name\":\"内置模块\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"os\",\"name\":\"os\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"path\",\"name\":\"path\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"url\",\"name\":\"url\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"util\",\"name\":\"util\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"fs\",\"name\":\"fs\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"stream\",\"name\":\"stream\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"net-net\",\"name\":\"net net\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"http\",\"name\":\"http\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"https\",\"name\":\"https\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"events\",\"name\":\"events\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\",\"name\":\"生命周期\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"node-%E4%B8%AD%E6%95%B0%E6%8D%AE%E5%BA%93%E9%A9%B1%E5%8A%A8%E6%93%8D%E4%BD%9C\",\"name\":\"node 中数据库驱动操作\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"sequelize\",\"name\":\"Sequelize\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"logjs-%E8%AE%B0%E5%BD%95-log\",\"name\":\"logjs 记录 log\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"express-%EF%BC%88%E6%97%A0%E6%B3%95%E7%9B%B4%E6%8E%A5%E5%A4%84%E7%90%86%E5%BC%82%E6%AD%A5%E9%94%99%E8%AF%AF%EF%BC%89\",\"name\":\"express （无法直接处理异步错误）\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"rest-%E9%A3%8E%E6%A0%BC\",\"name\":\"rest 风格\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"route\",\"name\":\"Route\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E4%B8%AD%E9%97%B4%E4%BB%B6(%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0)-middleware\",\"name\":\"中间件(处理函数) middleWare\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"cookie-session-jwt-%E5%8E%9F%E7%90%86\",\"name\":\"cookie session jwt 原理\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"cookie\",\"name\":\"cookie\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"session\",\"name\":\"session\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"jwt\",\"name\":\"jwt\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98-(cors)-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8D%8F%E8%AE%AE%EF%BC%8C%E7%AB%AF%E5%8F%A3%EF%BC%8C%E4%B8%BB%E6%9C%BA%E5%90%8D\",\"name\":\"跨域问题 (CORS) 浏览器同源策略 协议，端口，主机名\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"%E5%90%8E%E7%AB%AF%E5%B8%B8%E7%94%A8%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84\",\"name\":\"后端常用三层架构\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E8%B7%AF%E7%94%B1%E5%B1%82-route\",\"name\":\"路由层 Route\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E6%9C%8D%E5%8A%A1%E5%B1%82-service\",\"name\":\"服务层 Service\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E5%B1%82-dao\",\"name\":\"数据访问层 DAO\",\"tag\":\"h2\",\"children\":[]}]}]','\"<h1 id=\\\"node\\\" tabindex=\\\"-1\\\">node</h1>\\n<h2 id=\\\"%E6%A6%82%E8%BF%B0\\\" tabindex=\\\"-1\\\">概述</h2>\\n<h3 id=\\\"what\'s-node\\\" tabindex=\\\"-1\\\">what\'s node</h3>\\n<pre><code> js的运行环境\\n 通常:浏览器端 =&gt;javascript\\n      node  =&gt; nodeJs\\n</code></pre>\\n<h3 id=\\\"why-need-node\\\" tabindex=\\\"-1\\\">why need node</h3>\\n<p>浏览器中仅提供了 js 解释器 + webapi(Dom Bom ajax)\\n能力有限 文件读写限制\\n跨域问题\\nnode js + NodeApi 可以完全控制电脑(system)\\n可以开发应用程序、服务器应用</p>\\n<h3 id=\\\"%E7%89%B9%E7%82%B9\\\" tabindex=\\\"-1\\\">特点</h3>\\n<pre><code>单线程  IO\\n运算不如传统后端\\n</code></pre>\\n<h2 id=\\\"global\\\" tabindex=\\\"-1\\\">global</h2>\\n<pre><code>```ts 实现与window一样\\n   const global = {\\n\\t  setTimeout():Object{\\n\\n\\t  },\\n\\t  setImmediate(){\\n\\n\\t  },\\n\\t  setInterval(){\\n\\n\\t  },\\n\\t  console,\\n\\n\\t  process:{\\n\\t\\t  //命令行目录\\n\\t\\t   cwd(){},\\n\\t\\t   //强制退出node进程\\n\\t\\t   exit(){},\\n\\t\\t   //命令行中参数\\n\\t\\t   argv,\\n\\t\\t   //操作系统\\n\\t\\t   platform,\\n\\t\\t   //杀进程\\n\\t\\t   kill(pid){},\\n\\t\\t   //环境变量\\n\\t\\t   env\\n\\t  },\\n\\n\\n\\t  /**\\n\\t   * 现在计算机中的内存地址的最新单位byte, 1byte = 8bit(1bit就是一个二进)。4bit 可以表示2^4=16 0-15范围的数。也就是说,用一个16进制数就可以\\n\\t   * 表示一个字节byte。这个Buffer会用到16进制\\n\\t   */\\n\\t  Buffer,\\n\\n\\n   }\\n   global.global = global\\n\\n   //全局 但不在global里面\\n   __dirname,\\n   __filename,\\n\\n```\\n</code></pre>\\n<h2 id=\\\"%E6%A8%A1%E5%9D%97%E5%8C%96-commonjs\\\" tabindex=\\\"-1\\\">模块化 commonJs</h2>\\n<h3 id=\\\"%E6%A8%A1%E5%9D%97%E6%9F%A5%E6%89%BE\\\" tabindex=\\\"-1\\\">模块查找</h3>\\n<pre><code class=\\\"language-ts\\\">\\t   // 1.绝对路径\\n\\t   require(\'D:\\\\\\\\XXXX\')\\n\\t   //2. 相对路径\\n\\t\\t//1)\\n\\t\\trequire(\'./src\')\\n\\t\\t//2)\\n\\t\\trequire(\'axios\')\\n\\t    //  找到之后转换为绝对路径导入\\n\\n\\t//    后缀名\\n\\t//   自动补全\\n\\tjs json node mjs\\n\\n\\t// 文件名查找顺序\\n\\t//  1.当文件查出\\n\\t     require(\'./src\')\\n\\t\\t src.js/json/node/mjs\\n\\t\\t// 2.当包来找\\n\\t\\t ./src/main/index.js\\n\\n</code></pre>\\n<h3 id=\\\"module\\\" tabindex=\\\"-1\\\">module</h3>\\n<pre><code class=\\\"language-js\\\">\\t{\\n\\t\\t//绝对路径当id\\n\\t\\tid: \'E:\\\\\\\\Tlight\\\\\\\\node\\\\\\\\dist\\\\\\\\module.js\',\\n\\t\\tpath: \'E:\\\\\\\\Tlight\\\\\\\\node\\\\\\\\dist\',\\n\\t\\texports: {},\\n\\t\\tfilename: \'E:\\\\\\\\Tlight\\\\\\\\node\\\\\\\\dist\\\\\\\\module.js\',\\n\\t\\tloaded: false,\\n\\t\\tchildren: [],\\n\\t\\tpaths: [    //这就是一层一层往上找包的原因\\n\\t\\t\\t\'E:\\\\\\\\Tlight\\\\\\\\node\\\\\\\\dist\\\\\\\\node_modules\',\\n\\t\\t\\t\'E:\\\\\\\\Tlight\\\\\\\\node\\\\\\\\node_modules\',\\n\\t\\t\\t\'E:\\\\\\\\Tlight\\\\\\\\node_modules\',\\n\\t\\t\\t\'E:\\\\\\\\node_modules\'\\n\\t\\t]\\n\\t}\\n</code></pre>\\n<h3 id=\\\"require\\\" tabindex=\\\"-1\\\">require</h3>\\n<pre><code class=\\\"language-js\\\">{\\n\\t//返回绝对路径\\n  resolve: [Function: resolve] { paths: [Function: paths] }, //静态方法\\n  //入口模块\\n  main: {\\n    id: \'.\',\\n    path: \'E:\\\\\\\\Tlight\\\\\\\\node\\\\\\\\dist\',\\n    exports: {},\\n    filename: \'E:\\\\\\\\Tlight\\\\\\\\node\\\\\\\\dist\\\\\\\\index.js\',\\n    loaded: false,\\n    children: [],\\n    paths: [\\n      \'E:\\\\\\\\Tlight\\\\\\\\node\\\\\\\\dist\\\\\\\\node_modules\',\\n      \'E:\\\\\\\\Tlight\\\\\\\\node\\\\\\\\node_modules\',\\n      \'E:\\\\\\\\Tlight\\\\\\\\node_modules\',\\n      \'E:\\\\\\\\node_modules\'\\n    ]\\n  },\\n  extensions: [Object: null prototype] { //自动解析的文件类型\\n    \'.js\': [Function (anonymous)],\\n    \'.json\': [Function (anonymous)],\\n    \'.node\': [Function (anonymous)]\\n  },\\n  //缓存的模块对象\\n  cache: [Object: null prototype] {\\n    \'E:\\\\\\\\Tlight\\\\\\\\node\\\\\\\\dist\\\\\\\\index.js\': {\\n      id: \'.\',\\n      path: \'E:\\\\\\\\Tlight\\\\\\\\node\\\\\\\\dist\',\\n      exports: {},\\n      filename: \'E:\\\\\\\\Tlight\\\\\\\\node\\\\\\\\dist\\\\\\\\index.js\',\\n      loaded: false,\\n      children: [],\\n      paths: [Array]\\n    }\\n  }\\n}\\n</code></pre>\\n<h3 id=\\\"require-%E7%BB%86%E8%8A%82\\\" tabindex=\\\"-1\\\">require 细节</h3>\\n<p>假如有一个模块</p>\\n<pre><code class=\\\"language-js\\\">console.log(__dirname, __filename)\\nmodule.exports = {\\n  a: 1,\\n}\\nexports.b = 2\\nthis.c = 3\\n</code></pre>\\n<p>请问导出的是什么？</p>\\n<p><strong>require 原理</strong></p>\\n<pre><code class=\\\"language-js\\\">   function require(modulePath){\\n\\t  //step1 转换为绝对路径\\n\\t  const absolutePath = xxx(modulePath)\\n\\t  //step2 判断是否已缓存\\n\\t  if(require.cache[absolutePath]){\\n\\t\\t //有就直接返回缓存结果\\n\\t\\t return require.cache[absolutePath].result\\n\\t  }\\n\\t  //step3 读取文件内容\\n      const fileContent = xxx()\\n\\t  //step4 包裹到一个函数中\\n\\t  function _temp(module,exports, require,__dirname,__filename){\\n\\t\\t...fileContent\\n\\t\\t// console.log(__dirname, __filename);\\n\\t\\t// module.exports = {\\n\\t\\t// a: 1,\\n\\t\\t// };\\n\\t\\t// exports.b = 2;\\n\\t\\t// this.c = 3;\\n\\t  }\\n\\n\\t  //5.创建module对象\\n\\t  module.exports = {}\\n\\t  const exports = module.exports\\n\\n\\t  _temp.call(module.exports,module,exports,require,module.path,module.filename)\\n\\n\\t  require.cache[module.id] = module.exports\\n      return module.exports\\n   }\\n\\n</code></pre>\\n<p>exports === this</p>\\n<h3 id=\\\"nodejs-%E4%B8%AD%E7%9A%84-es-%E6%A8%A1%E5%9D%97\\\" tabindex=\\\"-1\\\">NodeJS 中的 ES 模块</h3>\\n<p>可以用,但互操作有问题。现在是要么全是 es 模块，要么全是 commonJs 模块。\\n当然可以使用 webpack 解决\\n我现在的 ts 编译后的 Object.defineProperty(exports, &quot;__esModule&quot;, { value: true });\\n其实也可以\\n将 es 模块的静态加载,转换为类似 require 的函数环境</p>\\n<pre><code class=\\\"language-mjs\\\">export const a = 1\\nexport default 1\\n</code></pre>\\n<pre><code class=\\\"language-mjs\\\">import * as obj from &quot;./es.mjs&quot;\\nconsole.log(obj)\\n</code></pre>\\n<p>当父模块变成 js 时就有问题了 SyntaxError: Cannot use import statement outside a module</p>\\n<h2 id=\\\"%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97\\\" tabindex=\\\"-1\\\">内置模块</h2>\\n<blockquote>\\n<p><a href=\\\"https://nodejs.org/docs/\\\">官方文档</a></p>\\n</blockquote>\\n<h3 id=\\\"os\\\" tabindex=\\\"-1\\\">os</h3>\\n<pre><code class=\\\"language-ts\\\">//系统换行符\\nconsole.log(os.EOL)\\n//架构 x64\\nconsole.log(os.arch())\\n//cpus\\nconsole.log(os.cpus())\\n//空闲内存\\nconsole.log(os.freemem())\\n// 用户目录\\nconsole.log(os.homedir())\\n//主机名\\nconsole.log(os.hostname())\\n//临时目录\\nconsole.log(os.tmpdir())\\n</code></pre>\\n<h3 id=\\\"path\\\" tabindex=\\\"-1\\\">path</h3>\\n<p>filename d:\\\\xxx.txt 文件的绝对路径\\nbasename xxx.txt</p>\\n<pre><code class=\\\"language-ts\\\">const basename = path.basename(&quot;xxx/xxxx/a.txt&quot;, &quot;html&quot;)\\nconsole.log(basename)\\nconst dir = path.dirname(&quot;xxx/xxxx/a.txt&quot;)\\nconsole.log(dir)\\n\\nconst ext = path.extname(&quot;xxx/xxx/a.txt&quot;)\\nconsole.log(ext)\\n\\nconst fullpath = path.join(&quot;d:/t&quot;, &quot;a&quot;, &quot;index&quot;, &quot;./test&quot;)\\nconsole.log(fullpath)\\n\\n//分隔符\\\\\\nconst separate = path.sep\\nconsole.log(separate)\\n\\n//;\\nconst d = path.delimiter\\nconsole.log(process.env.PATH?.split(d))\\n\\nconst validpath = path.normalize(&quot;D:/a/b/index.ts&quot;)\\nconsole.log(validpath)\\n\\nconst relativePath = path.relative(&quot;a/b/c&quot;, &quot;a/index&quot;)\\nconsole.log(relativePath)\\n\\n//是相当于命令行\\nconst absolutePath = path.resolve(&quot;./a.js&quot;)\\nconst absolutePathBymodule = path.resolve(__dirname, &quot;./a.js&quot;)\\nconsole.log(absolutePath, absolutePathBymodule, __dirname)\\n</code></pre>\\n<h3 id=\\\"url\\\" tabindex=\\\"-1\\\">url</h3>\\n<pre><code class=\\\"language-ts\\\">const u = new url.URL(&quot;http://qcscimdb.benq.corp.com:81/MAI1InspectionResolve/#/home?user=Tlight.HY.Xia&quot;)\\nconsole.log(u, u.searchParams.has(&quot;user&quot;))\\n\\nfor (let key of u.searchParams) {\\n  console.log(key)\\n}\\nconst config = {\\n  href: &quot;http://qcscimdb.benq.corp.com:81/MAI1InspectionResolve&quot;,\\n  origin: &quot;http://qcscimdb.benq.corp.com:81&quot;,\\n  protocol: &quot;http:&quot;,\\n  username: &quot;&quot;,\\n  password: &quot;&quot;,\\n  host: &quot;qcscimdb.benq.corp.com:81&quot;,\\n  hostname: &quot;qcscimdb.benq.corp.com&quot;,\\n  port: &quot;81&quot;,\\n  pathname: &quot;/MAI1InspectionResolve/&quot;,\\n  search: &quot;&quot;,\\n  hash: &quot;#/home?user=Tlight&quot;,\\n}\\n\\nconsole.log(url.format(config))\\n</code></pre>\\n<h3 id=\\\"util\\\" tabindex=\\\"-1\\\">util</h3>\\n<pre><code class=\\\"language-ts\\\">util.isDeepStrictEqual({ 1: 1 }, { 1: 2 })\\nutil.promisify(delay2)\\nutil.callbackify(delay)\\n</code></pre>\\n<h3 id=\\\"fs\\\" tabindex=\\\"-1\\\">fs</h3>\\n<p>文件 io cpu 只跟内存打交道,把文件读入内存才能操作，但 io 的操作远远慢于 cpu 内存</p>\\n<pre><code class=\\\"language-ts\\\">Stats {\\n  dev: 24198785,\\n  mode: 33206,\\n  nlink: 1,\\n  uid: 0,\\n  gid: 0,\\n  rdev: 0,\\n  blksize: 4096,\\n  ino: 281474979039900,\\n  size: 0,\\n  blocks: 0,\\n  atimeMs: 1718958726062.4705,\\n  mtimeMs: 1718958640012.3835,\\n  ctimeMs: 1718958640012.3835,\\n  birthtimeMs: 1718957669240.9294,\\n  //访问\\n  atime: 2024-06-21T08:32:06.062Z,\\n  //修改\\n  mtime: 2024-06-21T08:30:40.012Z,\\n  //访问状态修改\\n  ctime: 2024-06-21T08:30:40.012Z,\\n  birthtime: 2024-06-21T08:14:29.241Z\\n}\\n\\n\\nconst getAbsolutePath = (relativePath: string) =&gt; {\\n  const res = path.resolve(__dirname, relativePath);\\n  //   console.log(res, __dirname);\\n\\n  return res;\\n};\\nfs.readFile(getAbsolutePath(&quot;./fs.txt&quot;), (err, res) =&gt; {\\n  //   console.log(res);\\n\\n  fs.writeFile(\\n    getAbsolutePath(&quot;./fs.txt&quot;),\\n    os.EOL + &quot;abc&quot;,\\n    {\\n      flag: &quot;a&quot;, //追加内容\\n    },\\n    () =&gt; {}\\n  );\\n  fs.writeFile(\\n    getAbsolutePath(&quot;./fs2.txt&quot;),\\n    Buffer.from(&quot;text from buffer&quot;),\\n    () =&gt; {}\\n  );\\n  //    fs.promises.stat(getAbsolutePath(&quot;./fs2.txt&quot;));\\n  fs.promises.stat(getAbsolutePath(&quot;./&quot;)).then((v) =&gt; {\\n    console.log(v.isDirectory);\\n  });\\n  fs.promises.readdir(getAbsolutePath(&quot;./&quot;)).then((v) =&gt; {\\n    console.log(v);\\n  });\\n\\n  fs.promises\\n    .access(getAbsolutePath(&quot;test&quot;), constants.F_OK)\\n    .catch((v) =&gt; {\\n      console.log(v);\\n      return fs.promises.mkdir(getAbsolutePath(&quot;test&quot;));\\n    })\\n    .then((v) =&gt; {\\n      fs.promises.readFile(getAbsolutePath(&quot;./fs.txt&quot;)).then((res) =&gt; {\\n        fs.promises.writeFile(getAbsolutePath(&quot;test/test.txt&quot;), res);\\n      });\\n    });\\n});\\n</code></pre>\\n<pre><code class=\\\"language-ts\\\">\\n</code></pre>\\n<h3 id=\\\"stream\\\" tabindex=\\\"-1\\\">stream</h3>\\n<p>使用刚才的方式，太吃内存了,使用流一点点执行 IO</p>\\n<ol>\\n<li>可读流 readable</li>\\n<li>可写流 writable</li>\\n<li>双工流 duplex\\n解决背压： rs.pipe(ws) 原理看 source</li>\\n</ol>\\n<h3 id=\\\"net-net\\\" tabindex=\\\"-1\\\">net net</h3>\\n<p>建立连接之后的 socket 就是一个双工流文件\\n使用 TCP/IP 协议实现 http 请求</p>\\n<pre><code class=\\\"language-ts\\\">import { parseHtml } from &quot;.&quot;\\nimport net from &quot;net&quot;\\n\\nconst server = net.createServer()\\nserver.listen(&quot;8585&quot;)\\n\\nserver.on(&quot;connection&quot;, (socket) =&gt; {\\n  socket.on(&quot;data&quot;, (chunk) =&gt; {\\n    console.log(parseHtml(chunk.toString(&quot;utf-8&quot;)))\\n  })\\n  const res = `\\nHTTP/1.1 200 Ok\\nContent-Type: image/jpeg\\n\\n\\n `\\n  socket.write(res.trimStart())\\n  socket.end()\\n  //   server.close()\\n})\\n</code></pre>\\n<h3 id=\\\"http\\\" tabindex=\\\"-1\\\">http</h3>\\n<h3 id=\\\"https\\\" tabindex=\\\"-1\\\">https</h3>\\n<h4>加密方式</h4>\\n<ol>\\n<li>对称加密 加密解密都有同一个 key</li>\\n<li>非对称加密 生成一对密钥, 公钥加密只能用私钥解密</li>\\n</ol>\\n<p>现在的传输方式大概</p>\\n<p>A ----公钥----&gt; B\\n&lt;---公钥<em>key--\\n-----key</em>(data)--&gt;\\n但是第三方可以篡改，他保存别人的公钥，放送出自己的公钥，之后的通信就会被篡改</p>\\n<p><strong>https 原理</strong>\\n使用 Certificate Authority 的私钥 加密 网站的公钥，网站的证书签名(signature)，加上颁发机构，网站域名生成证书 Digital Certificate</p>\\n<p>公钥谁都能有,所以里面的公钥谁都能看到，但是你想篡改，浏览器可以通过这些公开信息计算出网站的证书签名,如果发现计算出来的签名和你给的签名不一致，\\n就是被发现</p>\\n<pre><code>\\t\\t\\t\\t ---域名,网站公钥---&gt;CA ---&gt;域名,网站的公钥,CA公钥通过算法生成签名---&gt;生成DA\\n\\t\\t\\t\\tA&lt;-------DA--------\\n    B&lt;---DA-----\\n    B-公钥*key--&gt;\\n\\t &lt;---key*data-&gt;\\n</code></pre>\\n<p><strong>操作和 http 模块一模一样,只是 createServer 的时候要给证书和私钥</strong></p>\\n<h3 id=\\\"events\\\" tabindex=\\\"-1\\\">events</h3>\\n<pre><code class=\\\"language-ts\\\">import events, { EventEmitter } from &quot;events&quot;\\n\\nconst em = new EventEmitter()\\n\\nem.on(&quot;test&quot;, () =&gt; {\\n  console.log(&quot;test1&quot;)\\n})\\n\\nem.on(&quot;test&quot;, () =&gt; {\\n  console.log(&quot;test2&quot;)\\n})\\nem.once(&quot;test&quot;, () =&gt; {\\n  console.log(&quot;test3&quot;)\\n})\\nconsole.log(em.listeners(&quot;test&quot;))\\n\\nem.emit(&quot;test&quot;)\\nconsole.log(em.listeners(&quot;test&quot;))\\n</code></pre>\\n<h2 id=\\\"%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\\\" tabindex=\\\"-1\\\">生命周期</h2>\\n<p>event loop ----timers timers 队列(要运算) 存放计时器回调 注：队列内容来着于计时器线程，需要计算;setTimeout 底层最小值为 1\\n|\\nnexttrick |\\npromise |\\n(每次循环先要 |\\n清空的微队列; |\\nnexttrick |\\n优先级最高) pull 轮询队列 除了 timers，checks 。包括文件读取，用户请求;如果所有队列都空了,且有要等待的会卡在这;其他队列有东西了,就会从这里开始走一个新的循环\\n|\\n|\\n|\\n-----checks checks 队列 setImmediate 回调队列</p>\\n<h2 id=\\\"node-%E4%B8%AD%E6%95%B0%E6%8D%AE%E5%BA%93%E9%A9%B1%E5%8A%A8%E6%93%8D%E4%BD%9C\\\" tabindex=\\\"-1\\\">node 中数据库驱动操作</h2>\\n<p>orm object relation mapping</p>\\n<h3 id=\\\"sequelize\\\" tabindex=\\\"-1\\\">Sequelize</h3>\\n<p>自己尝试一些常用方法，方便记忆就写了一个类</p>\\n<pre><code class=\\\"language-ts\\\">interface ISequelizeHelperInit {\\n  user: string\\n  password: string\\n  database: string\\n  host: string\\n  dialect: Dialect\\n}\\nclass SequelizeHelper {\\n  private _sequelize: Sequelize\\n  private _connectedModels: Set&lt;typeof Model&gt; = new Set()\\n  private constructor({ user, password, database, host, dialect }: ISequelizeHelperInit) {\\n    this._sequelize = new Sequelize(database, user, password, {\\n      host,\\n      dialect,\\n      logging: (err) =&gt; logHelper.sqlLogger.debug(err),\\n    })\\n  }\\n  get instance() {\\n    return this._sequelize\\n  }\\n  /**\\n   * 默认alter: true,会改表\\n   * @param association\\n   * @param arg\\n   * @returns\\n   */\\n  async initModels(\\n    association?: (() =&gt; any) | null,\\n    ...arg: Array&lt;{\\n      model: ModelStatic&lt;Model&lt;any, any&gt;&gt;\\n      attributes: ModelAttributes&lt;\\n        Model,\\n        // \'foreign keys\' are optional in Model.init as they are added by association declaration methods\\n        Optional&lt;Attributes&lt;Model&gt;, BrandedKeysOf&lt;Attributes&lt;Model&gt;, symbol&gt;&gt;\\n      &gt;\\n      options: Partial&lt;InitOptions&lt;Model&lt;any, any&gt; | any&gt;&gt;\\n    }&gt;\\n  ) {\\n    // return await Promise.all(\\n\\n    arg.map(async (m) =&gt; {\\n      //@ts-ignore\\n      m.model.init(m.attributes, {\\n        sequelize: this._sequelize,\\n        ...m.options,\\n      })\\n\\n      //   return m.model.sync({\\n      //     alter: true\\n      //   })\\n    })\\n    association &amp;&amp; association()\\n\\n    // )\\n    const res = await this._sequelize.sync({ alter: true }).catch(() =&gt; false)\\n    // association()\\n    if (!!res) {\\n      arg.forEach((m) =&gt; {\\n        this._connectedModels.add(m.model)\\n      })\\n    }\\n    return !!res\\n  }\\n  async testConnection() {\\n    try {\\n      await this._sequelize.authenticate()\\n      return true\\n    } catch (error) {\\n      console.error(&quot;Unable to connect to the database:&quot;, error)\\n      return false\\n    }\\n  }\\n  bulkCreate&lt;T extends typeof Model&lt;any, any&gt;&gt;(model: T, instances: Partial&lt;InstanceType&lt;T&gt;&gt;[]) {\\n    console.log(instances)\\n\\n    //@ts-ignore\\n    this.hasModel(model) &amp;&amp; model.bulkCreate(instances)\\n  }\\n  hasModel(v: typeof Model) {\\n    if (!this._connectedModels.has(v)) {\\n      console.error(&quot;please init first&quot;)\\n      throw &quot;&quot;\\n    }\\n    return true\\n  }\\n\\n  /**\\n   *\\n   * @param model\\n   * @param instance\\n   * @returns\\n   * 只做记录Sequelize的数据库操作\\n   * 不强制使用 Service层一个ts文件只操作一个类,不混杂\\n   */\\n  insert2Model&lt;T extends typeof Model&lt;any, any&gt;&gt;(model: T, instance: Partial&lt;InstanceType&lt;T&gt;&gt;) {\\n    //@ts-ignore\\n    return this.hasModel(model) &amp;&amp; model.create(instance).then((res) =&gt; res.toJSON())\\n  }\\n  updateModel&lt;T extends typeof Model&lt;any, any&gt;&gt;(model: T, modelInstance: { [key in keyof Attributes&lt;InstanceType&lt;T&gt;&gt;]?: Attributes&lt;InstanceType&lt;T&gt;&gt;[key] }, conditions: Partial&lt;InstanceType&lt;T&gt;&gt;) {\\n    //@ts-ignore\\n\\n    return this.hasModel(model) &amp;&amp; model.update(modelInstance, { where: { ...conditions } })\\n  }\\n  deleteFromModel&lt;T extends typeof Model&lt;any, any&gt;&gt;(model: T, modelInstance: InstanceType&lt;T&gt;) {\\n    return (\\n      this.hasModel(model) &amp;&amp;\\n      //@ts-ignore\\n      model.destroy({\\n        where: {\\n          ...modelInstance,\\n        },\\n      })\\n    )\\n  }\\n\\n  select&lt;T extends typeof Model&lt;any, any&gt;&gt;(model: T, modelInstance: InstanceType&lt;T&gt;) {\\n    return (\\n      this.hasModel(model) &amp;&amp;\\n      //@ts-ignore\\n\\n      model.findAll({\\n        where: {\\n          ...modelInstance,\\n        },\\n      })\\n    )\\n  }\\n  selectSetWhere&lt;T extends typeof Model&lt;any, any&gt;&gt;(model: T, func: () =&gt; WhereOptions&lt;InferAttributes&lt;InstanceType&lt;T&gt;&gt;&gt;) {\\n    return (\\n      this.hasModel(model) &amp;&amp;\\n      //@ts-ignore\\n\\n      model\\n        .findAll({\\n          where: func(),\\n        })\\n        .then((res) =&gt; res.map((m) =&gt; m.toJSON()))\\n    )\\n  }\\n  selectPageData&lt;T extends typeof Model&lt;any, any&gt;&gt;(model: T, modelInstance: InstanceType&lt;T&gt;, page = 1, limit = 10) {\\n    return (\\n      this.hasModel(model) &amp;&amp;\\n      //@ts-ignore\\n      model\\n        .findAndCountAll({\\n          where: {\\n            ...modelInstance,\\n          },\\n          offset: (page - 1) * +limit,\\n          limit: +limit,\\n        })\\n        .then(({ rows, count }) =&gt; {\\n          return {\\n            count,\\n            rows: rows.map((m) =&gt; m.toJSON()),\\n          }\\n        })\\n    )\\n  }\\n  selectAssolationData&lt;T extends typeof Model&lt;any, any&gt;&gt;(\\n    model: T,\\n    {\\n      func = function () {\\n        return {}\\n      },\\n      includes = null,\\n    }: {\\n      func: () =&gt; WhereOptions&lt;InferAttributes&lt;InstanceType&lt;T&gt;&gt;&gt;\\n      includes: Model&lt;any, any&gt;[]\\n    }\\n  ) {\\n    return (\\n      this.hasModel(model) &amp;&amp;\\n      //@ts-ignore\\n\\n      model\\n        .findAll({\\n          where: func(),\\n          ...(includes\\n            ? {\\n                include: includes,\\n              }\\n            : {}),\\n        })\\n        .then((res) =&gt; res.map((m) =&gt; m.toJSON()))\\n    )\\n  }\\n\\n  static _instance: SequelizeHelper\\n  static getInstance(data: ISequelizeHelperInit): SequelizeHelper {\\n    if (this._instance) {\\n      return this._instance\\n    }\\n    this._instance = new SequelizeHelper(data)\\n    return this.getInstance(data)\\n  }\\n}\\n\\n/**\\n * 设置模型统一配置，在SequelizeHelper里面统一注册\\n * @param param0\\n * @returns\\n */\\nfunction setModel&lt;T extends Model, M extends InstanceType&lt;ModelStatic&lt;T&gt;&gt;&gt;({\\n  model,\\n  attributes,\\n  options = {},\\n}: {\\n  model: ModelStatic&lt;T&gt;\\n  attributes: ModelAttributes&lt;M, Optional&lt;Attributes&lt;M&gt;, BrandedKeysOf&lt;Attributes&lt;M&gt;, never&gt;&gt;&gt;\\n  options?: Partial&lt;InitOptions&lt;T&gt;&gt;\\n}) {\\n  return {\\n    model,\\n    attributes,\\n    options,\\n  }\\n}\\n</code></pre>\\n<p><strong>使用</strong>\\n初始化</p>\\n<pre><code class=\\\"language-ts\\\">const sequelizeHelperInstance = SequelizeHelper.getInstance({\\n  ...(require(&quot;./config.json&quot;) as Record&lt;&quot;user&quot; | &quot;password&quot;, string&gt;),\\n  database: process.env.DB_NAME,\\n  dialect: process.env.DB_Type,\\n  host: process.env.DB_HOST,\\n})\\n\\nsequelizeHelperInstance.testConnection().then(() =&gt; {\\n  console.log(&quot;db connect success&quot;)\\n})\\n</code></pre>\\n<p>模型定义</p>\\n<pre><code class=\\\"language-ts\\\">export class Blog extends Model&lt;InferAttributes&lt;Blog, { omit: &quot;id&quot; | &quot;blogType&quot; }&gt;, InferCreationAttributes&lt;Blog, { omit: &quot;id&quot; | &quot;blogType&quot; }&gt;&gt; implements IBlog {\\n  declare id: string\\n  declare title: string\\n  declare description: string\\n  declare toc: string\\n  declare htmlContent: string\\n  declare thumb: string\\n  declare scanNumber: string\\n  declare commentNumber: string\\n  declare createDate: string\\n  declare isValid: &quot;Y&quot; | &quot;N&quot;\\n  declare blogType: string\\n}\\n\\nexport const blogSetting = setModel({\\n  model: Blog,\\n  attributes: {\\n    title: {\\n      type: DataTypes.STRING,\\n      allowNull: false,\\n    },\\n    description: {\\n      allowNull: true,\\n      type: DataTypes.STRING,\\n      defaultValue: 0,\\n    },\\n    toc: {\\n      type: DataTypes.TEXT,\\n      allowNull: false,\\n    },\\n    htmlContent: {\\n      type: DataTypes.TEXT,\\n      allowNull: false,\\n    },\\n    isValid: {\\n      type: DataTypes.STRING(1),\\n      allowNull: false,\\n      defaultValue: &quot;Y&quot;,\\n    },\\n    thumb: {\\n      type: DataTypes.STRING,\\n      allowNull: false,\\n    },\\n    scanNumber: {\\n      type: DataTypes.STRING,\\n      allowNull: false,\\n    },\\n    commentNumber: {\\n      type: DataTypes.STRING,\\n      allowNull: false,\\n    },\\n    createDate: {\\n      type: DataTypes.STRING,\\n      allowNull: false,\\n    },\\n  },\\n  options: {\\n    tableName: &quot;blog&quot;,\\n  },\\n})\\n</code></pre>\\n<p>同步模型</p>\\n<pre><code class=\\\"language-ts\\\">sequelizeHelperInstance.initModels(association, AdminSetting, homeSetting, blogTypeSetting, blogSetting, messageSetting)\\n</code></pre>\\n<h4>MD5 加密</h4>\\n<p>只能加密不能解密 加密结果固定,用于加密密码</p>\\n<h4>时间 北京时间与 utc 时间</h4>\\n<p>使用时间戳统一(换算成 utc 时间)</p>\\n<h2 id=\\\"logjs-%E8%AE%B0%E5%BD%95-log\\\" tabindex=\\\"-1\\\">logjs 记录 log</h2>\\n<pre><code class=\\\"language-ts\\\">import log, { getLogger } from &quot;log4js&quot;\\nlog.configure({\\n  appenders: {\\n    sql: {\\n      type: &quot;dateFile&quot;,\\n      filename: path.resolve(__dirname, &quot;../../../logs&quot;, &quot;sql&quot;, &quot;logs.log&quot;),\\n      layout: {\\n        type: &quot;pattern&quot;,\\n        pattern: &quot;%c [%d{yyyy-MM-dd hh:mm:ss}] [%p] %m %n&quot;,\\n      },\\n      keepFileExt: true,\\n    },\\n    default: {\\n      type: &quot;stdout&quot;,\\n      //   filename: path.resolve(__dirname, &quot;logs&quot;, &quot;default&quot;, &quot;logs.log&quot;),\\n      //   keepFileExt: true\\n    },\\n  },\\n  categories: {\\n    sql: {\\n      appenders: [&quot;sql&quot;],\\n      level: &quot;all&quot;,\\n    },\\n    default: {\\n      appenders: [&quot;default&quot;],\\n      level: &quot;all&quot;,\\n    },\\n  },\\n})\\n\\nprocess.on(&quot;exit&quot;, () =&gt; {\\n  log.shutdown()\\n})\\n\\nexport default {\\n  sqlLogger: getLogger(&quot;sql&quot;),\\n  logger: getLogger(&quot;default&quot;),\\n}\\n</code></pre>\\n<h2 id=\\\"express-%EF%BC%88%E6%97%A0%E6%B3%95%E7%9B%B4%E6%8E%A5%E5%A4%84%E7%90%86%E5%BC%82%E6%AD%A5%E9%94%99%E8%AF%AF%EF%BC%89\\\" tabindex=\\\"-1\\\">express （无法直接处理异步错误）</h2>\\n<p>直接使用 http 模块肯定是没有问题，通过 url 路径调用不同的方法会有大量判断;传输的数据是通过 stream 的方法,需要你手动接受完 parseHtml</p>\\n<h3 id=\\\"rest-%E9%A3%8E%E6%A0%BC\\\" tabindex=\\\"-1\\\">rest 风格</h3>\\n<p>/api/user get 查询\\n/api/user post 保存\\n/api/user put 修改\\n/api/user delete 删除</p>\\n<p>又可以模块化了</p>\\n<h3 id=\\\"route\\\" tabindex=\\\"-1\\\">Route</h3>\\n<p><strong>自己尝试写的路由配置</strong></p>\\n<pre><code class=\\\"language-ts\\\">type Method = &quot;all&quot; | &quot;get&quot; | &quot;post&quot; | &quot;put&quot; | &quot;delete&quot; | &quot;patch&quot; | &quot;options&quot; | &quot;head&quot;\\n\\n/**\\n * base route config\\n */\\ninterface IRouterItem {\\n  method: Method\\n  url: string\\n  handler: (request: Request, response: Response) =&gt; Promise&lt;any&gt;\\n  needAuth?: boolean\\n  canCORS?: boolean\\n}\\n</code></pre>\\n<p>统一管理路由</p>\\n<pre><code class=\\\"language-ts\\\">export class RouterHelper {\\n  /**\\n   * all routes\\n   */\\n  private _routerCache: Record&lt;string, IRouterItem[]&gt; = {}\\n  private constructor(private _app: Express) {}\\n  registerRouter(baseUrl: string, router: Router, routerItems: IRouterItem[]) {\\n    if (this._routerCache[baseUrl]) {\\n      throw new Error(&quot;this baseUrl has been used&quot;)\\n    }\\n    this.addRouters(router, routerItems)\\n    this._app.use(baseUrl, router)\\n    this._routerCache[baseUrl] = routerItems\\n  }\\n  private addRouters(router: Router, routerItems: IRouterItem[]) {\\n    routerItems.forEach((item) =&gt; {\\n      router[item.method](item.url, response2Client(item.handler))\\n    })\\n  }\\n  /**\\n   *\\n   * @param param0\\n   * @returns\\n   * get current route config\\n   * 查询对应路由配置\\n   */\\n  getRouterItem&lt;T extends { baseUrl: string; url: string; method: Method }&gt;({ baseUrl, url, method }: T) {\\n    // console.log(this._routerCache)\\n\\n    for (let baseurl in this._routerCache) {\\n      for (let item of this._routerCache[baseurl]) {\\n        if (method.toUpperCase() === item.method.toUpperCase() &amp;&amp; pathToRegexp(handlePathEnd(baseurl + item.url)).test((baseUrl + url).split(&quot;?&quot;)[0])) return item\\n      }\\n    }\\n  }\\n\\n  private static _instance: RouterHelper\\n  static Instance(app: Express): RouterHelper {\\n    if (this._instance) {\\n      return this._instance\\n    } else {\\n      this._instance = new RouterHelper(app)\\n      return this.Instance(app)\\n    }\\n  }\\n}\\n\\n/**\\n * 处理路径类似 /login/ 与 /login 冲突问题\\n * @param path\\n * @returns\\n */\\nfunction handlePathEnd(path: string) {\\n  if (path.slice(-1) === &quot;/&quot;) {\\n    return handlePathEnd(path.slice(0, path.length - 1))\\n  }\\n  return path\\n}\\n/**\\n * response method,it can response data that func return\\n * 套了一层，配置路由时不用关心如何返回数据\\n * @param func\\n * @returns\\n */\\nconst response2Client = (func: IRouterItem[&quot;handler&quot;]): RequestHandler =&gt; {\\n  return async function (request, response, next) {\\n    try {\\n      const res = await func(request, response)\\n      // console.log(res, getResponseData(res), response.headersSent)\\n      response.send(getResponseData(res))\\n    } catch (err) {\\n      //   console.log(err)\\n      next(err)\\n    }\\n  }\\n}\\n</code></pre>\\n<p>方便定义路由写了一个 hook</p>\\n<pre><code class=\\\"language-ts\\\">export function useRoutes({ router = express.Router(), routerItems, baseUrl }: { router?: Router; routerItems: IRouterItem[]; baseUrl: string }) {\\n  function registerRouter(RouterHelperInstance: RouterHelper) {\\n    RouterHelperInstance.registerRouter(baseUrl, router, routerItems)\\n  }\\n\\n  return {\\n    registerRouter,\\n  }\\n}\\n</code></pre>\\n<p><strong>使用</strong></p>\\n<pre><code class=\\\"language-ts\\\">const { registerRouter } = useRoutes({\\n  routerItems: [\\n    {\\n      method: &quot;get&quot;,\\n      url: &quot;/&quot;,\\n      async handler(request) {\\n        return blogServiceInstance.getBlogsPagenation(request.query as any)\\n      },\\n      canCORS: true,\\n      //   needAuth: true\\n    },\\n    //...\\n  ],\\n  baseUrl: &quot;/api/blog&quot;,\\n})\\n\\nexport { registerRouter }\\n</code></pre>\\n<h3 id=\\\"%E4%B8%AD%E9%97%B4%E4%BB%B6(%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0)-middleware\\\" tabindex=\\\"-1\\\">中间件(处理函数) middleWare</h3>\\n<pre><code class=\\\"language-ts\\\">app.get(\\n  &quot;/abc/:id&quot;,\\n  () =&gt; {\\n    中间件1\\n    next()\\n  },\\n  () =&gt; {\\n    中间件2\\n  }\\n)\\n</code></pre>\\n<p>任意中间件都可以响应，但只能响应一次\\n想要执行后续中间件，需要手动调用 next\\n一直没有响应,但最后一个中间件调用 next,404\\n调用 next(new Error())/throw new error 会寻找后续处理异常中间件</p>\\n<pre><code class=\\\"language-ts\\\">//use的匹配范围更广\\napp.use(&quot;/abc&quot;, (err, req, res, next) =&gt; {\\n  console.log(err)\\n  if (err) {\\n    res.send({\\n      err: &quot;err&quot;,\\n    })\\n  }\\n})\\nuse的匹配范围更广, use里面的request可以获取到当前匹配的baseURl\\n</code></pre>\\n<p>自己写的中间件</p>\\n<p>authorization</p>\\n<pre><code class=\\\"language-ts\\\">export function authorizationMiddleWare(): RequestHandler {\\n  return function (request, response, next) {\\n    let { baseUrl, url, method } = request\\n    //路由统一管理就可以直接查了\\n    const routerItem = RouterHelperInstance?.getRouterItem({ baseUrl, url, method: method as any })\\n    if (!routerItem) {\\n      throw new NotFoundError(&quot;path not found:&quot; + baseUrl + url + &quot;,method&quot; + method)\\n    } else {\\n      if (routerItem.needAuth) {\\n        const res = JWTHelperIns.validateJwtToken(request)\\n        if (res &amp;&amp; res.loginId) {\\n          request.user = res\\n          next()\\n        } else {\\n          throw new ForbiddenError(&quot;authorization fail,please login again&quot;)\\n        }\\n      } else {\\n        next()\\n      }\\n    }\\n  }\\n}\\n</code></pre>\\n<p>cors</p>\\n<pre><code class=\\\"language-ts\\\">export default function (): RequestHandler {\\n  return function (request, response, next) {\\n    //是否跨域\\n    if (&quot;origin&quot; in request.headers) {\\n      let { method, path, baseUrl } = request\\n      if (method.toUpperCase() === &quot;OPTIONS&quot;) {\\n        method = request.headers[&quot;access-control-request-method&quot;]\\n      }\\n      const currentRouter = RouterHelperInstance.getRouterItem({\\n        baseUrl,\\n        method: method as any,\\n        url: path,\\n      })\\n\\n      //此路由是否允许跨域\\n      if (currentRouter?.canCORS &amp;&amp; whiteList.includes(request.headers.origin)) {\\n        //1.简单请求 添加 access-control-allow-origin\\n        if (typeof request.headers.origin !== &quot;undefined&quot;) {\\n          response.header(&quot;access-control-allow-origin&quot;, request.headers.origin)\\n        }\\n        //2. 预检请求\\n        if (request.method.toUpperCase() === &quot;OPTIONS&quot;) {\\n          response.header(&quot;access-control-allow-headers&quot;, request.headers[&quot;access-control-request-headers&quot;])\\n          response.header(&quot;access-control-allow-methods&quot;, request.headers[&quot;access-control-request-method&quot;])\\n          //未来多少秒内不要发预检了\\n          response.header(&quot;access-control-max-age&quot;, &quot;3600&quot;)\\n        }\\n        //3.带身份凭证 允许带cookie\\n        response.header(&quot;access-control-allow-credentials&quot;, &quot;true&quot;)\\n      }\\n      //预检请求就不往后面走了\\n      if (request.method.toUpperCase() === &quot;OPTIONS&quot;) {\\n        return response.status(200).end()\\n      }\\n    }\\n    next()\\n  }\\n}\\n</code></pre>\\n<p>统一错误请求</p>\\n<pre><code class=\\\"language-ts\\\">export function errorHandler(): ErrorRequestHandler {\\n  return function (err, request, response, next) {\\n    const { message, code } = getResponseErrorData(err)\\n    response.status(code).send({ message, code })\\n  }\\n}\\n\\nenum EServiceErrorCode {\\n  UploadError = &quot;413&quot;,\\n  ForbiddenError = &quot;401&quot;,\\n  ValidateError = &quot;406&quot;,\\n  NotFoundError = &quot;406&quot;,\\n  UnknownError = &quot;500&quot;,\\n}\\n\\n/**\\n * base class\\n */\\nabstract class SeviceError extends Error {\\n  code: EServiceErrorCode\\n  constructor(message: string, code: EServiceErrorCode) {\\n    super(message)\\n    this.code = code\\n  }\\n}\\n\\nclass UploadError extends SeviceError {\\n  constructor(message: string) {\\n    super(message, EServiceErrorCode.UploadError)\\n  }\\n}\\n\\nclass ForbiddenError extends SeviceError {\\n  constructor(message: string) {\\n    super(message, EServiceErrorCode.ForbiddenError)\\n  }\\n}\\n\\nclass ValidateError extends SeviceError {\\n  constructor(message: string) {\\n    super(message, EServiceErrorCode.ValidateError)\\n  }\\n}\\n\\nclass NotFoundError extends SeviceError {\\n  constructor(res = &quot;file/api not found&quot;) {\\n    super(res, EServiceErrorCode.NotFoundError)\\n  }\\n}\\n\\nclass UnknownError extends SeviceError {\\n  constructor(message: string) {\\n    super(message, EServiceErrorCode.UnknownError)\\n  }\\n}\\n</code></pre>\\n<h2 id=\\\"cookie-session-jwt-%E5%8E%9F%E7%90%86\\\" tabindex=\\\"-1\\\">cookie session jwt 原理</h2>\\n<p>接口虽好，但如何控制，又或者如何确认是哪个人，不是伪造的信息。因为 http 是无状态的。</p>\\n<h3 id=\\\"cookie\\\" tabindex=\\\"-1\\\">cookie</h3>\\n<p>存在客户端 <code>key=value;path=/;domain=?;expire=?;max-age=?secure;httponly</code></p>\\n<p>浏览器是会自动存储 cookie.浏览器发送 cookie 规则。</p>\\n<ol>\\n<li>没有过期</li>\\n<li>看 domain(基域) 与端口无关。</li>\\n<li>看 path</li>\\n<li>secure = true 只能 https\\n如果满足条件，浏览器会自动在请求头里面加入 cookie</li>\\n</ol>\\n<p>只有<strong>key,path,domain</strong>全相同才是同一个 cookie</p>\\n<pre><code class=\\\"language-ts\\\">interface Cookie{\\n   [key: string]: sting\\n\\n   /**\\n\\t* 不设置默认当前请求路径\\n    */\\n   path?: string\\n\\n   domain?: string\\n   /**\\n\\t* GMT时间，就是UTC时间\\n\\t* new Date().toGMTString()\\n\\t* \'Mon, 01 Jul 2024 10:43:49 GMT\'\\n    */\\n   expire?: string\\n   /**\\n\\t* 多少秒后过期\\n    */\\n   max-age?: string  //既没有max-age也没有expire的话，就是回话解说词\\n\\n   /**\\n\\t* 不设置都发\\n\\t* 设置只能https\\n    */\\n   secure?:boolean\\n\\n   /**\\n\\t* 只能服务端设置\\n\\t* 如果设置表示只在传输时使用，js无法使用\\n\\t* js使用可能会发生xxr(跨站脚本攻击)\\n\\t* 比如在网站里面嵌入一个iframe,他的js能访问到源网站的cookie\\n    */\\n   httponly\\n}\\n</code></pre>\\n<h3 id=\\\"session\\\" tabindex=\\\"-1\\\">session</h3>\\n<p>存在服务端，占用服务器资源 sessionid 通过 cookie 传给客户端。通过 sessionid 确认。</p>\\n<h3 id=\\\"jwt\\\" tabindex=\\\"-1\\\">jwt</h3>\\n<p>可脱离浏览器端，压根没有 cookie 啊！JSON WEB TOKEN 应运而生\\njwt 可以出现在 response 的如何地方，cookie，headers，body\\nOAuth2 的话 request 里面\\nGET PATH HTTP/1.1\\n...\\nauthorization： bearer jwt 令牌\\n...</p>\\n<pre><code class=\\\"language-ts\\\">   interface JWT{\\n\\t   header: {\\n\\t\\t  //    类型\\n\\t\\t  typ:&quot;JWT&quot;,\\n\\t\\t  //    signature签名算法\\n\\t\\t  alg: string|&quot;H256&quot;|...\\n\\t   }\\n\\t   //主体信息\\n\\t   payload: {\\n           //一些可选对象\\n\\t   }\\n\\t   //保证不被篡改\\n\\t   signature: string\\n   }\\n    instance:  base64(header).base64(payload).signature\\n    // 服务器端判断\\n\\tH256(header,payload,服务器端的密钥) === signature\\n</code></pre>\\n<p>自己写的 Helper</p>\\n<pre><code class=\\\"language-ts\\\">enum Oath2Token {\\n  key = &quot;bearer&quot;,\\n}\\n\\nclass JWTHelper {\\n  /**\\n   * add token to cookie and authorization\\n   * @param res\\n   * @param payload\\n   * @param maxAge ms\\n   */\\n  publish(res: Response, payload = {}, maxAge = 3600 * 24 * 1000) {\\n    const token = jwt.sign(payload, this._secret, {\\n      expiresIn: maxAge,\\n    })\\n    //可以放cookie\\n    // res.cookie(this._cookieKey, token, {\\n    //   maxAge,\\n    //   path: &quot;/&quot;,\\n    // })\\n    res.header(&quot;authorization&quot;, token)\\n    res.header(&quot;access-control-expose-headers&quot;, &quot;Authorization&quot;)\\n  }\\n  validateJwtToken(request: Request) {\\n    let token: string = request.cookies ? request.cookies[this._cookieKey] : &quot;&quot;\\n    if (!token) {\\n      token = request.headers.authorization\\n    } else {\\n      //if token from cookie, add bearer\\n      token = &quot;bearer &quot; + token\\n    }\\n\\n    if (!token) {\\n      throw new ForbiddenError(&quot;don\'t have token&quot;)\\n    }\\n    //处理oatu2 的 bearer\\n    const tokenArr = token.split(&quot; &quot;)\\n    if (tokenArr.length === 2) {\\n      if (tokenArr[0].toLowerCase() !== Oath2Token.key) {\\n        throw new Error(&quot;token format error&quot;)\\n      }\\n      token = tokenArr[1]\\n    }\\n\\n    try {\\n      const res = jwt.verify(token, this._secret) as ILoginReturn\\n      return res\\n    } catch (e) {\\n      throw e\\n    }\\n  }\\n  constructor(private _secret: string, private _cookieKey: string) {}\\n}\\n\\nconst defaultSetting = {\\n  secret: Math.random().toString(36).slice(-8) + Math.random().toString(36).slice(-8),\\n  cookieKey: &quot;token&quot;,\\n}\\n\\nconst JWTHelperIns = new JWTHelper(defaultSetting.secret, defaultSetting.cookieKey)\\n\\nexport default JWTHelperIns\\n</code></pre>\\n<p>​</p>\\n<h3 id=\\\"%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98-(cors)-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8D%8F%E8%AE%AE%EF%BC%8C%E7%AB%AF%E5%8F%A3%EF%BC%8C%E4%B8%BB%E6%9C%BA%E5%90%8D\\\" tabindex=\\\"-1\\\">跨域问题 (CORS) 浏览器同源策略 协议，端口，主机名</h3>\\n<ol>\\n<li>jsonp 太古老，不推荐 script 标签只能发送 get 请求 (资源文件允许跨域)</li>\\n</ol>\\n<pre><code class=\\\"language-ts\\\">//back end\\nconst res = {}\\nresponse.header(&quot;content-type&quot;, &quot;application/javascript&quot;)\\nresponse.send(`callback${JSON.stringify(res)}`)\\n\\n//front end\\nfunction jsonp(url) {\\n  const el = document.createElement(&quot;script&quot;)\\n  el.src = url\\n  document.body.appendChild(el)\\n  el.onload = () =&gt; {\\n    el.remove()\\n  }\\n}\\n\\nfunction callback(data) {}\\n</code></pre>\\n<ol start=\\\"2\\\">\\n<li>\\n<p>CORS cross origin resource sharing</p>\\n<ol>\\n<li>\\n<p>简单请求\\nmethod: get post head(下载)\\nheader 没有额外信息\\ncontent-type : text/pain;multipart/form-data;application/x-www-form-urlencoded</p>\\n<p>浏览器自动添加 origin 头\\n后端只要返回 Access-Control-Allow-Origin:*/具体域名(推荐使用具体)</p>\\n</li>\\n<li>\\n<p>带预检的请求\\n不是简单请求就会用 OPTIONS 预检\\n浏览器\\nOPTIONS /path HTTP/1.1\\nAccess-Control-Request-Method:GET\\nAccess-Control-Request-Headers:a\\nOrigin:xxxx</p>\\n</li>\\n</ol>\\n<p>后端允许\\nAccess-Control-Request-Method:GET\\nAccess-Control-Request-Headers:a\\naccess-control-max-age:?:&quot;3600&quot; //未来多少秒内不需要预检 3) 带身份凭证(如 cookie) <strong>注：当 Access-Control-Allow-Origin 为*时,不能带凭证</strong>\\n&quot;access-control-allow-credentials&quot;：&quot;true&quot;</p>\\n</li>\\n</ol>\\n<h2 id=\\\"%E5%90%8E%E7%AB%AF%E5%B8%B8%E7%94%A8%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84\\\" tabindex=\\\"-1\\\">后端常用三层架构</h2>\\n<h2 id=\\\"%E8%B7%AF%E7%94%B1%E5%B1%82-route\\\" tabindex=\\\"-1\\\">路由层 Route</h2>\\n<pre><code class=\\\"language-tex\\\"> 提供对外API express配置路由    略\\n</code></pre>\\n<h2 id=\\\"%E6%9C%8D%E5%8A%A1%E5%B1%82-service\\\" tabindex=\\\"-1\\\">服务层 Service</h2>\\n<p>业务逻辑</p>\\n<p>这边使用使用了自己写的装饰器来简单判断合法</p>\\n<pre><code class=\\\"language-ts\\\">class AdminService {\\n  /**\\n   * 判断login成功与否\\n   * @param param0\\n   * @returns\\n   */\\n  @FuncIntercepter({}, { groups: [&quot;checkUserValid&quot;] })\\n  async isUserValidate(@ParamType(AdminValidate) { loginId, loginPwd }: Partial&lt;IAdmin&gt;) {\\n    loginPwd = md5(loginPwd)\\n    const res = await AdminDaoInstance.queryUser({ loginId, loginPwd })\\n    if (res &amp;&amp; res.dataValues) {\\n      return { res: true, row: res.dataValues }\\n    }\\n    return { res: false }\\n  }\\n  /**\\n   * set Authorization header\\n   * @param response\\n   * @param param1\\n   */\\n  @FuncIntercepter()\\n  async setAuthorization(response: Express.Response, @ParamType(AdminValidate) { loginId, name, remember, role }: Partial&lt;ILoginData&gt;) {\\n    remember = remember ? +remember : 1\\n    JWTHelperIns.publish(response as any, { loginId, name, role }, 60 * 60 * 24 * remember)\\n  }\\n  @FuncIntercepter()\\n  async updateUserPwd&lt;T extends IUpdateUserPwd&gt;(@ParamType(AdminValidate) { loginId, loginPwd, oldPwd, name }: T) {\\n    const { res, row } = await this.isUserValidate({ loginId, loginPwd: oldPwd })\\n    if (res &amp;&amp; row) {\\n      // console.log(row);\\n      const { id } = row as IAdmin\\n      return await AdminDaoInstance.updateUser(\\n        {\\n          loginPwd: md5(loginPwd),\\n          name,\\n        },\\n        { id }\\n      )\\n    } else {\\n      throw new ValidateError(&quot;old password error&quot;)\\n    }\\n  }\\n}\\n</code></pre>\\n<h2 id=\\\"%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E5%B1%82-dao\\\" tabindex=\\\"-1\\\">数据访问层 DAO</h2>\\n<p>与数据库交互 通常是 ORM,相当于 MVVM,与数据库之间依赖一个抽象</p>\\n<pre><code class=\\\"language-ts\\\">class AdminDao {\\n  async queryUser({ loginId, loginPwd }: Pick&lt;IAdmin, &quot;loginId&quot; | &quot;loginPwd&quot;&gt;) {\\n    return await Admin.findOne({\\n      where: {\\n        loginId,\\n        loginPwd,\\n        isValid: &quot;Y&quot;,\\n      },\\n    })\\n  }\\n  async updateUser(newInfo: Partial&lt;IAdmin&gt;, where: Partial&lt;IAdmin&gt;) {\\n    return await Admin.update(newInfo, {\\n      where,\\n    })\\n  }\\n}\\n</code></pre>\\n\"','Y','/img/Node.png','26','4','2024-09-16','2024-09-16 13:34:34','2025-04-30 14:29:18',63),(3,'JS查漏补缺','了解HTTP与HTTPS协议,学习网络请求原理','[{\"anchor\":\"js\",\"name\":\"js\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\",\"name\":\"构造函数\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6-property-descriptor\",\"name\":\"属性描述符 property descriptor\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"es6\",\"name\":\"ES6\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"1.-symbol\",\"name\":\"1. symbol\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"2.-iterator\",\"name\":\"2. iterator\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"3.-%E7%94%9F%E6%88%90%E5%99%A8(generator)\",\"name\":\"3. 生成器(generator)\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"reflect\",\"name\":\"Reflect\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"proxy\",\"name\":\"proxy\",\"tag\":\"h2\",\"children\":[]}]}]','\"<h1 id=\\\"js\\\" tabindex=\\\"-1\\\">js</h1>\\n<h2 id=\\\"%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\\\" tabindex=\\\"-1\\\">构造函数</h2>\\n<ol>\\n<li><strong>js 中所有对象都是通过构造函数产生的</strong></li>\\n</ol>\\n<pre><code class=\\\"language-ts\\\">      const obj = {1:1} =&gt; const o = new Object()  o[1] = 1\\n      const arr = [1,2] =&gt; const arr2 = new Array(1,2)\\n      const sum = (a,b)=&gt;a+b =&gt; const sum = new Function(\'a\',\'b\',\'return a+b\')\\n</code></pre>\\n<ol start=\\\"2\\\">\\n<li>\\n<p><strong>prototype 三角关系</strong>\\n每次 <code>new instance</code> 的时候，会产生大量重复内容，占大量内存。特别是方法。\\n函数(对象)有一个属性叫<strong>prototype 的对象{}</strong>,instance 的<code>__proto__</code>(隐式原型)也会指向它。\\n所以公用成员的会放在 prototype\\n现代浏览器中 <strong><code>[[Prototype]]</code></strong> 就是 <code>__proto__</code></p>\\n</li>\\n<li>\\n<p><code>this</code> <strong>一般取决于调用</strong>\\n特殊的:</p>\\n<ol>\\n<li>()=&gt;{}\\n定义时确定<code>this</code></li>\\n<li>手动</li>\\n</ol>\\n<pre><code class=\\\"language-ts\\\">     function a(){\\n       ...\\n     }\\n     a() &lt;=&gt; a.call()\\n\\n     a.call(this,...argment)\\n     a.apply(this,...arg:[])\\n\\n</code></pre>\\n</li>\\n<li>\\n<p>原型链 -- 隐式原型链 常见方法</p>\\n<ol>\\n<li>instanceof\\n<strong><code>__proto__</code>/constructor.prototype</strong> 上面是否存在 。简单理解为 <code>是</code></li>\\n<li>Object.getPrototypeOf(o)\\n获取隐式原型 不建议直接用<code>__proto__</code></li>\\n<li>const obj = Object.create(target)\\n设置原型 斩断原型链</li>\\n<li>Object.setPrototypeOf(a1,a2)\\n设置原型</li>\\n<li>继承\\nUser.call(this,name)\\nObject.setPrototypeOf(VipUser.prototype,User.prototype)\\n<strong>注: 现在 Reflect.setPrototypeOf，Reflect.getPrototypeOf 也可以操作</strong></li>\\n</ol>\\n</li>\\n</ol>\\n<h2 id=\\\"%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6-property-descriptor\\\" tabindex=\\\"-1\\\">属性描述符 property descriptor</h2>\\n<pre><code class=\\\"language-ts\\\">interface Descriptor {\\n  value: 2\\n  writable: true\\n  enumerable: true //影响遍历,for in, Object.keys() in 会遍历__proto__\\n  configurable: true //属性描述符是否可以修改\\n  get: () =&gt; {}\\n  set: () =&gt; {}\\n}\\nObject.defineProperty(obj, &quot;key&quot;, {})\\n</code></pre>\\n<p><strong>注: get,set 与 value,writable 互斥</strong></p>\\n<h4>存取器属性</h4>\\n<p>属性描述符中设置了 get,set\\n以函数代替属性, 提升了可操作性</p>\\n<h2 id=\\\"es6\\\" tabindex=\\\"-1\\\">ES6</h2>\\n<h3 id=\\\"1.-symbol\\\" tabindex=\\\"-1\\\">1. symbol</h3>\\n<h3 id=\\\"2.-iterator\\\" tabindex=\\\"-1\\\">2. iterator</h3>\\n<p>迭代器</p>\\n<pre><code class=\\\"language-ts\\\">function next() {\\n  return { done: boolen, value: T }\\n}\\n</code></pre>\\n<p><strong>迭代器协议</strong></p>\\n<p>对象 具有知名符合属性<code>symbol.iterator</code>,并且该属性是一个迭代器创建函数，iterable</p>\\n<h3 id=\\\"3.-%E7%94%9F%E6%88%90%E5%99%A8(generator)\\\" tabindex=\\\"-1\\\">3. 生成器(generator)</h3>\\n<p><strong>通过构造函数 Generator 创造的对象, 生成器既是一个迭代器(有 next),也是一个 iterable 对象[symbol.iterator]</strong></p>\\n<ol>\\n<li>\\n<p>生成器可以有返回值, 第一次 done: true 的 value 就是返回值</p>\\n<pre><code class=\\\"language-ts\\\">\\tfunction *g(){\\n\\t\\tyield 2\\n\\t\\treturn 1\\n\\t}\\n\\tconst g = g()\\n\\tg.next() {done: false,value:2}\\n\\tg.next() {done: true, value:1}\\n\\tg.next() {done: true,value: undefined}\\n</code></pre>\\n</li>\\n<li>\\n<p>生成器 next()的参数会交给 yeild 表达式的返回值</p>\\n<pre><code class=\\\"language-ts\\\">\\tfunction *g(){\\n\\t\\tlet i = yield 2\\n\\t\\tyield i + 1\\n\\t}\\n\\tconst g = g()\\n\\tg.next() {done: false,value:2}\\n\\tg.next(10) {done: true, value:11}\\n\\tg.next() {done: true,value: undefined}\\n</code></pre>\\n<p><strong>第一次 next() 传参没有意义，见上</strong></p>\\n</li>\\n<li>\\n<p>生成器嵌套</p>\\n<pre><code class=\\\"language-ts\\\">function *g(){\\n\\tyield 2\\n\\treturn 1\\n}\\nfunction *g2(){\\n\\tyield *g()\\n\\tyield 3\\n}\\nconst g = g2()\\ng.next() {done: false,value:2}\\ng.next() {done: false, value:3}\\ng.next() {done: true,value: undefined}\\n</code></pre>\\n</li>\\n<li>\\n<p>其他 API\\n<strong>return</strong>\\n可以提前结束生成器</p>\\n<pre><code class=\\\"language-ts\\\">function* g() {\\n  yield 2\\n  return 1\\n}\\nconst g = g()\\ng.return(0)\\n</code></pre>\\n<p><strong>throw</strong>\\n这生成器中产生错误</p>\\n</li>\\n</ol>\\n<h2 id=\\\"reflect\\\" tabindex=\\\"-1\\\">Reflect</h2>\\n<p>js 内置 Api 访问底层功能 函数式编程</p>\\n<h2 id=\\\"proxy\\\" tabindex=\\\"-1\\\">proxy</h2>\\n<p>拦截一些底层操作，通常与 Reflect 公用，比如 vue 的 track，trigger 操作</p>\\n<pre><code class=\\\"language-ts\\\">const targetProxy = new Proxy(target, {\\n  set() {\\n    const type = target.hasOwnProperty(key) ? ETriggerType.set : ETriggerType.add\\n\\n    const oldValue = target[key]\\n    const oldLength = Array.isArray(target) ? target.length : null\\n\\n    const res = Reflect.set(target, key, newValue, receiver)\\n\\n    if (isChanged(oldValue, newValue)) {\\n      trigger({\\n        target,\\n        type,\\n        key: key as any,\\n      })\\n      //数组的长度变化处理\\n      if (Array.isArray(target)) {\\n        const newLength = target.length\\n        //如果隐式修改了length手动触发length更新\\n        if (key !== &quot;length&quot; &amp;&amp; oldLength !== newLength) {\\n          trigger({\\n            target,\\n            type: ETriggerType.set,\\n            key: &quot;length&quot;,\\n          })\\n        }\\n        //如果显示修改length,变大是正常的，变小的话，手动触发删除\\n        else if (newLength &lt; (oldLength as number)) {\\n          for (let i = newLength; i &lt; (oldLength as number); i++) {\\n            trigger({\\n              target,\\n              type: ETriggerType.delete,\\n              key: i,\\n            })\\n          }\\n        }\\n      }\\n    }\\n    return res\\n  },\\n  get() {\\n    //获取原始对象,不会存到proxyMap\\n    if (key === RAW) {\\n      return target\\n    }\\n    //数组可能存在一些问题,因为默认情况下对象成员全部通过get成了代理\\n    //   console.log(key, target)\\n    if (Array.isArray(target) &amp;&amp; [...Object.values(EArrayErrorType), ...Object.values(EArrayErrorType2)].includes(key as any)) {\\n      return arrayInstrumentactions[key]\\n    }\\n\\n    const res = Reflect.get(target, key, receiver)\\n\\n    //拦截收集依赖\\n    track({\\n      target,\\n      key,\\n      type: ETrackType.get,\\n    })\\n    //   console.log(&quot;拦截&quot; + (key as any))\\n    if (res instanceof Object &amp;&amp; typeof res === &quot;object&quot;) {\\n      return reactive(res)\\n    }\\n    return res\\n  },\\n})\\n</code></pre>\\n\"','Y','/img/JS.png','1','4','2024-09-16','2024-09-16 13:34:34','2024-09-23 16:28:55',64),(4,'常用CSS3汇总','HTML5+CSS3大大改善了开发体验,js确实很重要，css也是不可或缺的，让我们看看ccs3究竟新增了哪来内容','[{\"anchor\":\"%E5%B8%83%E5%B1%80\",\"name\":\"布局\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E5%BC%B9%E6%80%A7%E7%9B%92\",\"name\":\"弹性盒\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"%E7%94%9F%E6%88%90%E5%BC%B9%E6%80%A7%E5%AE%B9%E5%99%A8%E5%92%8C%E5%BC%B9%E6%80%A7%E9%A1%B9%E7%9B%AE\",\"name\":\"生成弹性容器和弹性项目\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E6%9B%B4%E6%94%B9%E6%96%B9%E5%90%91\",\"name\":\"更改方向\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E4%B8%BB%E8%BD%B4%E6%8E%92%E5%88%97\",\"name\":\"主轴排列\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E4%BE%A7%E8%BD%B4%E6%8E%92%E5%88%97\",\"name\":\"侧轴排列\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E5%BC%B9%E6%80%A7%E9%A1%B9%E7%9B%AE%E4%BC%B8%E7%BC%A9\",\"name\":\"弹性项目伸缩\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E4%B8%BB%E8%BD%B4%E6%8D%A2%E8%A1%8C\",\"name\":\"主轴换行\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"%E7%BD%91%E6%A0%BC\",\"name\":\"网格\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"%E7%94%9F%E6%88%90%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80\",\"name\":\"生成网格布局\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E5%AE%9A%E4%B9%89%E8%A1%8C%E5%92%8C%E5%88%97\",\"name\":\"定义行和列\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E6%94%B9%E5%8F%98%E6%8E%92%E5%88%97%E6%96%B9%E5%90%91\",\"name\":\"改变排列方向\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E5%8D%95%E5%85%83%E6%A0%BC%E4%B9%8B%E9%97%B4%E7%9A%84%E9%97%B4%E9%9A%99\",\"name\":\"单元格之间的间隙\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E5%8D%95%E5%85%83%E6%A0%BC%E5%86%85%E9%83%A8%E7%9A%84%E5%AF%B9%E9%BD%90\",\"name\":\"单元格内部的对齐\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E7%BD%91%E6%A0%BC%E9%A1%B9%E7%9B%AE%E5%AE%9A%E4%BD%8D\",\"name\":\"网格项目定位\",\"tag\":\"h3\",\"children\":[]}]}]},{\"anchor\":\"%E8%A7%86%E8%A7%89\",\"name\":\"视觉\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E9%98%B4%E5%BD%B1\",\"name\":\"阴影\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"%E7%9B%92%E5%AD%90%E9%98%B4%E5%BD%B1\",\"name\":\"盒子阴影\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E6%96%87%E5%AD%97%E9%98%B4%E5%BD%B1\",\"name\":\"文字阴影\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"%E5%9C%86%E8%A7%92\",\"name\":\"圆角\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E8%83%8C%E6%99%AF%E6%B8%90%E5%8F%98\",\"name\":\"背景渐变\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E5%8F%98%E5%BD%A2\",\"name\":\"变形\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"translate-%E5%B9%B3%E7%A7%BB\",\"name\":\"translate 平移\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"scale-%E7%BC%A9%E6%94%BE\",\"name\":\"scale 缩放\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"rotate-%E6%97%8B%E8%BD%AC\",\"name\":\"rotate 旋转\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E6%94%B9%E5%8F%98%E5%8F%98%E5%BD%A2%E5%8E%9F%E7%82%B9\",\"name\":\"改变变形原点\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E5%A4%9A%E7%A7%8D%E5%8F%98%E5%BD%A2%E5%8F%A0%E5%8A%A0\",\"name\":\"多种变形叠加\",\"tag\":\"h3\",\"children\":[]}]}]},{\"anchor\":\"%E8%BF%87%E6%B8%A1%E5%92%8C%E5%8A%A8%E7%94%BB\",\"name\":\"过渡和动画\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E8%BF%87%E6%B8%A1\",\"name\":\"过渡\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E5%8A%A8%E7%94%BB\",\"name\":\"动画\",\"tag\":\"h2\",\"children\":[]}]},{\"anchor\":\"%E5%85%B6%E4%BB%96\",\"name\":\"其他\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"box-sizing\",\"name\":\"box-sizing\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87\",\"name\":\"字体图标\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E5%9B%BE%E5%83%8F%E5%86%85%E5%AE%B9%E9%80%82%E5%BA%94\",\"name\":\"图像内容适应\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E8%A7%86%E5%8F%A3%E5%8D%95%E4%BD%8D\",\"name\":\"视口单位\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E4%BC%AA%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9%E5%99%A8\",\"name\":\"伪元素选择器\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E5%B9%B3%E6%BB%91%E6%BB%9A%E5%8A%A8\",\"name\":\"平滑滚动\",\"tag\":\"h2\",\"children\":[]}]}]','\"<h1 id=\\\"%E5%B8%83%E5%B1%80\\\" tabindex=\\\"-1\\\">布局</h1>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210511102802.png\\\" alt=\\\"image-20210511102549096\\\"></p>\\n<p><strong>浮动</strong>：做文字环绕效果</p>\\n<p><strong>弹性盒</strong>：单行或单列布局</p>\\n<p><strong>网格</strong>：多行多列布局</p>\\n<h2 id=\\\"%E5%BC%B9%E6%80%A7%E7%9B%92\\\" tabindex=\\\"-1\\\">弹性盒</h2>\\n<blockquote>\\n<p>详细文档见<a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout\\\">MDN</a></p>\\n<p><a href=\\\"https://flexboxfroggy.com/\\\">弹性盒小游戏</a></p>\\n</blockquote>\\n<h3 id=\\\"%E7%94%9F%E6%88%90%E5%BC%B9%E6%80%A7%E5%AE%B9%E5%99%A8%E5%92%8C%E5%BC%B9%E6%80%A7%E9%A1%B9%E7%9B%AE\\\" tabindex=\\\"-1\\\">生成弹性容器和弹性项目</h3>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210511112624.png\\\" alt=\\\"image-20210511112624876\\\"></p>\\n<p>**默认情况下，**弹性项目沿着主轴依次排列，侧轴拉伸</p>\\n<h3 id=\\\"%E6%9B%B4%E6%94%B9%E6%96%B9%E5%90%91\\\" tabindex=\\\"-1\\\">更改方向</h3>\\n<p>通过<code>flex-direction</code>可更改主轴方向</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210511112510.png\\\" alt=\\\"image-20210511112510632\\\"></p>\\n<h3 id=\\\"%E4%B8%BB%E8%BD%B4%E6%8E%92%E5%88%97\\\" tabindex=\\\"-1\\\">主轴排列</h3>\\n<p>通过<code>justify-content</code>属性，可以影响主轴的排列方式</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210511113617.png\\\" alt=\\\"image-20210511113617325\\\"></p>\\n<h3 id=\\\"%E4%BE%A7%E8%BD%B4%E6%8E%92%E5%88%97\\\" tabindex=\\\"-1\\\">侧轴排列</h3>\\n<p>通过<code>align-items</code>属性，可以影响侧轴的排列方式</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210511114016.png\\\" alt=\\\"image-20210511114016304\\\"></p>\\n<h3 id=\\\"%E5%BC%B9%E6%80%A7%E9%A1%B9%E7%9B%AE%E4%BC%B8%E7%BC%A9\\\" tabindex=\\\"-1\\\">弹性项目伸缩</h3>\\n<p>所谓伸缩，是指在<strong>主轴方向</strong>上，当<strong>弹性容器</strong>有<strong>额外空间</strong>时，是否需要拉伸，当<strong>空间不足</strong>时，是否需要<strong>压缩</strong></p>\\n<p>在<strong>弹性项目</strong>上使用<code>flex</code>属性，可设置拉伸和压缩比例：<code>flex: 拉伸比例 压缩比例 初始尺寸</code></p>\\n<p>拉伸示例：</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210511120916.png\\\" alt=\\\"image-20210511120916571\\\"></p>\\n<p>压缩示例：</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210511121459.png\\\" alt=\\\"image-20210511121459341\\\"></p>\\n<p>默认情况下，<code>flex: 0 1 auto</code></p>\\n<h3 id=\\\"%E4%B8%BB%E8%BD%B4%E6%8D%A2%E8%A1%8C\\\" tabindex=\\\"-1\\\">主轴换行</h3>\\n<p>默认情况，当主轴剩余空间不足时，按照压缩比例进行压缩，但如果设置了主轴换行，则不会压缩，直接换行显示</p>\\n<p>给<strong>弹性容器</strong>设置<code>flex-wrap: wrap</code>，即可主轴换行</p>\\n<img src=\\\"http://mdrs.yuanjin.tech/img/20210511123310.png\\\" alt=\\\"image-20210511123310673\\\" style=\\\"zoom:50%;\\\" />\\n<blockquote>\\n<p>尽管如此，多行多列仍然推荐使用网格布局</p>\\n</blockquote>\\n<h2 id=\\\"%E7%BD%91%E6%A0%BC\\\" tabindex=\\\"-1\\\">网格</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout\\\">MDN 详细文档</a></p>\\n<p><a href=\\\"http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html\\\">阮一峰网格布局教程</a></p>\\n<p><a href=\\\"https://cssgridgarden.com/\\\">网格布局小游戏</a></p>\\n</blockquote>\\n<p><strong>网格布局是多行多列布局的终极解决方案</strong></p>\\n<h3 id=\\\"%E7%94%9F%E6%88%90%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80\\\" tabindex=\\\"-1\\\">生成网格布局</h3>\\n<img src=\\\"http://mdrs.yuanjin.tech/img/20210511165317.png\\\" alt=\\\"image-20210511165317363\\\" style=\\\"zoom:50%;\\\" />\\n<p>容器生成网格布局后，其所有子元素为<strong>网格项目</strong></p>\\n<h3 id=\\\"%E5%AE%9A%E4%B9%89%E8%A1%8C%E5%92%8C%E5%88%97\\\" tabindex=\\\"-1\\\">定义行和列</h3>\\n<p><code>grid-template-rows</code>：定义行</p>\\n<p><code>grid-template-columns</code>：定义列</p>\\n<p><strong>它们的语法是相同的</strong></p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210511172305.png\\\" alt=\\\"image-20210511172305100\\\"></p>\\n<h3 id=\\\"%E6%94%B9%E5%8F%98%E6%8E%92%E5%88%97%E6%96%B9%E5%90%91\\\" tabindex=\\\"-1\\\">改变排列方向</h3>\\n<p>使用属性<code>grid-auto-flow: column</code>，可使子元素按列排放</p>\\n<img src=\\\"http://mdrs.yuanjin.tech/img/20210511173447.png\\\" alt=\\\"image-20210511173447321\\\" style=\\\"zoom:50%;\\\" />\\n<h3 id=\\\"%E5%8D%95%E5%85%83%E6%A0%BC%E4%B9%8B%E9%97%B4%E7%9A%84%E9%97%B4%E9%9A%99\\\" tabindex=\\\"-1\\\">单元格之间的间隙</h3>\\n<pre><code class=\\\"language-css\\\">row-gap: 10px; /* 行间隙为10px */\\ncolumn-gap: 20px; /* 列间隙为20px */\\ngap: 10px 20px; /* 行间隙为10px，列间隙为20px */\\n</code></pre>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210512132025.png\\\" alt=\\\"image-20210512132025687\\\"></p>\\n<h3 id=\\\"%E5%8D%95%E5%85%83%E6%A0%BC%E5%86%85%E9%83%A8%E7%9A%84%E5%AF%B9%E9%BD%90\\\" tabindex=\\\"-1\\\">单元格内部的对齐</h3>\\n<p>默认情况下，网格项目在单元格内部水平和垂直拉伸，以撑满单元格</p>\\n<p>可以使用属性<code>justify-items</code>设置<strong>水平方向</strong>的排列方式</p>\\n<p>可以使用属性<code>align-items</code>设置<strong>垂直方向</strong>的排列方式</p>\\n<p>它们的可取值是相同的：</p>\\n<pre><code class=\\\"language-css\\\">justify-items: start 左 | end 右 | center 中 | stretch 拉伸;\\nalign-items: start 上 | end 下 | center 中 | stretch 拉伸;\\n</code></pre>\\n<img src=\\\"http://mdrs.yuanjin.tech/img/20210511174450.png\\\" alt=\\\"image-20210511174450356\\\" style=\\\"zoom:50%;\\\" />\\n<p>可以使用速写属性<code>place-items: 垂直对齐方式 水平对齐方式</code>同时设置这两个值</p>\\n<pre><code class=\\\"language-css\\\">place-items: start center; /* 垂直靠上，水平居中 */\\n</code></pre>\\n<h3 id=\\\"%E7%BD%91%E6%A0%BC%E9%A1%B9%E7%9B%AE%E5%AE%9A%E4%BD%8D\\\" tabindex=\\\"-1\\\">网格项目定位</h3>\\n<p>默认情况下，网格项目依次排列到单元格中，每个网格占据一个单元格</p>\\n<p>但可以对网格项目设置<code>grid-area</code>属性来改变这一行为</p>\\n<p>使用方式为：</p>\\n<pre><code class=\\\"language-css\\\">grid-area: 起始行线编号/起始列线编号/结束行线编号/结束列线编号;\\n</code></pre>\\n<img src=\\\"http://mdrs.yuanjin.tech/img/20210511180028.png\\\" alt=\\\"image-20210511180027983\\\" style=\\\"zoom:50%;\\\" />\\n<h1 id=\\\"%E8%A7%86%E8%A7%89\\\" tabindex=\\\"-1\\\">视觉</h1>\\n<blockquote>\\n<p>所谓视觉类样式，是指不影响盒子位置、尺寸的样式，例如文字颜色、背景颜色、背景图片等</p>\\n</blockquote>\\n<h2 id=\\\"%E9%98%B4%E5%BD%B1\\\" tabindex=\\\"-1\\\">阴影</h2>\\n<h3 id=\\\"%E7%9B%92%E5%AD%90%E9%98%B4%E5%BD%B1\\\" tabindex=\\\"-1\\\">盒子阴影</h3>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-shadow\\\">MDN 详细文档</a></p>\\n</blockquote>\\n<p>通过<code>box-shadow</code>属性可以设置整个盒子的阴影</p>\\n<p>下面是一些示例</p>\\n<iframe src=\\\"http://mdrs.yuanjin.tech/html/css-manual/box-shadow.html?v=2\\\" style=\\\"height:900px;\\\"></iframe>\\n<h3 id=\\\"%E6%96%87%E5%AD%97%E9%98%B4%E5%BD%B1\\\" tabindex=\\\"-1\\\">文字阴影</h3>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-shadow\\\">MDN 详细文档</a></p>\\n</blockquote>\\n<p>通过<code>text-shadow</code>可以设置文字阴影</p>\\n<p>下面是一些示例</p>\\n<h3 id=\\\"%E6%96%87%E5%AD%97%E9%98%B4%E5%BD%B1-1\\\" tabindex=\\\"-1\\\">文字阴影</h3>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-shadow\\\">MDN 详细文档</a></p>\\n</blockquote>\\n<p>通过<code>text-shadow</code>可以设置文字阴影</p>\\n<p>下面是一些示例</p>\\n<iframe src=\\\"http://mdrs.yuanjin.tech/html/css-manual/text-shadow.html?v=3\\\" style=\\\"height:500px;\\\"></iframe>\\n<h2 id=\\\"%E5%9C%86%E8%A7%92\\\" tabindex=\\\"-1\\\">圆角</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-radius\\\">MDN 详细文档</a></p>\\n</blockquote>\\n<p>通过设置<code>border-radius</code>，可以设置盒子的圆角</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210512131026.png\\\" alt=\\\"image-20210512131026084\\\"></p>\\n<p><code>border-radius</code>可以有很多灵活的用法，将下面的代码依次粘贴到页面中测试一下</p>\\n<pre><code class=\\\"language-css\\\">border-radius: 10px; /* 同时设置4个角的圆角，半径为10px */\\nborder-radius: 50%; /* 同时设置4个角的圆角，圆的横向半径为宽度一半，纵向半径为高度一半 */\\nborder-radius: 10px 20px 30px 40px; /* 分别设置左上、右上、右下、左下的圆角 */\\n</code></pre>\\n<h2 id=\\\"%E5%9C%86%E8%A7%92-1\\\" tabindex=\\\"-1\\\">圆角</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-radius\\\">MDN 详细文档</a></p>\\n</blockquote>\\n<p>通过设置<code>border-radius</code>，可以设置盒子的圆角</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210512131026.png\\\" alt=\\\"image-20210512131026084\\\"></p>\\n<p><code>border-radius</code>可以有很多灵活的用法，将下面的代码依次粘贴到页面中测试一下</p>\\n<pre><code class=\\\"language-css\\\">border-radius: 10px; /* 同时设置4个角的圆角，半径为10px */\\nborder-radius: 50%; /* 同时设置4个角的圆角，圆的横向半径为宽度一半，纵向半径为高度一半 */\\nborder-radius: 10px 20px 30px 40px; /* 分别设置左上、右上、右下、左下的圆角 */\\n</code></pre>\\n<iframe src=\\\"http://mdrs.yuanjin.tech/html/css-manual/border-raduis.html?v=5\\\" style=\\\"height:550px;\\\"></iframe>\\n<h2 id=\\\"%E8%83%8C%E6%99%AF%E6%B8%90%E5%8F%98\\\" tabindex=\\\"-1\\\">背景渐变</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/linear-gradient()\\\">MDN 详细文档</a></p>\\n</blockquote>\\n<p>在设置<strong>背景图片</strong>时，除了可以使用<code>url()</code>加载一张背景图，还可以使用<code>linear-gradient()</code>函数设置背景渐变</p>\\n<p><code>linear-gradient()</code>用于创建一张渐变的图片，语法为：</p>\\n<pre><code class=\\\"language-css\\\">/* 设置渐变背景，方向：从上到下，颜色：从#e66465渐变到#9198e5 */\\nbackground: linear-gradient(to bottom, #e66465, #9198e5);\\n</code></pre>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210512135028.png\\\" alt=\\\"image-20210512135024676\\\"></p>\\n<h2 id=\\\"%E5%8F%98%E5%BD%A2\\\" tabindex=\\\"-1\\\">变形</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform\\\">MDN 详细文档</a></p>\\n</blockquote>\\n<p>通过<code>transform</code>属性，可以使盒子的形态发生变化</p>\\n<p>该属性支持多种变形方案，常见的有:</p>\\n<ul>\\n<li>translate，平移</li>\\n<li>scale，缩放</li>\\n<li>rotate，旋转</li>\\n</ul>\\n<p><strong>无论是哪一种 transform，都只是视觉效果的变化，不会影响盒子的布局</strong></p>\\n<p><strong>transform 不会导致浏览器 reflow 和 rerender，因此效率极高</strong></p>\\n<h3 id=\\\"translate-%E5%B9%B3%E7%A7%BB\\\" tabindex=\\\"-1\\\">translate 平移</h3>\\n<p>使用<code>translate</code>可以让盒子在原来位置上产生位移，类似于相对定位</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210512140643.png\\\" alt=\\\"image-20210512140622630\\\"></p>\\n<h3 id=\\\"scale-%E7%BC%A9%E6%94%BE\\\" tabindex=\\\"-1\\\">scale 缩放</h3>\\n<p>使用<code>translate</code>可以让盒子在基于原来的尺寸发生缩放</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210512141500.png\\\" alt=\\\"image-20210512141500499\\\"></p>\\n<h3 id=\\\"rotate-%E6%97%8B%E8%BD%AC\\\" tabindex=\\\"-1\\\">rotate 旋转</h3>\\n<p>使用<code>rotate</code>属性可以在原图基础上进行旋转</p>\\n<pre><code class=\\\"language-css\\\">/* 在原图的基础上，顺时针旋转45度角 */\\ntransform: rotate(45deg);\\n/* 在原图的基础上，顺时针旋转半圈 */\\ntransform: rotate(0.5turn);\\n</code></pre>\\n<p>可以点击下面的按钮试一下旋转效果</p>\\n<h2 id=\\\"%E8%83%8C%E6%99%AF%E6%B8%90%E5%8F%98-1\\\" tabindex=\\\"-1\\\">背景渐变</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/linear-gradient()\\\">MDN 详细文档</a></p>\\n</blockquote>\\n<p>在设置<strong>背景图片</strong>时，除了可以使用<code>url()</code>加载一张背景图，还可以使用<code>linear-gradient()</code>函数设置背景渐变</p>\\n<p><code>linear-gradient()</code>用于创建一张渐变的图片，语法为：</p>\\n<pre><code class=\\\"language-css\\\">/* 设置渐变背景，方向：从上到下，颜色：从#e66465渐变到#9198e5 */\\nbackground: linear-gradient(to bottom, #e66465, #9198e5);\\n</code></pre>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210512135028.png\\\" alt=\\\"image-20210512135024676\\\"></p>\\n<h2 id=\\\"%E5%8F%98%E5%BD%A2-1\\\" tabindex=\\\"-1\\\">变形</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform\\\">MDN 详细文档</a></p>\\n</blockquote>\\n<p>通过<code>transform</code>属性，可以使盒子的形态发生变化</p>\\n<p>该属性支持多种变形方案，常见的有:</p>\\n<ul>\\n<li>translate，平移</li>\\n<li>scale，缩放</li>\\n<li>rotate，旋转</li>\\n</ul>\\n<p><strong>无论是哪一种 transform，都只是视觉效果的变化，不会影响盒子的布局</strong></p>\\n<p><strong>transform 不会导致浏览器 reflow 和 rerender，因此效率极高</strong></p>\\n<h3 id=\\\"translate-%E5%B9%B3%E7%A7%BB-1\\\" tabindex=\\\"-1\\\">translate 平移</h3>\\n<p>使用<code>translate</code>可以让盒子在原来位置上产生位移，类似于相对定位</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210512140643.png\\\" alt=\\\"image-20210512140622630\\\"></p>\\n<h3 id=\\\"scale-%E7%BC%A9%E6%94%BE-1\\\" tabindex=\\\"-1\\\">scale 缩放</h3>\\n<p>使用<code>translate</code>可以让盒子在基于原来的尺寸发生缩放</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210512141500.png\\\" alt=\\\"image-20210512141500499\\\"></p>\\n<h3 id=\\\"rotate-%E6%97%8B%E8%BD%AC-1\\\" tabindex=\\\"-1\\\">rotate 旋转</h3>\\n<p>使用<code>rotate</code>属性可以在原图基础上进行旋转</p>\\n<pre><code class=\\\"language-css\\\">/* 在原图的基础上，顺时针旋转45度角 */\\ntransform: rotate(45deg);\\n/* 在原图的基础上，顺时针旋转半圈 */\\ntransform: rotate(0.5turn);\\n</code></pre>\\n<p>可以点击下面的按钮试一下旋转效果</p>\\n<iframe src=\\\"http://mdrs.yuanjin.tech/html/css-manual/rotate.html\\\" style=\\\"height:400px;\\\"></iframe>\\n<h3 id=\\\"%E6%94%B9%E5%8F%98%E5%8F%98%E5%BD%A2%E5%8E%9F%E7%82%B9\\\" tabindex=\\\"-1\\\">改变变形原点</h3>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-origin\\\">MDN 详细文档</a></p>\\n</blockquote>\\n<p>变形原点的位置，会影响到具体的变形行为</p>\\n<p>默认情况下，变形的原点在盒子中心，你可以通过<code>transform-origin</code>来改变它</p>\\n<pre><code class=\\\"language-css\\\">transform-origin: center; /* 设置原点在盒子中心 */\\ntransform-origin: left top; /* 设置原点在盒子左上角 */\\ntransform-origin: right bottom; /* 设置原点在盒子右下角 */\\ntransform-origin: 30px 60px; /* 设置原点在盒子坐标 (30, 60) 位置 */\\n</code></pre>\\n<p>试一试，先点击设置原点的按钮来设置原点(已在图片中使用红色小点标记)，然后点击变形按钮进行变形</p>\\n<iframe src=\\\"http://mdrs.yuanjin.tech/html/css-manual/transform-origin.html?v2\\\" style=\\\"height:600px;\\\"></iframe>\\n<h3 id=\\\"%E5%A4%9A%E7%A7%8D%E5%8F%98%E5%BD%A2%E5%8F%A0%E5%8A%A0\\\" tabindex=\\\"-1\\\">多种变形叠加</h3>\\n<p>可以一次性设置多种变形效果</p>\\n<pre><code class=\\\"language-css\\\">/* 先旋转45度，再平移(100,100) */\\ntransform: rotate(45deg) translate(100px, 100px);\\n/* 先平移(100, 100)，再旋转45度 */\\ntransform: translate(100px, 100px) rotate(45deg);\\n</code></pre>\\n<p>注意：旋转会导致坐标系也跟着旋转，从而可能影响到后续的变形效果</p>\\n<p>下面的例子可以很好的说明这一点</p>\\n<h3 id=\\\"%E5%A4%9A%E7%A7%8D%E5%8F%98%E5%BD%A2%E5%8F%A0%E5%8A%A0-1\\\" tabindex=\\\"-1\\\">多种变形叠加</h3>\\n<p>可以一次性设置多种变形效果</p>\\n<pre><code class=\\\"language-css\\\">/* 先旋转45度，再平移(100,100) */\\ntransform: rotate(45deg) translate(100px, 100px);\\n/* 先平移(100, 100)，再旋转45度 */\\ntransform: translate(100px, 100px) rotate(45deg);\\n</code></pre>\\n<p>注意：旋转会导致坐标系也跟着旋转，从而可能影响到后续的变形效果</p>\\n<p>下面的例子可以很好的说明这一点</p>\\n<iframe src=\\\"http://mdrs.yuanjin.tech/html/css-manual/multi-transform.html\\\" style=\\\"height:600px;\\\"></iframe>\\n<blockquote>\\n<p>本来打算把这个效果嵌入到 markdown，但由于嵌入后出现一些未知的 bug，因此只能粘贴效果地址了</p>\\n</blockquote>\\n<h1 id=\\\"%E8%BF%87%E6%B8%A1%E5%92%8C%E5%8A%A8%E7%94%BB\\\" tabindex=\\\"-1\\\">过渡和动画</h1>\\n<p>使用过渡和动画，可以让 css 属性变化更加丝滑</p>\\n<p><strong>过渡和动画无法对所有的 CSS 属性产生影响，能够产生影响的只有数值类属性</strong>，例如：颜色、宽高、字体大小等等</p>\\n<h2 id=\\\"%E8%BF%87%E6%B8%A1\\\" tabindex=\\\"-1\\\">过渡</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition\\\">MDN 详细文档</a></p>\\n</blockquote>\\n<pre><code class=\\\"language-css\\\">transition: 过渡属性 持续时间 过渡函数 过渡延迟;\\n</code></pre>\\n<ul>\\n<li>\\n<p><strong>过渡属性</strong></p>\\n<p>针对哪个 css 属性应用过渡。例如填写<code>transform</code>，则表示仅针对<strong>transform</strong>属性应用过渡。</p>\\n<p>若填写<code>all</code>或不填写，则表示针对所有 css 属性都应用过渡</p>\\n</li>\\n<li>\\n<p><strong>持续时间</strong></p>\\n<p>css 属性变化所持续的时间，需要带上单位。例如<code>3s</code>表示 3 秒，<code>0.5s</code>或<code>500ms</code>均表示 500 毫秒</p>\\n</li>\\n<li>\\n<p><strong>过渡函数</strong></p>\\n<p>本质是 css 属性变化的贝塞尔曲线函数，通常直接使用预设值：</p>\\n<p><code>ease-in-out</code>：平滑开始，平滑结束</p>\\n<p><code>linear</code>：线性变化</p>\\n<p><code>ease-in</code>：仅平滑开始</p>\\n<p><code>ease-out</code>：仅平滑结束</p>\\n</li>\\n<li>\\n<p><strong>过渡延迟</strong></p>\\n<p>书写规则和持续时间一样，表示过渡效果延迟多久后触发，不填则无延迟</p>\\n</li>\\n</ul>\\n<p><strong>在 JS 中，可以监听元素的<code>transitionstart</code>和<code>transitionend</code>事件，从而在过渡开始和过渡结束时做一些别的事情</strong></p>\\n<h2 id=\\\"%E5%8A%A8%E7%94%BB\\\" tabindex=\\\"-1\\\">动画</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Animations\\\">MDN 详细文档</a></p>\\n</blockquote>\\n<p><strong>动画的本质是预先定义的一套 css 变化规则，然后给该规则取个名字</strong></p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210513172902.png\\\" alt=\\\"image-20210513172902413\\\"></p>\\n<p>然后，其他元素即可使用这样的规则：</p>\\n<pre><code class=\\\"language-css\\\">animation: 规则名 持续时间;\\n</code></pre>\\n<p>在应用规则时，还可以指定更多的信息</p>\\n<pre><code class=\\\"language-css\\\">animation: 规则名 持续时间 重复次数 时间函数 动画方向 延迟时间;\\n</code></pre>\\n<p>一些细节：</p>\\n<ul>\\n<li>定义规则时，<code>0%</code>可以书写为<code>from</code></li>\\n<li>定义规则时，<code>100%</code>可以书写为<code>to</code></li>\\n<li>重复次数为<code>infinite</code>时，表示无限重复</li>\\n<li>动画方向为<code>alternate</code>时，表示交替反向，第 1 次正向，第 2 次反向，第 3 次正向，第 4 次方向，以此类推</li>\\n</ul>\\n<p><strong>在 JS 中，可以监听元素的<code>animationstart</code>和<code>animationnend</code>事件，从而在过渡开始和过渡结束时做一些别的事情</strong></p>\\n<h1 id=\\\"%E5%85%B6%E4%BB%96\\\" tabindex=\\\"-1\\\">其他</h1>\\n<h2 id=\\\"box-sizing\\\" tabindex=\\\"-1\\\">box-sizing</h2>\\n<p>一图胜千言</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210514150015.png\\\" alt=\\\"image-20210514150015660\\\"></p>\\n<p>使用<code>border-box</code>控制尺寸更加直观，因此，很多网站都会加入下面的代码</p>\\n<pre><code class=\\\"language-css\\\">* {\\n  margin: 0;\\n  padding: 0;\\n  box-sizing: border-box;\\n}\\n</code></pre>\\n<h2 id=\\\"%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87\\\" tabindex=\\\"-1\\\">字体图标</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@font-face\\\">MDN font-face 指令</a></p>\\n</blockquote>\\n<p>css3 新增了<code>font-face</code>指令，该指令可以让我们加载网络字体</p>\\n<p>其最常见的应用就是字体图标</p>\\n<p><strong>字体图标本质上是文字，即通过<code>color</code>设置颜色，通过<code>font-size</code>设置尺寸</strong></p>\\n<p>国内使用最多的字体图标平台是<a href=\\\"https://www.iconfont.cn/\\\">阿里巴巴矢量图标库</a></p>\\n<p>登录平台后即可免费使用其所有字体图标</p>\\n<h2 id=\\\"%E5%9B%BE%E5%83%8F%E5%86%85%E5%AE%B9%E9%80%82%E5%BA%94\\\" tabindex=\\\"-1\\\">图像内容适应</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/object-fit\\\">MDN 详细文档</a></p>\\n</blockquote>\\n<p>css3 属性<code>object-fit</code>可以控制<strong>多媒体内容和与元素</strong>的适应方式，通常应用在<code>img</code>或<code>video</code>元素中</p>\\n<p>一图胜千言</p>\\n<p>下图中的所有<code>img</code>元素均被固定了宽高，溢出 img 的部分实际上均不会显示</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210514134908.png\\\" alt=\\\"image-20210514134908778\\\"></p>\\n<h2 id=\\\"%E8%A7%86%E5%8F%A3%E5%8D%95%E4%BD%8D\\\" tabindex=\\\"-1\\\">视口单位</h2>\\n<p>css3 支持使用<code>vw</code>和<code>vh</code>作为单位，分别表示<code>视口宽度</code>和<code>视口高度</code></p>\\n<p>例如<code>1vh</code>表示视口高度的<code>1%</code>，<code>100vw</code>表示视口宽度的<code>100%</code></p>\\n<h2 id=\\\"%E4%BC%AA%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9%E5%99%A8\\\" tabindex=\\\"-1\\\">伪元素选择器</h2>\\n<p>通过<code>::before</code>和<code>::after</code>选择器，可以通过 css 给元素生成两个子元素</p>\\n<img src=\\\"http://mdrs.yuanjin.tech/img/20210514140049.png\\\" alt=\\\"image-20210514140049244\\\" style=\\\"zoom:50%;\\\" />\\n<p>使用伪元素可以避免在 HTML 中使用过多的空元素</p>\\n<p><strong>伪元素必须要有<code>content</code>属性，否则不能生效，如果不需要有元素内容，设置<code>content:\'\'</code></strong></p>\\n<h2 id=\\\"%E5%B9%B3%E6%BB%91%E6%BB%9A%E5%8A%A8\\\" tabindex=\\\"-1\\\">平滑滚动</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/scroll-behavior\\\">MDN 详细文档</a></p>\\n</blockquote>\\n<p>使用<code>scroll-behavior: smooth</code>，可以让滚动更加丝滑</p>\\n<p>参见 MDN 效果即可</p>\\n<blockquote>\\n<p>本来打算把这个效果嵌入到 markdown，但由于嵌入后出现一些未知的 bug，因此只能粘贴效果地址了</p>\\n</blockquote>\\n<h1 id=\\\"%E8%BF%87%E6%B8%A1%E5%92%8C%E5%8A%A8%E7%94%BB-1\\\" tabindex=\\\"-1\\\">过渡和动画</h1>\\n<p>使用过渡和动画，可以让 css 属性变化更加丝滑</p>\\n<p><strong>过渡和动画无法对所有的 CSS 属性产生影响，能够产生影响的只有数值类属性</strong>，例如：颜色、宽高、字体大小等等</p>\\n<h2 id=\\\"%E8%BF%87%E6%B8%A1-1\\\" tabindex=\\\"-1\\\">过渡</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition\\\">MDN 详细文档</a></p>\\n</blockquote>\\n<pre><code class=\\\"language-css\\\">transition: 过渡属性 持续时间 过渡函数 过渡延迟;\\n</code></pre>\\n<ul>\\n<li>\\n<p><strong>过渡属性</strong></p>\\n<p>针对哪个 css 属性应用过渡。例如填写<code>transform</code>，则表示仅针对<strong>transform</strong>属性应用过渡。</p>\\n<p>若填写<code>all</code>或不填写，则表示针对所有 css 属性都应用过渡</p>\\n</li>\\n<li>\\n<p><strong>持续时间</strong></p>\\n<p>css 属性变化所持续的时间，需要带上单位。例如<code>3s</code>表示 3 秒，<code>0.5s</code>或<code>500ms</code>均表示 500 毫秒</p>\\n</li>\\n<li>\\n<p><strong>过渡函数</strong></p>\\n<p>本质是 css 属性变化的贝塞尔曲线函数，通常直接使用预设值：</p>\\n<p><code>ease-in-out</code>：平滑开始，平滑结束</p>\\n<p><code>linear</code>：线性变化</p>\\n<p><code>ease-in</code>：仅平滑开始</p>\\n<p><code>ease-out</code>：仅平滑结束</p>\\n</li>\\n<li>\\n<p><strong>过渡延迟</strong></p>\\n<p>书写规则和持续时间一样，表示过渡效果延迟多久后触发，不填则无延迟</p>\\n</li>\\n</ul>\\n<p><strong>在 JS 中，可以监听元素的<code>transitionstart</code>和<code>transitionend</code>事件，从而在过渡开始和过渡结束时做一些别的事情</strong></p>\\n<h2 id=\\\"%E5%8A%A8%E7%94%BB-1\\\" tabindex=\\\"-1\\\">动画</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Animations\\\">MDN 详细文档</a></p>\\n</blockquote>\\n<p><strong>动画的本质是预先定义的一套 css 变化规则，然后给该规则取个名字</strong></p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210513172902.png\\\" alt=\\\"image-20210513172902413\\\"></p>\\n<p>然后，其他元素即可使用这样的规则：</p>\\n<pre><code class=\\\"language-css\\\">animation: 规则名 持续时间;\\n</code></pre>\\n<p>在应用规则时，还可以指定更多的信息</p>\\n<pre><code class=\\\"language-css\\\">animation: 规则名 持续时间 重复次数 时间函数 动画方向 延迟时间;\\n</code></pre>\\n<p>一些细节：</p>\\n<ul>\\n<li>定义规则时，<code>0%</code>可以书写为<code>from</code></li>\\n<li>定义规则时，<code>100%</code>可以书写为<code>to</code></li>\\n<li>重复次数为<code>infinite</code>时，表示无限重复</li>\\n<li>动画方向为<code>alternate</code>时，表示交替反向，第 1 次正向，第 2 次反向，第 3 次正向，第 4 次方向，以此类推</li>\\n</ul>\\n<p><strong>在 JS 中，可以监听元素的<code>animationstart</code>和<code>animationnend</code>事件，从而在过渡开始和过渡结束时做一些别的事情</strong></p>\\n<h1 id=\\\"%E5%85%B6%E4%BB%96-1\\\" tabindex=\\\"-1\\\">其他</h1>\\n<h2 id=\\\"box-sizing-1\\\" tabindex=\\\"-1\\\">box-sizing</h2>\\n<p>一图胜千言</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210514150015.png\\\" alt=\\\"image-20210514150015660\\\"></p>\\n<p>使用<code>border-box</code>控制尺寸更加直观，因此，很多网站都会加入下面的代码</p>\\n<pre><code class=\\\"language-css\\\">* {\\n  margin: 0;\\n  padding: 0;\\n  box-sizing: border-box;\\n}\\n</code></pre>\\n<h2 id=\\\"%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87-1\\\" tabindex=\\\"-1\\\">字体图标</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@font-face\\\">MDN font-face 指令</a></p>\\n</blockquote>\\n<p>css3 新增了<code>font-face</code>指令，该指令可以让我们加载网络字体</p>\\n<p>其最常见的应用就是字体图标</p>\\n<p><strong>字体图标本质上是文字，即通过<code>color</code>设置颜色，通过<code>font-size</code>设置尺寸</strong></p>\\n<p>国内使用最多的字体图标平台是<a href=\\\"https://www.iconfont.cn/\\\">阿里巴巴矢量图标库</a></p>\\n<p>登录平台后即可免费使用其所有字体图标</p>\\n<h2 id=\\\"%E5%9B%BE%E5%83%8F%E5%86%85%E5%AE%B9%E9%80%82%E5%BA%94-1\\\" tabindex=\\\"-1\\\">图像内容适应</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/object-fit\\\">MDN 详细文档</a></p>\\n</blockquote>\\n<p>css3 属性<code>object-fit</code>可以控制<strong>多媒体内容和与元素</strong>的适应方式，通常应用在<code>img</code>或<code>video</code>元素中</p>\\n<p>一图胜千言</p>\\n<p>下图中的所有<code>img</code>元素均被固定了宽高，溢出 img 的部分实际上均不会显示</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210514134908.png\\\" alt=\\\"image-20210514134908778\\\"></p>\\n<h2 id=\\\"%E8%A7%86%E5%8F%A3%E5%8D%95%E4%BD%8D-1\\\" tabindex=\\\"-1\\\">视口单位</h2>\\n<p>css3 支持使用<code>vw</code>和<code>vh</code>作为单位，分别表示<code>视口宽度</code>和<code>视口高度</code></p>\\n<p>例如<code>1vh</code>表示视口高度的<code>1%</code>，<code>100vw</code>表示视口宽度的<code>100%</code></p>\\n<h2 id=\\\"%E4%BC%AA%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9%E5%99%A8-1\\\" tabindex=\\\"-1\\\">伪元素选择器</h2>\\n<p>通过<code>::before</code>和<code>::after</code>选择器，可以通过 css 给元素生成两个子元素</p>\\n<img src=\\\"http://mdrs.yuanjin.tech/img/20210514140049.png\\\" alt=\\\"image-20210514140049244\\\" style=\\\"zoom:50%;\\\" />\\n<p>使用伪元素可以避免在 HTML 中使用过多的空元素</p>\\n<p><strong>伪元素必须要有<code>content</code>属性，否则不能生效，如果不需要有元素内容，设置<code>content:\'\'</code></strong></p>\\n<h2 id=\\\"%E5%B9%B3%E6%BB%91%E6%BB%9A%E5%8A%A8-1\\\" tabindex=\\\"-1\\\">平滑滚动</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/scroll-behavior\\\">MDN 详细文档</a></p>\\n</blockquote>\\n<p>使用<code>scroll-behavior: smooth</code>，可以让滚动更加丝滑</p>\\n<p>参见 MDN 效果即可</p>\\n\"','Y','/img/CSS.png','1','4','2024-09-16','2024-09-16 13:34:34','2024-09-23 16:29:19',65),(5,'webpack原理','了解经典工程化打包工具原理','[{\"anchor\":\"webpack\",\"name\":\"webpack\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%B7%A5%E7%A8%8B%E5%8C%96%EF%BC%9F\",\"name\":\"为什么要工程化？\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E5%8E%9F%E7%90%86\",\"name\":\"原理\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86\",\"name\":\"编译原理\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"1.-%E5%88%9D%E5%A7%8B%E5%8C%96\",\"name\":\"1. 初始化\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"2.-%E7%BC%96%E8%AF%91\",\"name\":\"2. 编译\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"3.-%E8%BE%93%E5%87%BA-emit\",\"name\":\"3. 输出 emit\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"loader\",\"name\":\"loader\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"plugins\",\"name\":\"plugins\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"webpack.config\",\"name\":\"webpack.config\",\"tag\":\"h2\",\"children\":[]}]}]','\"<h1 id=\\\"webpack\\\" tabindex=\\\"-1\\\">webpack</h1>\\n<h2 id=\\\"%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%B7%A5%E7%A8%8B%E5%8C%96%EF%BC%9F\\\" tabindex=\\\"-1\\\">为什么要工程化？</h2>\\n<p><strong>注:node 环境是读取本地文件,不存在此问题</strong>\\n<code>devtime</code>:</p>\\n<ol>\\n<li>模块细粒度</li>\\n<li>直接不同模块标准 <strong>CommonJs,ESModule</strong></li>\\n<li>使用新语法 <strong>ESNext</strong></li>\\n</ol>\\n<p><code>runtime</code>:</p>\\n<ol>\\n<li>文件越少越好:请求少</li>\\n<li>体积小：压缩</li>\\n<li>越乱越好：不想被篡改逻辑，不想被抄</li>\\n<li>执行效率高</li>\\n</ol>\\n<h2 id=\\\"%E5%8E%9F%E7%90%86\\\" tabindex=\\\"-1\\\">原理</h2>\\n<p>コンパイル結果</p>\\n<pre><code class=\\\"language-ts\\\">//通过函数环境来避免污染全局变量\\n;(function (modules) {\\n  const cachedModules = {}\\n  //定义一个类似于node环境的require,运行js代码,返回exports\\n  function __webpack_require(path) {\\n    if (cachedModules[path]) {\\n      return cachedModules[path].exports\\n    }\\n    const module = (cachedModules[path] = {\\n      id: path,\\n      loaded: false,\\n      exports: {},\\n    })\\n    const exports = module.exports\\n    modules[path].call(exports, module, exports, __webpack_require)\\n    module.loaded = true\\n    return module.exports\\n  }\\n  __webpack_require.entry = &quot;&quot;\\n  __webpack_require.cache = cachedModules\\n  return __webpack_require((__webpack_require.entry = &quot;./src/index.js&quot;))\\n})({\\n  //类似于node环境的commonjs导入\\n  // _temp(module,exports, require,__dirname,__filename)只能说除了__dirname,__filename,都一样\\n  &quot;./src/a.js&quot;: function (module, exports, require) {\\n    //  const a = 1\\n    //  console.log(a);\\n    //  module.exports = {\\n    // \\ta\\n    //  }\\n    //但是这样做会让使用的控制台输出都在当前的js里面,\\n    //这肯定是不行的,我们是想去模块里面,eval相当于新开了一个虚拟环境\\n    eval(\\n      `\\n\\t\\t\\tconst a = 1\\n\\t\\t\\tconsole.log(a);\\n\\t\\t\\tmodule.exports = {\\n\\t\\t\\t   a\\n\\t\\t\\t} \\n\\t\\t\\t` + &quot;//# sourceURL=webpack:///./src/a.js?&quot;\\n    )\\n  },\\n  &quot;./src/b.js&quot;: function (module, exports, require) {\\n    const b = 2\\n    exports.b = 2\\n  },\\n  &quot;./src/index.js&quot;: function (module, exports, require) {\\n    const a = require(&quot;./src/a.js&quot;)\\n    const b = require(&quot;./src/b.js&quot;)\\n    console.log(a)\\n    console.log(b)\\n  },\\n})\\n</code></pre>\\n<h2 id=\\\"%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86\\\" tabindex=\\\"-1\\\">编译原理</h2>\\n<h3 id=\\\"1.-%E5%88%9D%E5%A7%8B%E5%8C%96\\\" tabindex=\\\"-1\\\">1. 初始化</h3>\\n<p><strong>加载配置</strong></p>\\n<p>类似于 css 计算 <code>computed style</code>,会将 cli 参数,webpack.config.js,默认配置进行融合,生成最终配置对象\\n依托于 <code>yargs</code> 库</p>\\n<h3 id=\\\"2.-%E7%BC%96%E8%AF%91\\\" tabindex=\\\"-1\\\">2. 编译</h3>\\n<ol>\\n<li>\\n<p>创建 chunk\\nwhat’s chunk?\\n根据入口,找所有依赖。每个入口对应一个 chunk</p>\\n<pre><code class=\\\"language-ts\\\">interface chunk {\\n  name: &quot;main&quot; //只有一个入口就是main\\n  id: string //开发环境就是name,生产环境会变成数字\\n  hash: string //产生chunk assets时,根据所有文件内容生成chunk hash\\n}\\n</code></pre>\\n</li>\\n<li>\\n<p>构建依赖</p>\\n</li>\\n</ol>\\n<pre><code class=\\\"language-ts\\\">interface IChunkModules {\\n  //一般是路径,统一转换完整相对路径./src/**/* ./node_modules/**/*\\n  [moduleId: string]: string //转换后的代码\\n}\\nconst moduleCache: IChunkModules = {}\\nfunction createDepencies(entryPath) {\\n  //1. 判断是否已经加载过该模块\\n  if (moduleCache[entryPath]) {\\n    return\\n  }\\n  //2. 没用加载就开始解析\\n  // 1) 读取内容\\n  const content = fs.readFileSync(entryPath)\\n  // 2) AST 抽象语法数分析 这是一棵树\\n  const astResult = AST(content)\\n  // 3) 遍历树 获取所有依赖 require,import,记录为完整相对路径\\n  const dependencies: string[] = loopTree(astResult)\\n  // 4) 替换依赖函数 require=&gt;__webpack_require\\n  // 5）保存替换后的代码\\n  moduleCache[entryPath] = content.replaceAll(&quot;require&quot;, &quot;__webpack_require&quot;) //肯定不能这样写吧\\n  // 6) 递归dependencies,深度优先\\n  dependencies.forEach((path) =&gt; createDepencies(path))\\n}\\n</code></pre>\\n<ol start=\\\"3\\\">\\n<li>产生 chunk assets(资源列表) <code>bundle</code>\\n根据 chunk 的 modules 生成资源列表。每个项就是对应一个具体文件。也叫 bundle</li>\\n</ol>\\n<pre><code class=\\\"language-ts\\\">{\\n\\t[文件名: string]:文件内容\\n\\t\'./dist/bundle.js\':(function (modules){})({\\n\\t   \'./src/a.js\':function (module,exports,require){\\n\\t\\t\\t//  const a = 1\\n         //  console.log(a);\\n\\t\\t\\t//  module.exports = {\\n\\t\\t\\t// \\ta\\n\\t\\t\\t//  }\\n\\t\\t\\t //但是这样做会让使用的控制台输出都在当前的js里面,\\n\\t\\t\\t //这肯定是不行的,我们是想去模块里面,eval相当于新开了一个虚拟环境\\n\\t\\t\\teval(`\\n\\t\\t\\tconst a = 1\\n\\t\\t\\tconsole.log(a);\\n\\t\\t\\tmodule.exports = {\\n\\t\\t\\t   a\\n\\t\\t\\t}\\n\\t\\t\\t`+&quot;//# sourceURL=webpack:///./src/a.js?&quot;);\\n\\t\\t},\\n})\\n</code></pre>\\n<ol start=\\\"4\\\">\\n<li>合并 chunk assets(可能有多个 chunk)\\n合并 chunk assets,生成总 hash</li>\\n</ol>\\n<h3 id=\\\"3.-%E8%BE%93%E5%87%BA-emit\\\" tabindex=\\\"-1\\\">3. 输出 emit</h3>\\n<p>将合并后 chunk assets 通过 fs 模块输出</p>\\n<h2 id=\\\"loader\\\" tabindex=\\\"-1\\\">loader</h2>\\n<p>本质: 文件内容=&gt;可以别分析(js 内容)</p>\\n<pre><code class=\\\"language-ts\\\">  module: {\\n    rules: [\\n      {\\n        test: /\\\\.tsx?$/, //路径匹配\\n        // use: [&quot;ts-loader&quot;],//loader路径配置,其实用的就是node的require\\n        use: [\\n          {\\n            loader: [&quot;ts-loader&quot;],\\n            options: {\\n\\t\\t\\t\\t//配置通过loader-utils取this上读取\\n\\t\\t\\t},\\n          },\\n        ],\\n        exclude: /node_modules/,\\n      },\\n    ],\\n  },\\n</code></pre>\\n<p><strong>注:loaders 是倒着执行的,类似于 decorator</strong></p>\\n<pre><code class=\\\"language-ts\\\">{\\n  module: {\\n    rules: [\\n      {\\n        test: /\\\\.js/,\\n        use: [&quot;./src/loaders/testloader/loader&quot;, &quot;./src/loaders/testloader/loader2&quot;],\\n      },\\n      {\\n        test: /test\\\\.js/,\\n        use: [&quot;./src/loaders/testloader/loader3&quot;, &quot;./src/loaders/testloader/loader2&quot;],\\n      },\\n    ]\\n  }\\n}\\n\\n// 输出结果\\n2\\n3\\n2\\n1\\n\\n// 原理\\n\\nlet fscontent = xxx\\nconst rules = []\\n///\\\\.js/匹配成功\\nrules.push(...[&quot;./src/loaders/testloader/loader&quot;, &quot;./src/loaders/testloader/loader2&quot;])\\n///test\\\\.js/ 匹配成功\\nrules.push(...[&quot;./src/loaders/testloader/loader3&quot;, &quot;./src/loaders/testloader/loader2&quot;])\\n\\nfor (let i = rules.length - 1; i + 1; i--) {\\n  const loader = require(rules[i])\\n  //将fs读取内容交给loader\\n  fscontent = loader(fscontent)\\n}\\nreturn fscontent\\n</code></pre>\\n<p>例 css loader</p>\\n<pre><code class=\\\"language-ts\\\">//entry.js\\nrequire(&quot;./style/index.css&quot;)\\n//require本身肯定是不能读取css\\n//webpack是肯定能读取出来文件内容的,错误发生在抽象AST分析那块\\n//也就是说只有通过loader,将文件内容=&gt;可以别分析(js内容)就行\\n\\n// webpack.config.js\\n//\\n {\\n        test: /\\\\.css/,\\n        use: [&quot;./src/loaders/cssLoader&quot;],\\n }\\n\\n //loader\\n module.exports = function (sourceCode) {\\n  const res = `\\n    const style = document.createElement(&quot;style&quot;)\\n    style.innerHTML = \\\\`${sourceCode}\\\\`\\n    document.head.appendChild(style)\\n    module.exports = \\\\`${sourceCode}\\\\`\\n  `\\n  //   console.log(res)\\n  return res\\n}\\n</code></pre>\\n<h2 id=\\\"plugins\\\" tabindex=\\\"-1\\\">plugins</h2>\\n<p>与 loaders 不同,plugins 是用于处理 webpack 编译过程中的 hooks</p>\\n<pre><code class=\\\"language-ts\\\">import { Compilation, Compiler } from &quot;webpack&quot;\\n\\nclass Compiler {\\n  //创建于初始化阶段\\n  //编译与输出这些操作是内部创建的Compilation完成\\n  // watch时,重新编译只是重新创建Compilation\\n}\\n//统计bundle大小的plugins\\nclass MyPlugin {\\n  //创建Compiler之后就会运行apply\\n  apply(compiler: Compiler) {\\n    compiler.hooks.emit.tap(&quot;MyFilePlugin&quot;, (compilation) =&gt; {\\n      const assets = Object.keys(compilation.assets)\\n      const res = assets\\n        .map((x) =&gt; {\\n          const size = compilation.assets[x].size()\\n\\n          return `[${x}]:\\n    \\t  size:${size / 1000}kb\\n    \\t`\\n        })\\n        .join(&quot;\\\\n\\\\n&quot;)\\n      compilation.assets[this.filmeName] = {\\n        source() {\\n          return res\\n        },\\n        size() {\\n          return Buffer.from(res).byteLength\\n        },\\n      }\\n    })\\n  }\\n}\\n</code></pre>\\n<h2 id=\\\"webpack.config\\\" tabindex=\\\"-1\\\">webpack.config</h2>\\n<p>导出可以使用函数,增加可操作性</p>\\n<pre><code class=\\\"language-ts\\\">module.export = (env) =&gt; {\\n  return {\\n    entry: {\\n      main: &quot;./src/index.js&quot;,\\n    },\\n  }\\n}\\n</code></pre>\\n\"','Y','/img/webpack.png','2','4','2024-09-16','2024-09-16 13:34:34','2024-09-23 16:29:45',67),(6,'node包管理器','常见包管理器及其区别','[{\"anchor\":\"npm-node-package-manager\",\"name\":\"npm node package manager\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E5%8E%86%E5%8F%B2\",\"name\":\"历史\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E8%AE%BE%E7%BD%AE%E4%B8%8B%E8%BD%BD%E6%BA%90\",\"name\":\"设置下载源\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\".gitignore\",\"name\":\".gitignore\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E5%AE%89%E8%A3%85-npm-install\",\"name\":\"安装 npm install\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-npm-init\",\"name\":\"配置文件 npm init\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"package.json\",\"name\":\"package.json\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"package-lock.json\",\"name\":\"package-lock.json\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"%E8%AF%AD%E4%B9%89%E7%89%88%E6%9C%AC\",\"name\":\"语义版本\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"script\",\"name\":\"script\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"json-%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8\",\"name\":\"json 文件的使用\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E5%91%BD%E4%BB%A4\",\"name\":\"命令\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E5%8F%91%E5%B8%83\",\"name\":\"发布\",\"tag\":\"h2\",\"children\":[]}]},{\"anchor\":\"yarn\",\"name\":\"yarn\",\"tag\":\"h1\",\"children\":[]},{\"anchor\":\"cnpm-%E6%B2%A1%E6%9C%89%E6%84%8F%E4%B9%89\",\"name\":\"cnpm 没有意义\",\"tag\":\"h1\",\"children\":[]},{\"anchor\":\"nvm-node-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-%E5%AE%89%E8%A3%85%E4%B9%8B%E5%90%8E%E7%9B%B4%E6%8E%A5-nvm%2C%E5%A4%A7%E6%A6%82%E5%B0%B1%E8%83%BD%E7%9C%8B%E5%87%BA%E6%9D%A5%E5%93%AA%E4%BA%9B%E5%91%BD%E4%BB%A4%2C%E5%B9%B2%E5%95%A5%E7%9A%84\",\"name\":\"nvm node 版本管理工具 安装之后直接 nvm,大概就能看出来哪些命令,干啥的\",\"tag\":\"h1\",\"children\":[]},{\"anchor\":\"pnpm\",\"name\":\"pnpm\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"pnpm-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\",\"name\":\"pnpm 目录结构\",\"tag\":\"h3\",\"children\":[]}]}]','\"<h1 id=\\\"npm-node-package-manager\\\" tabindex=\\\"-1\\\">npm node package manager</h1>\\n<h2 id=\\\"%E5%8E%86%E5%8F%B2\\\" tabindex=\\\"-1\\\">历史</h2>\\n<p>node 模块化 ==&gt; 第三方 lib 发展==&gt;包管理复杂化==&gt;npm 应运而生==&gt;node 发展 npmjs.com，cli=&gt;command-line interface</p>\\n<h2 id=\\\"%E8%AE%BE%E7%BD%AE%E4%B8%8B%E8%BD%BD%E6%BA%90\\\" tabindex=\\\"-1\\\">设置下载源</h2>\\n<p>registry(注册) 数据库服务器\\nnpm config set registry https://registry.npm.taobao.org\\nnmp config get registry</p>\\n<h2 id=\\\".gitignore\\\" tabindex=\\\"-1\\\">.gitignore</h2>\\n<p>node_modules\\n源码要忽略 node_modules</p>\\n<h2 id=\\\"%E5%AE%89%E8%A3%85-npm-install\\\" tabindex=\\\"-1\\\">安装 npm install</h2>\\n<p>npm install axios jquery 可以一下安装多个\\nnpm i axios jquery\\n(以前要加 --save/-S 保存到 package.json 里面,现在不需要)\\nnpm i prettier -D/--save-dev 安装到 dev 里面\\nnpm i typescript --global/-g</p>\\n<p>npm i --production 只安装生产环境包</p>\\n<p>有些 package 会提供 cli\\n这时这些命令会存在 node_module/.bin 通过 npx 运行 (非全局安装)\\nusr/appdata/roaming/npm</p>\\n<h2 id=\\\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-npm-init\\\" tabindex=\\\"-1\\\">配置文件 npm init</h2>\\n<h3 id=\\\"package.json\\\" tabindex=\\\"-1\\\">package.json</h3>\\n<p>大部分看名字就知道了，就略了\\nmain:\'index.js\' entry point 0. 是不是 node 内部模块 require(\'fs\')\\nrequire(\'jquery\') =&gt; 1.当文件找 node_modules/jquery.js 如果找不到就 2 2.当包来找 有没有 package.json 且配置了 main, 有就 node_modules/jquery/${main}.js\\n没有就 node_modules/jquery/index.js 3.返回上一级重复</p>\\n<h3 id=\\\"package-lock.json\\\" tabindex=\\\"-1\\\">package-lock.json</h3>\\n<p>有时，依赖过于复杂，可能不同 package 依赖同一个 package 的不太大版本，各种冲突\\nlock 记录了此项目的所有确切依赖关系\\n项目中存在 package-lock.json 时，会安装 package-lock.json 内容，不存在才会安装 package.json</p>\\n<h2 id=\\\"%E8%AF%AD%E4%B9%89%E7%89%88%E6%9C%AC\\\" tabindex=\\\"-1\\\">语义版本</h2>\\n<p>你编写一个包依赖一个 package，别人安装你的包的时候，你想要他安装的 package 是和你的一样还是可以最新？</p>\\n<pre><code class=\\\"language-js\\\">   &gt; 大于版本\\n\\t  &gt;=\\n\\t  &lt;\\n\\t  &lt;=\\n\\t  - 1.2.1-3.4.1 之间\\n\\t  x  1.1.x  补丁版本号随意\\n\\t  ~  ~1.1.6  补丁版本&gt;=6\\n\\t  ^  ^4.4.0  主版本不变\\n\\t  *  lastest 最新\\n</code></pre>\\n<h2 id=\\\"script\\\" tabindex=\\\"-1\\\">script</h2>\\n<pre><code> 脚本里面可以省略npx\\n start、test、stop可以省略run\\n npm start 默认serve.js\\n\\n ```js\\n   start: &quot;nodemon script/start.js&quot;\\n ```\\n ## 环境变量\\n 1. 永久设置 process.env.NODE_ENV (系统环境变量里面加一个NODE_ENV变量) 但不推荐\\n 2. 临时设置 windows: set NODE_ENV=development\\n             mac: export NODE_ENV=development\\n\\t\\t\\t 可以用插件在script中兼容\\n</code></pre>\\n<h2 id=\\\"json-%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8\\\" tabindex=\\\"-1\\\">json 文件的使用</h2>\\n<p>直接 require</p>\\n<pre><code class=\\\"language-js\\\">const json = require(&quot;./package.json&quot;)\\n</code></pre>\\n<h2 id=\\\"%E5%91%BD%E4%BB%A4\\\" tabindex=\\\"-1\\\">命令</h2>\\n<ol>\\n<li>\\n<p>精确安装最新版\\nnpm i --save-exact/-E package &lt;=&gt; &quot;konva&quot;: &quot;9.3.6&quot;(此时的最新版)</p>\\n</li>\\n<li>\\n<p>指定版本\\nnpm i lodash@2.1.1</p>\\n</li>\\n<li>\\n<p>查询安装路径\\nnpm root [-g]</p>\\n</li>\\n<li>\\n<p>查看包的信息(直接看官网的)\\nnpm view vue\\nview aliases:v info show</p>\\n</li>\\n<li>\\n<p>查看安装包\\nnpm list [-g] [--depth=\'依赖深度\']\\nlist aliases:ls la ll</p>\\n</li>\\n<li>\\n<p>查看可以更新包\\nnpm outdated</p>\\n</li>\\n<li>\\n<p>更新\\nnpm update [-g] [package]\\nupdate aliases: up, upgrade</p>\\n</li>\\n<li>\\n<p>卸载\\nnpm uninstall [-g] package</p>\\n</li>\\n<li>\\n<p>npm config ls [-l] [--json] 查看生效的配置</p>\\n</li>\\n<li>\\n<p>npm config get/set/delete 配置 npm config get registry</p>\\n</li>\\n<li>\\n<p>查看依赖包 漏洞\\nnpm audit</p>\\n</li>\\n<li>\\n<p>查看为啥安装这个包\\nnpm explain vue</p>\\n</li>\\n</ol>\\n<p>更新 npm:\\nnpm i npm -g 全局安装 npm 最新版,此时的 npm 将使用全局的 npm 命令\\nnpm update -g npm 更新全局安装的 npm</p>\\n<h2 id=\\\"%E5%8F%91%E5%B8%83\\\" tabindex=\\\"-1\\\">发布</h2>\\n<p>注册 npm 官网账号\\nnpm cli 登录\\nnpm login/logout\\nnpm whoami\\n填写 packjson</p>\\n<p>添加 LICENSE http://choosealicense.online/appendix\\n添加 README.MD\\nnpm publish</p>\\n<h1 id=\\\"yarn\\\" tabindex=\\\"-1\\\">yarn</h1>\\n<p>当时的 npm 很垃圾,串行下载啊,非扁平结构,输出繁琐,没有 npx……\\n于是 Facebook,chrome 等大公司就制作了 yarn,优化 npm 操作\\n现在的 npm 与 yarn 的差别不大</p>\\n<h2 id=\\\"%E5%91%BD%E4%BB%A4-1\\\" tabindex=\\\"-1\\\">命令</h2>\\n<p>yarn init --yes/-y</p>\\n<p>yarn [global/-g] add package@ package [--dev/-D] [--exact/-E]</p>\\n<p>yarn install [--production/--prod] 安装所有</p>\\n<p>yarn run script (start,stop,test)可以省略 run\\nyarn run package 内置命令 (npx 学的它)</p>\\n<p>yarn [global/-g] bin 查看包的命令文件夹\\nyarn info package 字段名\\nyarn [global/-g] list [--depth]</p>\\n<p>yarn outdate</p>\\n<p>yarn [global/-g] update</p>\\n<p>yarn remove package</p>\\n<p>yarn check 查看 package.json 与 yarn.lock 是否匹配\\nyarn audit\\nyarn why</p>\\n<p>yarn create 用于安装脚手架\\n过去的做法</p>\\n<ol>\\n<li>全局安装 yarn add create-react-app -g</li>\\n<li>运行脚手架命令 create-react-app my-app\\n使用 yarn create\\nyarn create react-app my-app</li>\\n</ol>\\n<h1 id=\\\"cnpm-%E6%B2%A1%E6%9C%89%E6%84%8F%E4%B9%89\\\" tabindex=\\\"-1\\\">cnpm 没有意义</h1>\\n<p>现在可以使用 npm config set registry 修改,</p>\\n<h1 id=\\\"nvm-node-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-%E5%AE%89%E8%A3%85%E4%B9%8B%E5%90%8E%E7%9B%B4%E6%8E%A5-nvm%2C%E5%A4%A7%E6%A6%82%E5%B0%B1%E8%83%BD%E7%9C%8B%E5%87%BA%E6%9D%A5%E5%93%AA%E4%BA%9B%E5%91%BD%E4%BB%A4%2C%E5%B9%B2%E5%95%A5%E7%9A%84\\\" tabindex=\\\"-1\\\">nvm node 版本管理工具 安装之后直接 nvm,大概就能看出来哪些命令,干啥的</h1>\\n<p>nvm install\\nnvm use</p>\\n<h1 id=\\\"pnpm\\\" tabindex=\\\"-1\\\">pnpm</h1>\\n<p>简洁的 node_modules 目录\\n避免使用间接依赖\\n降低磁盘占用<br>\\n原理: 直接下载到到当前盘副的根目录,每次安装如果存在会直接建立链接非拷贝(类似快捷方式),也就是说包存在一份\\n回到了树形结构</p>\\n<p>[扩展] 文件本质是一个指向外部存储的指针\\n删除的是指针,所以删除和大小无关。也是为啥数据可以恢复的原因。</p>\\n<pre><code>\\t 硬链接：unix操作系统中,将一个新指针指向当前位置,相当于引用\\n\\t         现在windows中也支持硬链接\\n\\t\\t\\t mklink /h 链接名称 目标文件(只能是文件不能是文件夹)\\n\\t\\t\\t 删除不影响硬链接\\n\\t 软链接(符号链接): 指向文件夹或文件\\n\\t         mklin /d 链接名称 目标文件\\n\\t\\t\\t 符号链接始终和链接内容关联\\n\\n\\tnode中: node无法区分是不是硬链接\\n\\t        软链接会找到原始位置执行\\n\\tpnpm 的结构是\\n</code></pre>\\n<h3 id=\\\"pnpm-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\\\" tabindex=\\\"-1\\\">pnpm 目录结构</h3>\\n<pre><code class=\\\"language-ts\\\">node_modules\\n  .pnpm\\n\\t node_modules  // 所有间接依赖\\n     registry      // 所有直接依赖资源  每个依赖都包含着版本\\n\\t\\t  node_modules\\n\\t\\t  自己的源码 硬链接\\n\\t\\t  直接依赖  registry下面依赖的软链接\\n\\n   librarys //.pnpm 下面 registry 下面直接依赖的软链接\\n</code></pre>\\n\"','Y','/img/NPM.png','1','4','2024-09-16','2024-09-16 13:34:34','2024-09-23 16:30:14',74);
/*!40000 ALTER TABLE `blog` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_jp`
--

DROP TABLE IF EXISTS `blog_jp`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `blog_jp` (
  `id` int NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `description` varchar(255) DEFAULT '0',
  `toc` text NOT NULL,
  `htmlContent` text NOT NULL,
  `isValid` varchar(1) NOT NULL DEFAULT 'Y',
  `thumb` varchar(255) NOT NULL,
  `scanNumber` varchar(255) NOT NULL,
  `commentNumber` varchar(255) NOT NULL,
  `createDate` varchar(255) NOT NULL,
  `createdAt` datetime NOT NULL,
  `updatedAt` datetime NOT NULL,
  `blogType` int DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `blogType` (`blogType`),
  CONSTRAINT `blog_jp_ibfk_1` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_10` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_11` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_12` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_13` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_14` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_15` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_16` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_17` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_18` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_19` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_2` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_20` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_21` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_22` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_23` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_24` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_25` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_26` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_27` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_28` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_29` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_3` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_30` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_31` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_32` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_33` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_34` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_35` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_36` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_37` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_38` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_39` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_4` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_40` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_41` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_42` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_43` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_44` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_45` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_46` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_47` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_48` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_49` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_5` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_50` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_51` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_52` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_53` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_54` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_55` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_56` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_57` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_58` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_59` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_6` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_60` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_61` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_62` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_63` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_64` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_65` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_66` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_67` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_68` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_69` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_7` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_70` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_71` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_72` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_73` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_74` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_75` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_76` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_77` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_78` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_79` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_8` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_80` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_81` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_82` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_83` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_84` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_85` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_86` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_87` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_88` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_89` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_9` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `blog_jp_ibfk_90` FOREIGN KEY (`blogType`) REFERENCES `blogtype` (`id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_jp`
--

LOCK TABLES `blog_jp` WRITE;
/*!40000 ALTER TABLE `blog_jp` DISABLE KEYS */;
INSERT INTO `blog_jp` VALUES (1,'HTTP および HTTPS プロトコル','HTTP および HTTPS プロトコルを理解し、ネットワーク リクエストの原則を学ぶ','[{\"anchor\":\"http\",\"name\":\"http\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"c%2Fs-b%2Fs\",\"name\":\"c/s b/s\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"url-uniform-resource-location\",\"name\":\"url uniform resource location\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"http-protocol-tcp%2Fip-%E3%81%AB%E5%9F%BA%E3%81%A5%E3%81%84%E3%81%A6%E3%81%84%E3%81%BE%E3%81%99\",\"name\":\"http protocol TCP/IP に基づいています\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"request\",\"name\":\"Request\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"response\",\"name\":\"Response\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"ajax-webapi\",\"name\":\"ajax webApi\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"https-protocol-tcp%2Fip%E3%80%81ssl-%E3%81%AB%E5%9F%BA%E3%81%A5%E3%81%84%E3%81%A6%E3%81%84%E3%81%BE%E3%81%99\",\"name\":\"https protocol TCP/IP、SSL に基づいています\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"%E6%9A%97%E5%8F%B7%E5%8C%96%E6%96%B9%E5%BC%8F\",\"name\":\"暗号化方式\",\"tag\":\"h3\",\"children\":[]}]}]}]','\"<h1 id=\\\"http\\\" tabindex=\\\"-1\\\">http</h1>\\n<h2 id=\\\"c%2Fs-b%2Fs\\\" tabindex=\\\"-1\\\">c/s b/s</h2>\\n<p><code>client(クライアント)</code> <code>browser(ブラウザ)</code> <code>browserサーバー</code>\\nサーバーは特定のポートをリッスンするアプリケーションです\\nクライアントは単なるアプリケーションです\\nリクエストを発行するのはクライアントです\\nサーバーは Response に応答します</p>\\n<h2 id=\\\"url-uniform-resource-location\\\" tabindex=\\\"-1\\\">url <code>uniform resource location</code></h2>\\n<p>構成</p>\\n<p>http://www.baidu.com/s?wd=test#home\\n<code>schema/protocol</code>:http\\n<code>host</code>: www.baidu.com (または ip)\\n<code>port</code>: 80\\n<code>path</code>:/s\\n<code>params</code>:?wd=test\\n<code>hash</code>:#home</p>\\n<h2 id=\\\"http-protocol-tcp%2Fip-%E3%81%AB%E5%9F%BA%E3%81%A5%E3%81%84%E3%81%A6%E3%81%84%E3%81%BE%E3%81%99\\\" tabindex=\\\"-1\\\">http protocol <code>TCP/IP に基づいています</code></h2>\\n<ol>\\n<li>各リクエストとレスポンスは独立しています。。</li>\\n<li>渡されるメッセージはすべて<code>string</code>で、形式は次のとおりです。</li>\\n</ol>\\n<h3 id=\\\"request\\\" tabindex=\\\"-1\\\">Request</h3>\\n<pre><code class=\\\"language-ts\\\">   request line   post  /api/user  HTTP/1.1\\n   request header Content-Type: application/json\\n                  User-Agent: Molila5.0 ………………\\n\\t\\t\\t\\t  HOST:\\n\\t\\t\\t\\t  origin:\\n\\t\\t\\t\\t  Connection:\\n\\n   request Body   {\\n\\t                 id:xxxx\\n                  }\\n\\n</code></pre>\\n<p>従来のルール,<code>get</code>と<code>delete</code>は body 持ってません。params しかつかえません。\\n<code>post</code>と <code>put</code>は body 持ってます。</p>\\n<p><strong>Content-Type</strong></p>\\n<ol>\\n<li>\\n<p>x-www-form-urlencoded</p>\\n<pre><code class=\\\"language-ts\\\">id = xxx\\n</code></pre>\\n</li>\\n<li>\\n<p>json</p>\\n<pre><code class=\\\"language-ts\\\">{\\n  id: xxx\\n}\\n</code></pre>\\n</li>\\n<li>\\n<p>form-data</p>\\n</li>\\n</ol>\\n<p>​ ファイルアップロードにもちいてます。</p>\\n<h3 id=\\\"response\\\" tabindex=\\\"-1\\\">Response</h3>\\n<pre><code class=\\\"language-ts\\\">   response line    HTTP/1.1 200 Ok\\n   response header  Content-Type: text/html;charset=utf-8\\n                    Server: BWS/1.1\\n\\n   response body    &lt;html&gt;&lt;/html&gt;\\n\\n</code></pre>\\n<p><strong>応答コード</strong>\\n<code>1**</code> message サーバーはリクエストを受信し、クライアントが送信を続ける必要があります。\\n<code>2**</code> success\\n<code>3**</code> redirect\\n<code>4**</code> client error\\n<code>5**</code> server error</p>\\n<h3 id=\\\"ajax-webapi\\\" tabindex=\\\"-1\\\">ajax <code>webApi</code></h3>\\n<pre><code class=\\\"language-ts\\\">//ネイティブajax\\nconst xhr = new XMLHttpRequest()\\n\\nxhr.onreadystatechange = function () {\\n  switch (xhr.readyState) {\\n    case 1:\\n      console.log(&quot;open execute&quot;)\\n      break\\n    case 2:\\n      console.log(&quot;send method execute&quot;)\\n      break\\n    case 3:\\n      console.log(&quot;receiving response body&quot;)\\n      break\\n    case 4:\\n      console.log(&quot;received all response&quot;)\\n      const res = JSON.parse(xhr.responseText)\\n      break\\n  }\\n}\\n\\nxhr.setRequestHeader(&quot;Content-type&quot;, &quot;application/json&quot;)\\nxhr.open(&quot;post&quot;, &quot;www.baidu.com&quot;)\\nxhr.send(\\n  JSON.stringify({\\n    a: 1,\\n  }) || null\\n)\\n</code></pre>\\n<pre><code class=\\\"language-ts\\\">// Fetch ES6で,Promiseでajaxを実現します\\nfetch(&quot;www.baidu.com&quot;, {\\n  method: &quot;post&quot;,\\n  headers: {\\n    &quot;Content-Type&quot;: &quot;application/json&quot;,\\n  },\\n  body: JSON.stringify({}),\\n}).then((res) =&gt; res.json() /**応答本文の受信をします */)\\n</code></pre>\\n<h2 id=\\\"https-protocol-tcp%2Fip%E3%80%81ssl-%E3%81%AB%E5%9F%BA%E3%81%A5%E3%81%84%E3%81%A6%E3%81%84%E3%81%BE%E3%81%99\\\" tabindex=\\\"-1\\\">https protocol <code>TCP/IP、SSL に基づいています</code></h2>\\n<h3 id=\\\"%E6%9A%97%E5%8F%B7%E5%8C%96%E6%96%B9%E5%BC%8F\\\" tabindex=\\\"-1\\\">暗号化方式</h3>\\n<ol>\\n<li><code>対称暗号化</code>、暗号化と復号化に同じキーが使用されます。</li>\\n<li><code>非対称暗号化</code>、キーのペアを生成します。公開キー暗号化は秘密キーでのみ復号化できます。</li>\\n</ol>\\n<p><strong>https 前の問題</strong></p>\\n<pre><code class=\\\"language-ts\\\">A ----公開キー----&gt; B\\n&lt;---公開キー*key--\\n-----key*(data)--&gt;\\n// 第三者が他人の公開鍵を保存して自分の公開鍵を公開すると、その後の通信が改ざんされる可能性があります。\\n</code></pre>\\n<p><strong>今</strong>\\n認証局(Certificate Authority)の秘密キーを使用して、Web サイトの公開キー、Web サイトの証明書の署名 (signature)、発行局、および Web サイトのドメイン名を暗号化して証明書(Digital Certificate)を生成します。</p>\\n<p>公開キーは誰でも持つことができるため、内部の公開キーを誰でも見ることができますが。ブラウザはこの公開情報を使用して Web サイトの証明書の署名を計算できます。計算された署名がユーザーが指定した署名と一致しないことが判明したとばれます。</p>\\n\"','Y','/img/HTTP.png','2','4','2024-09-16','2024-09-16 13:34:34','2024-09-23 16:26:41',73),(2,'NodeJs勉強','一直很在意的工程化问题,只有通过node的学习了解全貌,对传统后端经验及前端经验的人并不困难','[{\"anchor\":\"node\",\"name\":\"node\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E6%A6%82%E8%A6%81\",\"name\":\"概要\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"what\'s-node\",\"name\":\"what\'s node\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E3%81%AA%E3%81%9C%E3%83%8E%E3%83%BC%E3%83%89%E3%81%8C%E5%BF%85%E8%A6%81%E3%81%AA%E3%81%AE%E3%81%8B\",\"name\":\"なぜノードが必要なのか\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E7%89%B9%E5%BE%B4\",\"name\":\"特徴\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"global\",\"name\":\"global\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E5%8C%96-commonjs\",\"name\":\"モジュール化 commonJs\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E6%A4%9C%E7%B4%A2\",\"name\":\"モジュール検索\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"module\",\"name\":\"module\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"require\",\"name\":\"require\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"nodejs-%E3%81%A7-es-module-%E4%BD%BF%E3%81%88%E3%82%8B%E3%81%8B\",\"name\":\"NodeJS で ES Module 使えるか\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"%E5%86%85%E9%83%A8%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB\",\"name\":\"内部モジュール\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"os\",\"name\":\"os\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"path\",\"name\":\"path\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"url\",\"name\":\"url\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"util\",\"name\":\"util\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"fs\",\"name\":\"fs\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"stream\",\"name\":\"stream\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"net-net\",\"name\":\"net net\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"events\",\"name\":\"events\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB\",\"name\":\"ライフサイクル\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"node-orm\",\"name\":\"node ORM\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"sequelize\",\"name\":\"Sequelize\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"logjs\",\"name\":\"logjs\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"express-(%E9%9D%9E%E5%90%8C%E6%9C%9F%E3%82%A8%E3%83%A9%E3%83%BC%E3%82%92%E7%9B%B4%E6%8E%A5%E5%87%A6%E7%90%86%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%9B%E3%82%93)\",\"name\":\"Express (非同期エラーを直接処理できません)\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"rest-style\",\"name\":\"rest style\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"route\",\"name\":\"Route\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"middleware\",\"name\":\"middleWare\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"cookie%2Csession%2Cjwt\",\"name\":\"cookie,session,jwt\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"session\",\"name\":\"session\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"jwt\",\"name\":\"jwt\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"cors\",\"name\":\"CORS\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89-%E4%B8%89%E5%B1%A4%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3\",\"name\":\"バックエンド 三層アーキテクチャ\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"service\",\"name\":\"Service\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"dao\",\"name\":\"DAO\",\"tag\":\"h2\",\"children\":[]}]}]','\"<h1 id=\\\"node\\\" tabindex=\\\"-1\\\">node</h1>\\n<h2 id=\\\"%E6%A6%82%E8%A6%81\\\" tabindex=\\\"-1\\\">概要</h2>\\n<h3 id=\\\"what\'s-node\\\" tabindex=\\\"-1\\\">what\'s node</h3>\\n<p>js 実行環境\\n通常:\\nブラウザ側 =&gt; <code>JavaScript</code>\\nノード =&gt; <code>nodeJs</code></p>\\n<h3 id=\\\"%E3%81%AA%E3%81%9C%E3%83%8E%E3%83%BC%E3%83%89%E3%81%8C%E5%BF%85%E8%A6%81%E3%81%AA%E3%81%AE%E3%81%8B\\\" tabindex=\\\"-1\\\">なぜノードが必要なのか</h3>\\n<p>ブラウザでは js インタプリタ+webapi(Dom Bom ajax)のみ提供\\n制限された機能</p>\\n<ol>\\n<li>ファイルの読み取りと書き込みの制限</li>\\n<li>クロスドメインの問題\\nnode js + NodeApi でコンピュータ(システム)を完全制御可能\\nアプリケーションやサーバーアプリケーションを開発できる</li>\\n</ol>\\n<h3 id=\\\"%E7%89%B9%E5%BE%B4\\\" tabindex=\\\"-1\\\">特徴</h3>\\n<p>シングルスレッド IO\\n計算にては従来のバックエンドほど良くありません</p>\\n<h2 id=\\\"global\\\" tabindex=\\\"-1\\\">global</h2>\\n<p><code>Window</code>と一緒</p>\\n<pre><code class=\\\"language-ts\\\">       const global = {\\n    \\t  setTimeout():Object{\\n\\n    \\t  },\\n    \\t  setImmediate(){\\n\\n    \\t  },\\n    \\t  setInterval(){\\n\\n    \\t  },\\n    \\t  console,\\n\\n    \\t  process:{\\n    \\t\\t  //命令行目录\\n    \\t\\t   cwd(){},\\n    \\t\\t   //强制退出node进程\\n    \\t\\t   exit(){},\\n    \\t\\t   //命令行中参数\\n    \\t\\t   argv,\\n    \\t\\t   //操作系统\\n    \\t\\t   platform,\\n    \\t\\t   //杀进程\\n    \\t\\t   kill(pid){},\\n    \\t\\t   //环境变量\\n    \\t\\t   env\\n    \\t  },\\n\\n\\n   /**\\n\\t* コンピュータのメモリアドレスの最新単位はバイトで、1バイト＝8ビット（1ビットは2進数）となります。 *4bit は 2^4=16 *0-15 の範囲の数値を表現できます。つまり、16 進数を使用するだけです\\n    * はバイトバイトを表します。このバッファでは 16 進数が使用されます\\n    */\\n    \\t  Buffer,\\n\\n\\n       }\\n\\t   //`Window`と一緒\\n       global.global = global\\n\\n       //グローバルだがglobalにはない\\n       __dirname,\\n       __filename,\\n\\n</code></pre>\\n<h2 id=\\\"%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E5%8C%96-commonjs\\\" tabindex=\\\"-1\\\">モジュール化 commonJs</h2>\\n<h3 id=\\\"%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E6%A4%9C%E7%B4%A2\\\" tabindex=\\\"-1\\\">モジュール検索</h3>\\n<pre><code class=\\\"language-ts\\\">\\t   // 1.絶対パス\\n\\t   require(\'D:\\\\\\\\XXXX\')\\n\\t   //2. 相対パス\\n\\t\\t//1)\\n\\t\\trequire(\'./src\')\\n\\t\\t//2)\\n\\t\\trequire(\'axios\')\\n\\t    //  見つかったら絶対パスに変換してインポートします。\\n\\n\\t//    サフィックス\\n\\t//   オートコンプリート\\n\\tjs json node mjs\\n\\n\\t// ファイル名の検索順序\\n\\t     require(\'./src\')\\n\\t\\t //  1.ファイルとして\\n\\t\\t src.js/json/node/mjs\\n\\t\\t// 2.packageとして\\n\\t\\t ./src/main/index.js\\n\\n</code></pre>\\n<h3 id=\\\"module\\\" tabindex=\\\"-1\\\">module</h3>\\n<p>現在のモジュールに関する記録された情報</p>\\n<pre><code class=\\\"language-js\\\">\\t{\\n\\t\\t//绝对路径当id\\n\\t\\tid: \'E:\\\\\\\\Tlight\\\\\\\\node\\\\\\\\dist\\\\\\\\module.js\',\\n\\t\\tpath: \'E:\\\\\\\\Tlight\\\\\\\\node\\\\\\\\dist\',\\n\\t\\texports: {},\\n\\t\\tfilename: \'E:\\\\\\\\Tlight\\\\\\\\node\\\\\\\\dist\\\\\\\\module.js\',\\n\\t\\tloaded: false,\\n\\t\\tchildren: [],\\n\\t\\tpaths: [    //这就是一层一层往上找包的原因\\n\\t\\t\\t\'E:\\\\\\\\Tlight\\\\\\\\node\\\\\\\\dist\\\\\\\\node_modules\',\\n\\t\\t\\t\'E:\\\\\\\\Tlight\\\\\\\\node\\\\\\\\node_modules\',\\n\\t\\t\\t\'E:\\\\\\\\Tlight\\\\\\\\node_modules\',\\n\\t\\t\\t\'E:\\\\\\\\node_modules\'\\n\\t\\t]\\n\\t}\\n</code></pre>\\n<h3 id=\\\"require\\\" tabindex=\\\"-1\\\">require</h3>\\n<pre><code class=\\\"language-js\\\">{\\n\\t//返回绝对路径\\n  resolve: [Function: resolve] { paths: [Function: paths] }, //静态方法\\n  //入口模块\\n  main: {\\n    id: \'.\',\\n    path: \'E:\\\\\\\\Tlight\\\\\\\\node\\\\\\\\dist\',\\n    exports: {},\\n    filename: \'E:\\\\\\\\Tlight\\\\\\\\node\\\\\\\\dist\\\\\\\\index.js\',\\n    loaded: false,\\n    children: [],\\n    paths: [\\n      \'E:\\\\\\\\Tlight\\\\\\\\node\\\\\\\\dist\\\\\\\\node_modules\',\\n      \'E:\\\\\\\\Tlight\\\\\\\\node\\\\\\\\node_modules\',\\n      \'E:\\\\\\\\Tlight\\\\\\\\node_modules\',\\n      \'E:\\\\\\\\node_modules\'\\n    ]\\n  },\\n  extensions: [Object: null prototype] { //自动解析的文件类型\\n    \'.js\': [Function (anonymous)],\\n    \'.json\': [Function (anonymous)],\\n    \'.node\': [Function (anonymous)]\\n  },\\n  //缓存的模块对象\\n  cache: [Object: null prototype] {\\n    \'E:\\\\\\\\Tlight\\\\\\\\node\\\\\\\\dist\\\\\\\\index.js\': {\\n      id: \'.\',\\n      path: \'E:\\\\\\\\Tlight\\\\\\\\node\\\\\\\\dist\',\\n      exports: {},\\n      filename: \'E:\\\\\\\\Tlight\\\\\\\\node\\\\\\\\dist\\\\\\\\index.js\',\\n      loaded: false,\\n      children: [],\\n      paths: [Array]\\n    }\\n  }\\n}\\n</code></pre>\\n<p>例えば、一つの Module があって、理解できますか。</p>\\n<pre><code class=\\\"language-js\\\">console.log(__dirname, __filename)\\nmodule.exports = {\\n  a: 1,\\n}\\nexports.b = 2\\nthis.c = 3\\n</code></pre>\\n<p><strong>require 原理</strong></p>\\n<pre><code class=\\\"language-js\\\">   function require(modulePath){\\n\\t  //step1 絶対パスに変換する\\n\\t  const absolutePath = xxx(modulePath)\\n\\t  //step2 キャッシュされているかどうかを確認する\\n\\t  if(require.cache[absolutePath]){\\n\\t\\t //されたら、キャッシュされた結果を直接返します。\\n\\t\\t return require.cache[absolutePath].result\\n\\t  }\\n\\t  //step3 ファイルの内容を読み取る\\n      const fileContent = xxx()\\n\\t  //step4 関数にラップされる\\n\\t  function _temp(module,exports, require,__dirname,__filename){\\n\\t\\t...fileContent\\n\\t\\t// console.log(__dirname, __filename);\\n\\t\\t// module.exports = {\\n\\t\\t// a: 1,\\n\\t\\t// };\\n\\t\\t// exports.b = 2;\\n\\t\\t// this.c = 3;\\n\\t  }\\n\\n\\t  //5.モジュールオブジェクトの作成\\n\\t  module.exports = {}\\n\\t  const exports = module.exports\\n\\n\\t  _temp.call(module.exports,module,exports,require,module.path,module.filename)\\n\\n\\t  require.cache[module.id] = module.exports\\n      return module.exports\\n   }\\n\\n</code></pre>\\n<p><code>exports === this</code></p>\\n<h3 id=\\\"nodejs-%E3%81%A7-es-module-%E4%BD%BF%E3%81%88%E3%82%8B%E3%81%8B\\\" tabindex=\\\"-1\\\">NodeJS で ES Module 使えるか</h3>\\n<pre><code class=\\\"language-mjs\\\">// 子模块\\nexport const a = 1\\nexport default 1\\n</code></pre>\\n<pre><code class=\\\"language-mjs\\\">// 父模块\\nimport * as obj from &quot;./es.mjs&quot;\\nconsole.log(obj)\\n</code></pre>\\n<p>使えますが、相互運用性の問題があります。自分使う時は統一されたべき。もちろん webpack とか を使えば解決できます。\\n私の現在の ts は Object.defineProperty(exports, &quot;＿esModule&quot;, { value: true }); をコンパイルしました。</p>\\n<p>es モジュールの静的読み込みを、require と同様の関数環境に変換します。</p>\\n<h2 id=\\\"%E5%86%85%E9%83%A8%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB\\\" tabindex=\\\"-1\\\">内部モジュール</h2>\\n<blockquote>\\n<p><a href=\\\"https://nodejs.org/docs/\\\">詳細ドキュメント</a></p>\\n</blockquote>\\n<h3 id=\\\"os\\\" tabindex=\\\"-1\\\">os</h3>\\n<pre><code class=\\\"language-ts\\\">//システム改行文字\\nconsole.log(os.EOL)\\n//アーキテクチャ x64\\nconsole.log(os.arch())\\n//cpus\\nconsole.log(os.cpus())\\n//freeメモリ\\nconsole.log(os.freemem())\\n// ユーザーディレクトリ\\nconsole.log(os.homedir())\\n//ホスト名\\nconsole.log(os.hostname())\\n//ディレクトリ\\nconsole.log(os.tmpdir())\\n</code></pre>\\n<h3 id=\\\"path\\\" tabindex=\\\"-1\\\">path</h3>\\n<p>filename d:\\\\xxx.txt 絶対パス\\nbasename xxx.txt</p>\\n<pre><code class=\\\"language-ts\\\">const basename = path.basename(&quot;xxx/xxxx/a.txt&quot;, &quot;html&quot;)\\nconsole.log(basename)\\nconst dir = path.dirname(&quot;xxx/xxxx/a.txt&quot;)\\nconsole.log(dir)\\n\\nconst ext = path.extname(&quot;xxx/xxx/a.txt&quot;)\\nconsole.log(ext)\\n\\nconst fullpath = path.join(&quot;d:/t&quot;, &quot;a&quot;, &quot;index&quot;, &quot;./test&quot;)\\nconsole.log(fullpath)\\n\\n//分隔符\\\\\\nconst separate = path.sep\\nconsole.log(separate)\\n\\n//;\\nconst d = path.delimiter\\nconsole.log(process.env.PATH?.split(d))\\n\\nconst validpath = path.normalize(&quot;D:/a/b/index.ts&quot;)\\nconsole.log(validpath)\\n\\nconst relativePath = path.relative(&quot;a/b/c&quot;, &quot;a/index&quot;)\\nconsole.log(relativePath)\\n\\n//是相当于命令行\\nconst absolutePath = path.resolve(&quot;./a.js&quot;)\\nconst absolutePathBymodule = path.resolve(__dirname, &quot;./a.js&quot;)\\nconsole.log(absolutePath, absolutePathBymodule, __dirname)\\n</code></pre>\\n<h3 id=\\\"url\\\" tabindex=\\\"-1\\\">url</h3>\\n<pre><code class=\\\"language-ts\\\">const u = new url.URL(&quot;http://qcscimdb.benq.corp.com:81/MAI1InspectionResolve/#/home?user=Tlight.HY.Xia&quot;)\\nconsole.log(u, u.searchParams.has(&quot;user&quot;))\\n\\nfor (let key of u.searchParams) {\\n  console.log(key)\\n}\\nconst config = {\\n  href: &quot;http://qcscimdb.benq.corp.com:81/MAI1InspectionResolve&quot;,\\n  origin: &quot;http://qcscimdb.benq.corp.com:81&quot;,\\n  protocol: &quot;http:&quot;,\\n  username: &quot;&quot;,\\n  password: &quot;&quot;,\\n  host: &quot;qcscimdb.benq.corp.com:81&quot;,\\n  hostname: &quot;qcscimdb.benq.corp.com&quot;,\\n  port: &quot;81&quot;,\\n  pathname: &quot;/MAI1InspectionResolve/&quot;,\\n  search: &quot;&quot;,\\n  hash: &quot;#/home?user=Tlight&quot;,\\n}\\n\\nconsole.log(url.format(config))\\n</code></pre>\\n<h3 id=\\\"util\\\" tabindex=\\\"-1\\\">util</h3>\\n<pre><code class=\\\"language-ts\\\">util.isDeepStrictEqual({ 1: 1 }, { 1: 2 })\\nutil.promisify(delay2)\\nutil.callbackify(delay)\\n</code></pre>\\n<h3 id=\\\"fs\\\" tabindex=\\\"-1\\\">fs</h3>\\n<p>ファイル io にて, CPU はメモリのみを処理し、動作するにはファイルをメモリに読み込む必要がありますが、io 操作は CPU ,メモリよりもはるかに遅くなります。</p>\\n<pre><code class=\\\"language-ts\\\">Stats {\\n  dev: 24198785,\\n  mode: 33206,\\n  nlink: 1,\\n  uid: 0,\\n  gid: 0,\\n  rdev: 0,\\n  blksize: 4096,\\n  ino: 281474979039900,\\n  size: 0,\\n  blocks: 0,\\n  atimeMs: 1718958726062.4705,\\n  mtimeMs: 1718958640012.3835,\\n  ctimeMs: 1718958640012.3835,\\n  birthtimeMs: 1718957669240.9294,\\n  //访问\\n  atime: 2024-06-21T08:32:06.062Z,\\n  //修改\\n  mtime: 2024-06-21T08:30:40.012Z,\\n  //访问状态修改\\n  ctime: 2024-06-21T08:30:40.012Z,\\n  birthtime: 2024-06-21T08:14:29.241Z\\n}\\n\\n\\nconst getAbsolutePath = (relativePath: string) =&gt; {\\n  const res = path.resolve(__dirname, relativePath);\\n  //   console.log(res, __dirname);\\n\\n  return res;\\n};\\nfs.readFile(getAbsolutePath(&quot;./fs.txt&quot;), (err, res) =&gt; {\\n  //   console.log(res);\\n\\n  fs.writeFile(\\n    getAbsolutePath(&quot;./fs.txt&quot;),\\n    os.EOL + &quot;abc&quot;,\\n    {\\n      flag: &quot;a&quot;, //追加内容\\n    },\\n    () =&gt; {}\\n  );\\n  fs.writeFile(\\n    getAbsolutePath(&quot;./fs2.txt&quot;),\\n    Buffer.from(&quot;text from buffer&quot;),\\n    () =&gt; {}\\n  );\\n  //    fs.promises.stat(getAbsolutePath(&quot;./fs2.txt&quot;));\\n  fs.promises.stat(getAbsolutePath(&quot;./&quot;)).then((v) =&gt; {\\n    console.log(v.isDirectory);\\n  });\\n  fs.promises.readdir(getAbsolutePath(&quot;./&quot;)).then((v) =&gt; {\\n    console.log(v);\\n  });\\n\\n  fs.promises\\n    .access(getAbsolutePath(&quot;test&quot;), constants.F_OK)\\n    .catch((v) =&gt; {\\n      console.log(v);\\n      return fs.promises.mkdir(getAbsolutePath(&quot;test&quot;));\\n    })\\n    .then((v) =&gt; {\\n      fs.promises.readFile(getAbsolutePath(&quot;./fs.txt&quot;)).then((res) =&gt; {\\n        fs.promises.writeFile(getAbsolutePath(&quot;test/test.txt&quot;), res);\\n      });\\n    });\\n});\\n</code></pre>\\n<h3 id=\\\"stream\\\" tabindex=\\\"-1\\\">stream</h3>\\n<p>先ほどの方法を使用すると、大量のメモリが消費されます。stream を推奨する。</p>\\n<ol>\\n<li>readable</li>\\n<li>writable</li>\\n<li>duplex\\n解决背压：rs.pipe(ws)</li>\\n</ol>\\n<h3 id=\\\"net-net\\\" tabindex=\\\"-1\\\">net net</h3>\\n<p>接続が確立された後、ソケットは duplex になります。</p>\\n<p>TCP/IP プロトコルを使用した http リクエストの実現</p>\\n<pre><code class=\\\"language-ts\\\">import { parseHtml } from &quot;.&quot;\\nimport net from &quot;net&quot;\\n\\nconst server = net.createServer()\\nserver.listen(&quot;8585&quot;)\\n\\nserver.on(&quot;connection&quot;, (socket) =&gt; {\\n  socket.on(&quot;data&quot;, (chunk) =&gt; {\\n    console.log(parseHtml(chunk.toString(&quot;utf-8&quot;)))\\n  })\\n  const res = `\\nHTTP/1.1 200 Ok\\nContent-Type: image/jpeg\\n\\n\\n `\\n  socket.write(res.trimStart())\\n  socket.end()\\n  //   server.close()\\n})\\n</code></pre>\\n<h3 id=\\\"events\\\" tabindex=\\\"-1\\\">events</h3>\\n<p>自分も書いてみた</p>\\n<pre><code class=\\\"language-ts\\\">import events, { EventEmitter } from &quot;events&quot;\\n\\nconst em = new EventEmitter()\\n\\nem.on(&quot;test&quot;, () =&gt; {\\n  console.log(&quot;test1&quot;)\\n})\\n\\nem.on(&quot;test&quot;, () =&gt; {\\n  console.log(&quot;test2&quot;)\\n})\\nem.once(&quot;test&quot;, () =&gt; {\\n  console.log(&quot;test3&quot;)\\n})\\nconsole.log(em.listeners(&quot;test&quot;))\\n\\nem.emit(&quot;test&quot;)\\nconsole.log(em.listeners(&quot;test&quot;))\\n</code></pre>\\n<h2 id=\\\"%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB\\\" tabindex=\\\"-1\\\">ライフサイクル</h2>\\n<p>event loop ----timers timers 队列(要运算) 存放计时器回调 注：队列内容来着于计时器线程，需要计算;setTimeout 底层最小值为 1\\n|\\nnexttrick |\\npromise |\\n(每次循环先要 |\\n清空的微队列; |\\nnexttrick |\\n优先级最高) pull 轮询队列 除了 timers，checks 。包括文件读取，用户请求;如果所有队列都空了,且有要等待的会卡在这;其他队列有东西了,就会从这里开始走一个新的循环\\n|\\n|\\n|\\n-----checks checks 队列 setImmediate 回调队列</p>\\n<h2 id=\\\"node-orm\\\" tabindex=\\\"-1\\\">node ORM</h2>\\n<p>object relation mapping</p>\\n<h3 id=\\\"sequelize\\\" tabindex=\\\"-1\\\">Sequelize</h3>\\n<p>自分でいくつかの一般的な方法を試し、記憶を促進するためのクラスを作成しました。</p>\\n<pre><code class=\\\"language-ts\\\">interface ISequelizeHelperInit {\\n  user: string\\n  password: string\\n  database: string\\n  host: string\\n  dialect: Dialect\\n}\\nclass SequelizeHelper {\\n  private _sequelize: Sequelize\\n  private _connectedModels: Set&lt;typeof Model&gt; = new Set()\\n  private constructor({ user, password, database, host, dialect }: ISequelizeHelperInit) {\\n    this._sequelize = new Sequelize(database, user, password, {\\n      host,\\n      dialect,\\n      logging: (err) =&gt; logHelper.sqlLogger.debug(err),\\n    })\\n  }\\n  get instance() {\\n    return this._sequelize\\n  }\\n  /**\\n   * 默认alter: true,会改表\\n   * @param association\\n   * @param arg\\n   * @returns\\n   */\\n  async initModels(\\n    association?: (() =&gt; any) | null,\\n    ...arg: Array&lt;{\\n      model: ModelStatic&lt;Model&lt;any, any&gt;&gt;\\n      attributes: ModelAttributes&lt;\\n        Model,\\n        // \'foreign keys\' are optional in Model.init as they are added by association declaration methods\\n        Optional&lt;Attributes&lt;Model&gt;, BrandedKeysOf&lt;Attributes&lt;Model&gt;, symbol&gt;&gt;\\n      &gt;\\n      options: Partial&lt;InitOptions&lt;Model&lt;any, any&gt; | any&gt;&gt;\\n    }&gt;\\n  ) {\\n    // return await Promise.all(\\n\\n    arg.map(async (m) =&gt; {\\n      //@ts-ignore\\n      m.model.init(m.attributes, {\\n        sequelize: this._sequelize,\\n        ...m.options,\\n      })\\n\\n      //   return m.model.sync({\\n      //     alter: true\\n      //   })\\n    })\\n    association &amp;&amp; association()\\n\\n    // )\\n    const res = await this._sequelize.sync({ alter: true }).catch(() =&gt; false)\\n    // association()\\n    if (!!res) {\\n      arg.forEach((m) =&gt; {\\n        this._connectedModels.add(m.model)\\n      })\\n    }\\n    return !!res\\n  }\\n  async testConnection() {\\n    try {\\n      await this._sequelize.authenticate()\\n      return true\\n    } catch (error) {\\n      console.error(&quot;Unable to connect to the database:&quot;, error)\\n      return false\\n    }\\n  }\\n  bulkCreate&lt;T extends typeof Model&lt;any, any&gt;&gt;(model: T, instances: Partial&lt;InstanceType&lt;T&gt;&gt;[]) {\\n    console.log(instances)\\n\\n    //@ts-ignore\\n    this.hasModel(model) &amp;&amp; model.bulkCreate(instances)\\n  }\\n  hasModel(v: typeof Model) {\\n    if (!this._connectedModels.has(v)) {\\n      console.error(&quot;please init first&quot;)\\n      throw &quot;&quot;\\n    }\\n    return true\\n  }\\n\\n  /**\\n   *\\n   * @param model\\n   * @param instance\\n   * @returns\\n   * 只做记录Sequelize的数据库操作\\n   * 不强制使用 Service层一个ts文件只操作一个类,不混杂\\n   */\\n  insert2Model&lt;T extends typeof Model&lt;any, any&gt;&gt;(model: T, instance: Partial&lt;InstanceType&lt;T&gt;&gt;) {\\n    //@ts-ignore\\n    return this.hasModel(model) &amp;&amp; model.create(instance).then((res) =&gt; res.toJSON())\\n  }\\n  updateModel&lt;T extends typeof Model&lt;any, any&gt;&gt;(model: T, modelInstance: { [key in keyof Attributes&lt;InstanceType&lt;T&gt;&gt;]?: Attributes&lt;InstanceType&lt;T&gt;&gt;[key] }, conditions: Partial&lt;InstanceType&lt;T&gt;&gt;) {\\n    //@ts-ignore\\n\\n    return this.hasModel(model) &amp;&amp; model.update(modelInstance, { where: { ...conditions } })\\n  }\\n  deleteFromModel&lt;T extends typeof Model&lt;any, any&gt;&gt;(model: T, modelInstance: InstanceType&lt;T&gt;) {\\n    return (\\n      this.hasModel(model) &amp;&amp;\\n      //@ts-ignore\\n      model.destroy({\\n        where: {\\n          ...modelInstance,\\n        },\\n      })\\n    )\\n  }\\n\\n  select&lt;T extends typeof Model&lt;any, any&gt;&gt;(model: T, modelInstance: InstanceType&lt;T&gt;) {\\n    return (\\n      this.hasModel(model) &amp;&amp;\\n      //@ts-ignore\\n\\n      model.findAll({\\n        where: {\\n          ...modelInstance,\\n        },\\n      })\\n    )\\n  }\\n  selectSetWhere&lt;T extends typeof Model&lt;any, any&gt;&gt;(model: T, func: () =&gt; WhereOptions&lt;InferAttributes&lt;InstanceType&lt;T&gt;&gt;&gt;) {\\n    return (\\n      this.hasModel(model) &amp;&amp;\\n      //@ts-ignore\\n\\n      model\\n        .findAll({\\n          where: func(),\\n        })\\n        .then((res) =&gt; res.map((m) =&gt; m.toJSON()))\\n    )\\n  }\\n  selectPageData&lt;T extends typeof Model&lt;any, any&gt;&gt;(model: T, modelInstance: InstanceType&lt;T&gt;, page = 1, limit = 10) {\\n    return (\\n      this.hasModel(model) &amp;&amp;\\n      //@ts-ignore\\n      model\\n        .findAndCountAll({\\n          where: {\\n            ...modelInstance,\\n          },\\n          offset: (page - 1) * +limit,\\n          limit: +limit,\\n        })\\n        .then(({ rows, count }) =&gt; {\\n          return {\\n            count,\\n            rows: rows.map((m) =&gt; m.toJSON()),\\n          }\\n        })\\n    )\\n  }\\n  selectAssolationData&lt;T extends typeof Model&lt;any, any&gt;&gt;(\\n    model: T,\\n    {\\n      func = function () {\\n        return {}\\n      },\\n      includes = null,\\n    }: {\\n      func: () =&gt; WhereOptions&lt;InferAttributes&lt;InstanceType&lt;T&gt;&gt;&gt;\\n      includes: Model&lt;any, any&gt;[]\\n    }\\n  ) {\\n    return (\\n      this.hasModel(model) &amp;&amp;\\n      //@ts-ignore\\n\\n      model\\n        .findAll({\\n          where: func(),\\n          ...(includes\\n            ? {\\n                include: includes,\\n              }\\n            : {}),\\n        })\\n        .then((res) =&gt; res.map((m) =&gt; m.toJSON()))\\n    )\\n  }\\n\\n  static _instance: SequelizeHelper\\n  static getInstance(data: ISequelizeHelperInit): SequelizeHelper {\\n    if (this._instance) {\\n      return this._instance\\n    }\\n    this._instance = new SequelizeHelper(data)\\n    return this.getInstance(data)\\n  }\\n}\\n\\n/**\\n * 设置模型统一配置，在SequelizeHelper里面统一注册\\n * @param param0\\n * @returns\\n */\\nfunction setModel&lt;T extends Model, M extends InstanceType&lt;ModelStatic&lt;T&gt;&gt;&gt;({\\n  model,\\n  attributes,\\n  options = {},\\n}: {\\n  model: ModelStatic&lt;T&gt;\\n  attributes: ModelAttributes&lt;M, Optional&lt;Attributes&lt;M&gt;, BrandedKeysOf&lt;Attributes&lt;M&gt;, never&gt;&gt;&gt;\\n  options?: Partial&lt;InitOptions&lt;T&gt;&gt;\\n}) {\\n  return {\\n    model,\\n    attributes,\\n    options,\\n  }\\n}\\n</code></pre>\\n<p><strong>使用</strong>\\n初期化</p>\\n<pre><code class=\\\"language-ts\\\">const sequelizeHelperInstance = SequelizeHelper.getInstance({\\n  ...(require(&quot;./config.json&quot;) as Record&lt;&quot;user&quot; | &quot;password&quot;, string&gt;),\\n  database: process.env.DB_NAME,\\n  dialect: process.env.DB_Type,\\n  host: process.env.DB_HOST,\\n})\\n\\nsequelizeHelperInstance.testConnection().then(() =&gt; {\\n  console.log(&quot;db connect success&quot;)\\n})\\n</code></pre>\\n<p>モデルの定義</p>\\n<pre><code class=\\\"language-ts\\\">export class Blog extends Model&lt;InferAttributes&lt;Blog, { omit: &quot;id&quot; | &quot;blogType&quot; }&gt;, InferCreationAttributes&lt;Blog, { omit: &quot;id&quot; | &quot;blogType&quot; }&gt;&gt; implements IBlog {\\n  declare id: string\\n  declare title: string\\n  declare description: string\\n  declare toc: string\\n  declare htmlContent: string\\n  declare thumb: string\\n  declare scanNumber: string\\n  declare commentNumber: string\\n  declare createDate: string\\n  declare isValid: &quot;Y&quot; | &quot;N&quot;\\n  declare blogType: string\\n}\\n\\nexport const blogSetting = setModel({\\n  model: Blog,\\n  attributes: {\\n    title: {\\n      type: DataTypes.STRING,\\n      allowNull: false,\\n    },\\n    description: {\\n      allowNull: true,\\n      type: DataTypes.STRING,\\n      defaultValue: 0,\\n    },\\n    toc: {\\n      type: DataTypes.TEXT,\\n      allowNull: false,\\n    },\\n    htmlContent: {\\n      type: DataTypes.TEXT,\\n      allowNull: false,\\n    },\\n    isValid: {\\n      type: DataTypes.STRING(1),\\n      allowNull: false,\\n      defaultValue: &quot;Y&quot;,\\n    },\\n    thumb: {\\n      type: DataTypes.STRING,\\n      allowNull: false,\\n    },\\n    scanNumber: {\\n      type: DataTypes.STRING,\\n      allowNull: false,\\n    },\\n    commentNumber: {\\n      type: DataTypes.STRING,\\n      allowNull: false,\\n    },\\n    createDate: {\\n      type: DataTypes.STRING,\\n      allowNull: false,\\n    },\\n  },\\n  options: {\\n    tableName: &quot;blog&quot;,\\n  },\\n})\\n</code></pre>\\n<p>一致化</p>\\n<pre><code class=\\\"language-ts\\\">sequelizeHelperInstance.initModels(association, AdminSetting, homeSetting, blogTypeSetting, blogSetting, messageSetting)\\n</code></pre>\\n<h4>MD5</h4>\\n<p>暗号化のみ可能ですが、復号化はできません。暗号化結果は固定されており、パスワードの暗号化に使用されます。</p>\\n<h2 id=\\\"logjs\\\" tabindex=\\\"-1\\\">logjs</h2>\\n<pre><code class=\\\"language-ts\\\">import log, { getLogger } from &quot;log4js&quot;\\nlog.configure({\\n  appenders: {\\n    sql: {\\n      type: &quot;dateFile&quot;,\\n      filename: path.resolve(__dirname, &quot;../../../logs&quot;, &quot;sql&quot;, &quot;logs.log&quot;),\\n      layout: {\\n        type: &quot;pattern&quot;,\\n        pattern: &quot;%c [%d{yyyy-MM-dd hh:mm:ss}] [%p] %m %n&quot;,\\n      },\\n      keepFileExt: true,\\n    },\\n    default: {\\n      type: &quot;stdout&quot;,\\n      //   filename: path.resolve(__dirname, &quot;logs&quot;, &quot;default&quot;, &quot;logs.log&quot;),\\n      //   keepFileExt: true\\n    },\\n  },\\n  categories: {\\n    sql: {\\n      appenders: [&quot;sql&quot;],\\n      level: &quot;all&quot;,\\n    },\\n    default: {\\n      appenders: [&quot;default&quot;],\\n      level: &quot;all&quot;,\\n    },\\n  },\\n})\\n\\nprocess.on(&quot;exit&quot;, () =&gt; {\\n  log.shutdown()\\n})\\n\\nexport default {\\n  sqlLogger: getLogger(&quot;sql&quot;),\\n  logger: getLogger(&quot;default&quot;),\\n}\\n</code></pre>\\n<h2 id=\\\"express-(%E9%9D%9E%E5%90%8C%E6%9C%9F%E3%82%A8%E3%83%A9%E3%83%BC%E3%82%92%E7%9B%B4%E6%8E%A5%E5%87%A6%E7%90%86%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%9B%E3%82%93)\\\" tabindex=\\\"-1\\\">Express (非同期エラーを直接処理できません)</h2>\\n<p>http モジュールを直接使用することに問題はありません。URL パスを介してさまざまなメソッドを呼び出すには、多くの判断が必要です。データはストリーム メソッドを介して送信されるため、parseHtml を手動で受け入れる必要があります。</p>\\n<h3 id=\\\"rest-style\\\" tabindex=\\\"-1\\\">rest style</h3>\\n<pre><code class=\\\"language-ts\\\">/api/user get 取得\\n/api/ユーザー post 保存\\n/api/user put 変更を加えます\\n/api/user delete 削除\\n</code></pre>\\n<h3 id=\\\"route\\\" tabindex=\\\"-1\\\">Route</h3>\\n<p>またモジュール化可能\\n<strong>自分で書いてみたルーティング設定</strong></p>\\n<pre><code class=\\\"language-ts\\\">type Method = &quot;all&quot; | &quot;get&quot; | &quot;post&quot; | &quot;put&quot; | &quot;delete&quot; | &quot;patch&quot; | &quot;options&quot; | &quot;head&quot;\\n\\n/**\\n * base route config\\n */\\ninterface IRouterItem {\\n  method: Method\\n  url: string\\n  handler: (request: Request, response: Response) =&gt; Promise&lt;any&gt;\\n  needAuth?: boolean\\n  canCORS?: boolean\\n}\\n</code></pre>\\n<p>Router 管理統一</p>\\n<pre><code class=\\\"language-ts\\\">export class RouterHelper {\\n  /**\\n   * all routes\\n   */\\n  private _routerCache: Record&lt;string, IRouterItem[]&gt; = {}\\n  private constructor(private _app: Express) {}\\n  registerRouter(baseUrl: string, router: Router, routerItems: IRouterItem[]) {\\n    if (this._routerCache[baseUrl]) {\\n      throw new Error(&quot;this baseUrl has been used&quot;)\\n    }\\n    this.addRouters(router, routerItems)\\n    this._app.use(baseUrl, router)\\n    this._routerCache[baseUrl] = routerItems\\n  }\\n  private addRouters(router: Router, routerItems: IRouterItem[]) {\\n    routerItems.forEach((item) =&gt; {\\n      router[item.method](item.url, response2Client(item.handler))\\n    })\\n  }\\n  /**\\n   *\\n   * @param param0\\n   * @returns\\n   * get current route config\\n   * 查询对应路由配置\\n   */\\n  getRouterItem&lt;T extends { baseUrl: string; url: string; method: Method }&gt;({ baseUrl, url, method }: T) {\\n    // console.log(this._routerCache)\\n\\n    for (let baseurl in this._routerCache) {\\n      for (let item of this._routerCache[baseurl]) {\\n        if (method.toUpperCase() === item.method.toUpperCase() &amp;&amp; pathToRegexp(handlePathEnd(baseurl + item.url)).test((baseUrl + url).split(&quot;?&quot;)[0])) return item\\n      }\\n    }\\n  }\\n\\n  private static _instance: RouterHelper\\n  static Instance(app: Express): RouterHelper {\\n    if (this._instance) {\\n      return this._instance\\n    } else {\\n      this._instance = new RouterHelper(app)\\n      return this.Instance(app)\\n    }\\n  }\\n}\\n\\n/**\\n * 处理路径类似 /login/ 与 /login 冲突问题\\n * @param path\\n * @returns\\n */\\nfunction handlePathEnd(path: string) {\\n  if (path.slice(-1) === &quot;/&quot;) {\\n    return handlePathEnd(path.slice(0, path.length - 1))\\n  }\\n  return path\\n}\\n/**\\n * response method,it can response data that func return\\n * 套了一层，配置路由时不用关心如何返回数据\\n * @param func\\n * @returns\\n */\\nconst response2Client = (func: IRouterItem[&quot;handler&quot;]): RequestHandler =&gt; {\\n  return async function (request, response, next) {\\n    try {\\n      const res = await func(request, response)\\n      // console.log(res, getResponseData(res), response.headersSent)\\n      response.send(getResponseData(res))\\n    } catch (err) {\\n      //   console.log(err)\\n      next(err)\\n    }\\n  }\\n}\\n</code></pre>\\n<p>定義を容易にするために hook 作成しました。</p>\\n<pre><code class=\\\"language-ts\\\">export function useRoutes({ router = express.Router(), routerItems, baseUrl }: { router?: Router; routerItems: IRouterItem[]; baseUrl: string }) {\\n  function registerRouter(RouterHelperInstance: RouterHelper) {\\n    RouterHelperInstance.registerRouter(baseUrl, router, routerItems)\\n  }\\n\\n  return {\\n    registerRouter,\\n  }\\n}\\n</code></pre>\\n<p><strong>使用</strong></p>\\n<pre><code class=\\\"language-ts\\\">const { registerRouter } = useRoutes({\\n  routerItems: [\\n    {\\n      method: &quot;get&quot;,\\n      url: &quot;/&quot;,\\n      async handler(request) {\\n        return blogServiceInstance.getBlogsPagenation(request.query as any)\\n      },\\n      canCORS: true,\\n      //   needAuth: true\\n    },\\n    //...\\n  ],\\n  baseUrl: &quot;/api/blog&quot;,\\n})\\n\\nexport { registerRouter }\\n</code></pre>\\n<h3 id=\\\"middleware\\\" tabindex=\\\"-1\\\">middleWare</h3>\\n<pre><code class=\\\"language-ts\\\">app.get(\\n  &quot;/abc/:id&quot;,\\n  () =&gt; {\\n    // middleWare1\\n    next()\\n  },\\n  () =&gt; {\\n    // middleWare2\\n  }\\n)\\n</code></pre>\\n<p>どの middleWare でも応答できますが、応答できるのは 1 回だけです\\n後続の middleWare を実行したい場合は、手動で next を呼び出す必要があります。\\n応答はありませんが、最後の middleWare が next を呼び出しましたと,404 になります。\\nnext(new Error())/throw new error を呼び出すと、後続の例外処理 middleWare が検索されます。</p>\\n<pre><code class=\\\"language-ts\\\">//useの使用範囲が広く、一致しているbaseURlを取得できます。\\napp.use(&quot;/abc&quot;, (err, req, res, next) =&gt; {\\n  console.log(err)\\n  if (err) {\\n    res.send({\\n      err: &quot;err&quot;,\\n    })\\n  }\\n})\\n</code></pre>\\n<p>自分で書いた middleWare\\nauthorization</p>\\n<pre><code class=\\\"language-ts\\\">export function authorizationMiddleWare(): RequestHandler {\\n  return function (request, response, next) {\\n    let { baseUrl, url, method } = request\\n    //統一されたRouterからsearch\\n    const routerItem = RouterHelperInstance?.getRouterItem({ baseUrl, url, method: method as any })\\n    if (!routerItem) {\\n      throw new NotFoundError(&quot;path not found:&quot; + baseUrl + url + &quot;,method&quot; + method)\\n    } else {\\n      if (routerItem.needAuth) {\\n        const res = JWTHelperIns.validateJwtToken(request)\\n        if (res &amp;&amp; res.loginId) {\\n          request.user = res\\n          next()\\n        } else {\\n          throw new ForbiddenError(&quot;authorization fail,please login again&quot;)\\n        }\\n      } else {\\n        next()\\n      }\\n    }\\n  }\\n}\\n</code></pre>\\n<p>cors</p>\\n<pre><code class=\\\"language-ts\\\">export default function (): RequestHandler {\\n  return function (request, response, next) {\\n    //クロスドメイン\\n    if (&quot;origin&quot; in request.headers) {\\n      let { method, path, baseUrl } = request\\n      if (method.toUpperCase() === &quot;OPTIONS&quot;) {\\n        method = request.headers[&quot;access-control-request-method&quot;]\\n      }\\n      const currentRouter = RouterHelperInstance.getRouterItem({\\n        baseUrl,\\n        method: method as any,\\n        url: path,\\n      })\\n\\n      //クロスドメインを許可する\\n      if (currentRouter?.canCORS &amp;&amp; whiteList.includes(request.headers.origin)) {\\n        //1.簡単なリクエスト　 access-control-allow-origin許可\\n        if (typeof request.headers.origin !== &quot;undefined&quot;) {\\n          response.header(&quot;access-control-allow-origin&quot;, request.headers.origin)\\n        }\\n        //2. OPTIONS　リクエスト\\n        if (request.method.toUpperCase() === &quot;OPTIONS&quot;) {\\n          response.header(&quot;access-control-allow-headers&quot;, request.headers[&quot;access-control-request-headers&quot;])\\n          response.header(&quot;access-control-allow-methods&quot;, request.headers[&quot;access-control-request-method&quot;])\\n          //未来多少秒内不要发预检了\\n          response.header(&quot;access-control-max-age&quot;, &quot;3600&quot;)\\n        }\\n        //3.credentialsリクエスト\\n        response.header(&quot;access-control-allow-credentials&quot;, &quot;true&quot;)\\n      }\\n      //OPTIONS　リクエスト　return\\n      if (request.method.toUpperCase() === &quot;OPTIONS&quot;) {\\n        return response.status(200).end()\\n      }\\n    }\\n    next()\\n  }\\n}\\n</code></pre>\\n<p>error</p>\\n<pre><code class=\\\"language-ts\\\">export function errorHandler(): ErrorRequestHandler {\\n  return function (err, request, response, next) {\\n    const { message, code } = getResponseErrorData(err)\\n    response.status(code).send({ message, code })\\n  }\\n}\\n\\nenum EServiceErrorCode {\\n  UploadError = &quot;413&quot;,\\n  ForbiddenError = &quot;401&quot;,\\n  ValidateError = &quot;406&quot;,\\n  NotFoundError = &quot;406&quot;,\\n  UnknownError = &quot;500&quot;,\\n}\\n\\n/**\\n * base class\\n */\\nabstract class SeviceError extends Error {\\n  code: EServiceErrorCode\\n  constructor(message: string, code: EServiceErrorCode) {\\n    super(message)\\n    this.code = code\\n  }\\n}\\n\\nclass UploadError extends SeviceError {\\n  constructor(message: string) {\\n    super(message, EServiceErrorCode.UploadError)\\n  }\\n}\\n\\nclass ForbiddenError extends SeviceError {\\n  constructor(message: string) {\\n    super(message, EServiceErrorCode.ForbiddenError)\\n  }\\n}\\n\\nclass ValidateError extends SeviceError {\\n  constructor(message: string) {\\n    super(message, EServiceErrorCode.ValidateError)\\n  }\\n}\\n\\nclass NotFoundError extends SeviceError {\\n  constructor(res = &quot;file/api not found&quot;) {\\n    super(res, EServiceErrorCode.NotFoundError)\\n  }\\n}\\n\\nclass UnknownError extends SeviceError {\\n  constructor(message: string) {\\n    super(message, EServiceErrorCode.UnknownError)\\n  }\\n}\\n</code></pre>\\n<h3 id=\\\"cookie%2Csession%2Cjwt\\\" tabindex=\\\"-1\\\">cookie,session,jwt</h3>\\n<p>どうやってコントロールするのか、あるいは誰なのかをどうやって確認するのか、それは捏造された情報ではありません。 http はステートレスだからです。</p>\\n<p>クライアントが存在します。<code>key=value;path=/;domain=?;expire=?;max-age=?secure;httponly</code></p>\\n<p>ブラウザは Cookie ルールを自動的に保存します。</p>\\n<ol>\\n<li>有効期限が切れていない</li>\\n<li>ドメイン (ベースドメイン) を比較し、ポートとは関係がありません。</li>\\n<li>path を比較</li>\\n<li>secure = true のみ https\\n条件が満たされると、ブラウザはリクエスト ヘッダーに Cookie を自動的に追加します。</li>\\n</ol>\\n<p><strong>key,path,domain</strong> のみがすべて同じであり、これは同じ Cookie です。</p>\\n<pre><code class=\\\"language-ts\\\">interface Cookie{\\n   [key: string]: sting\\n\\n   /**\\n\\t* デフォルトの現在のリクエストパスを設定しないでください\\n    */\\n   path?: string\\n\\n   domain?: string\\n   /**\\n\\t* GMT时间，UTC时间\\n\\t* new Date().toGMTString()\\n\\t* \'Mon, 01 Jul 2024 10:43:49 GMT\'\\n    */\\n   expire?: string\\n   /**\\n\\t* 何秒後に期限切れになるか\\n    */\\n   max-age?: string  //既没有max-age也没有expire的话，就是回话解说词\\n\\n   /**\\n\\t* 設定は https のみに使える\\n    */\\n   secure?:boolean\\n\\n   /**\\n　　　*サーバー側のみ設定可能\\n　　　*送信時のみ使用する設定の場合、jsは使用できません。\\n　　　*jsを使用するとxxr（クロスサイトスクリプティング攻撃）が発生する可能性があります\\n　　　* たとえば、iframe が Web サイトに埋め込まれている場合、その js はソース Web サイトの Cookie にアクセスできます。\\n    */\\n   httponly\\n}\\n</code></pre>\\n<h3 id=\\\"session\\\" tabindex=\\\"-1\\\">session</h3>\\n<p>サーバー側にあります。sessionid はサーバーのリソースを占有し、Cookie を通じてクライアントに渡されます。セッション ID で確認します。</p>\\n<h3 id=\\\"jwt\\\" tabindex=\\\"-1\\\">jwt</h3>\\n<p>しかし、ブラウザがなければ、 cookie はまったく存在しません。JSON WEB TOKEN の誕生\\njwt は response のどこいてもいい，cookie，headers，body</p>\\n<p>ちなみに、<code>OAuth2</code> だったら、 そういう形</p>\\n<pre><code class=\\\"language-ts\\\">GET PATH HTTP/1.1\\n...\\nauthorization： bearer jwt\\n...\\n\\n</code></pre>\\n<pre><code class=\\\"language-ts\\\">   interface JWT{\\n\\t   header: {\\n\\t\\t  //    タイプ\\n\\t\\t  typ:&quot;JWT&quot;,\\n\\t\\t  //    signature署名アルゴリズム\\n\\t\\t  alg: string|&quot;H256&quot;|...\\n\\t   }\\n\\t   //主体信息\\n\\t   payload: {\\n          //    any\\n\\t   }\\n\\t   //改ざんされないことを保証\\n\\t   signature: string\\n   }\\n    instance:  base64(header).base64(payload).signature\\n    // 服务器端判断\\n\\tH256(header,payload,secret) === signature\\n</code></pre>\\n<p>自分で書いた Helper</p>\\n<pre><code class=\\\"language-ts\\\">enum Oath2Token {\\n  key = &quot;bearer&quot;,\\n}\\n\\nclass JWTHelper {\\n  /**\\n   * add token to cookie and authorization\\n   * @param res\\n   * @param payload\\n   * @param maxAge ms\\n   */\\n  publish(res: Response, payload = {}, maxAge = 3600 * 24 * 1000) {\\n    const token = jwt.sign(payload, this._secret, {\\n      expiresIn: maxAge,\\n    })\\n\\n    res.header(&quot;authorization&quot;, token)\\n    res.header(&quot;access-control-expose-headers&quot;, &quot;Authorization&quot;)\\n  }\\n  validateJwtToken(request: Request) {\\n    let token: string = request.cookies ? request.cookies[this._cookieKey] : &quot;&quot;\\n    if (!token) {\\n      token = request.headers.authorization\\n    } else {\\n      //if token from cookie, add bearer\\n      token = &quot;bearer &quot; + token\\n    }\\n\\n    if (!token) {\\n      throw new ForbiddenError(&quot;don\'t have token&quot;)\\n    }\\n    //oatu2 の bearer処理\\n    const tokenArr = token.split(&quot; &quot;)\\n    if (tokenArr.length === 2) {\\n      if (tokenArr[0].toLowerCase() !== Oath2Token.key) {\\n        throw new Error(&quot;token format error&quot;)\\n      }\\n      token = tokenArr[1]\\n    }\\n\\n    try {\\n      const res = jwt.verify(token, this._secret) as ILoginReturn\\n      return res\\n    } catch (e) {\\n      throw e\\n    }\\n  }\\n  constructor(private _secret: string, private _cookieKey: string) {}\\n}\\n\\nconst defaultSetting = {\\n  secret: Math.random().toString(36).slice(-8) + Math.random().toString(36).slice(-8),\\n  cookieKey: &quot;token&quot;,\\n}\\n\\nconst JWTHelperIns = new JWTHelper(defaultSetting.secret, defaultSetting.cookieKey)\\n\\nexport default JWTHelperIns\\n</code></pre>\\n<h3 id=\\\"cors\\\" tabindex=\\\"-1\\\">CORS</h3>\\n<ol>\\n<li>jsonp\\nお勧めしない。 script タグは get リクエストのみを送信できます (リソース ファイルはドメインを越えて送信できます)。</li>\\n</ol>\\n<pre><code class=\\\"language-ts\\\">//back end\\nconst res = {}\\nresponse.header(&quot;content-type&quot;, &quot;application/javascript&quot;)\\nresponse.send(`callback${JSON.stringify(res)}`)\\n\\n//front end\\nfunction jsonp(url) {\\n  const el = document.createElement(&quot;script&quot;)\\n  el.src = url\\n  document.body.appendChild(el)\\n  el.onload = () =&gt; {\\n    el.remove()\\n  }\\n}\\n\\nfunction callback(data) {}\\n</code></pre>\\n<ol start=\\\"2\\\">\\n<li>\\n<p>CORS cross origin resource sharing</p>\\n<ol>\\n<li>簡単なリクエスト\\nmethod: get post head(ダウンロード)\\nheader 追加情報はありません\\ncontent-type : text/pain;multipart/form-data;application/x-www-form-urlencoded</li>\\n</ol>\\n<p>ブラウザは自動的 origin を追加します\\nバックエンドでは Access-Control-Allow-Origin:<code>*/特定のドメイン名(お勧め)</code></p>\\n<ol start=\\\"2\\\">\\n<li>\\n<p>OPTIONS リクエスト\\n簡単なリクエストじゃないと、 OPTIONS リクエストになります\\nブラウザでは\\nOPTIONS /path HTTP/1.1\\nAccess-Control-Request-Method:GET\\nAccess-Control-Request-Headers:a\\nOrigin:xxxx</p>\\n<p>バックエンドでは\\nAccess-Control-Request-Method:GET\\nAccess-Control-Request-Headers:a\\naccess-control-max-age:?:&quot;3600&quot; //次の数秒間はいらない</p>\\n</li>\\n</ol>\\n<p>３ 身分証明を持ってる(cookie とか)\\n&quot;access-control-allow-credentials&quot;：&quot;true&quot;\\n<strong>PS： <code>Access-Control-Allow-Origin:*</code> はダメ</strong></p>\\n</li>\\n</ol>\\n<h2 id=\\\"%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89-%E4%B8%89%E5%B1%A4%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3\\\" tabindex=\\\"-1\\\">バックエンド 三層アーキテクチャ</h2>\\n<h2 id=\\\"route-1\\\" tabindex=\\\"-1\\\">Route</h2>\\n<pre><code class=\\\"language-tex\\\"> 外部APIを提供する expressとか使う    以上があります\\n</code></pre>\\n<h2 id=\\\"service\\\" tabindex=\\\"-1\\\">Service</h2>\\n<p>业务逻辑</p>\\n<p>ここでは、単純に合法かどうかを判断するために私が書いたデコレータを使用します。</p>\\n<pre><code class=\\\"language-ts\\\">class AdminService {\\n  /**\\n   *\\n   * @param param0\\n   * @returns\\n   */\\n  @FuncIntercepter({}, { groups: [&quot;checkUserValid&quot;] })\\n  async isUserValidate(@ParamType(AdminValidate) { loginId, loginPwd }: Partial&lt;IAdmin&gt;) {\\n    loginPwd = md5(loginPwd)\\n    const res = await AdminDaoInstance.queryUser({ loginId, loginPwd })\\n    if (res &amp;&amp; res.dataValues) {\\n      return { res: true, row: res.dataValues }\\n    }\\n    return { res: false }\\n  }\\n  /**\\n   * set Authorization header\\n   * @param response\\n   * @param param1\\n   */\\n  @FuncIntercepter()\\n  async setAuthorization(response: Express.Response, @ParamType(AdminValidate) { loginId, name, remember, role }: Partial&lt;ILoginData&gt;) {\\n    remember = remember ? +remember : 1\\n    JWTHelperIns.publish(response as any, { loginId, name, role }, 60 * 60 * 24 * remember)\\n  }\\n  @FuncIntercepter()\\n  async updateUserPwd&lt;T extends IUpdateUserPwd&gt;(@ParamType(AdminValidate) { loginId, loginPwd, oldPwd, name }: T) {\\n    const { res, row } = await this.isUserValidate({ loginId, loginPwd: oldPwd })\\n    if (res &amp;&amp; row) {\\n      // console.log(row);\\n      const { id } = row as IAdmin\\n      return await AdminDaoInstance.updateUser(\\n        {\\n          loginPwd: md5(loginPwd),\\n          name,\\n        },\\n        { id }\\n      )\\n    } else {\\n      throw new ValidateError(&quot;old password error&quot;)\\n    }\\n  }\\n}\\n</code></pre>\\n<h2 id=\\\"dao\\\" tabindex=\\\"-1\\\">DAO</h2>\\n<p>通常は ORM を使用してデータベースと対話します。</p>\\n<pre><code class=\\\"language-ts\\\">class AdminDao {\\n  async queryUser({ loginId, loginPwd }: Pick&lt;IAdmin, &quot;loginId&quot; | &quot;loginPwd&quot;&gt;) {\\n    return await Admin.findOne({\\n      where: {\\n        loginId,\\n        loginPwd,\\n        isValid: &quot;Y&quot;,\\n      },\\n    })\\n  }\\n  async updateUser(newInfo: Partial&lt;IAdmin&gt;, where: Partial&lt;IAdmin&gt;) {\\n    return await Admin.update(newInfo, {\\n      where,\\n    })\\n  }\\n}\\n</code></pre>\\n\"','Y','/img/Node.png','6','4','2024-09-16','2024-09-16 13:34:34','2025-04-30 15:02:53',63),(3,'JS補い','高度な JS 学習。主に ES6 のギャップを確認して埋めることについてです。原理を理解することによってのみ、それらをより適切に適用できます。','[{\"anchor\":\"js\",\"name\":\"js\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E3%82%B3%E3%83%B3%E3%82%B9%E3%83%88%E3%83%A9%E3%82%AF%E3%82%BF(construct)\",\"name\":\"コンストラクタ(construct)\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"property-descriptor\",\"name\":\"property descriptor\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"es6\",\"name\":\"ES6\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"1.-symbol\",\"name\":\"1. symbol\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"2.-iterator\",\"name\":\"2. iterator\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"3.-generator\",\"name\":\"3. generator\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"4.-reflect\",\"name\":\"4. Reflect\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"5.-proxy\",\"name\":\"5. proxy\",\"tag\":\"h3\",\"children\":[]}]}]}]','\"<h1 id=\\\"js\\\" tabindex=\\\"-1\\\">js</h1>\\n<h2 id=\\\"%E3%82%B3%E3%83%B3%E3%82%B9%E3%83%88%E3%83%A9%E3%82%AF%E3%82%BF(construct)\\\" tabindex=\\\"-1\\\">コンストラクタ(construct)</h2>\\n<ol>\\n<li><strong>js 内のすべてのオブジェクトはコンストラクターを通じて生成されます</strong></li>\\n</ol>\\n<pre><code class=\\\"language-ts\\\">      const obj = {1:1} =&gt; const o = new Object()  o[1] = 1\\n      const arr = [1,2] =&gt; const arr2 = new Array(1,2)\\n      const sum = (a,b)=&gt;a+b =&gt; const sum = new Function(\'a\',\'b\',\'return a+b\')\\n</code></pre>\\n<ol start=\\\"2\\\">\\n<li><strong>prototype 三角関係</strong></li>\\n</ol>\\n<p><code>new instance</code>たびに大量の重複コンテンツが生成され、大量のメモリを占有します。特に方法です。\\n<code>function (object)</code> には<code>prototype(これも object)</code>というプロパティがあります。instance の<code>__proto__</code>がそれを指します。したがって、パブリックメンバーは <code>prototype</code> に配置されます</p>\\n<ol start=\\\"3\\\">\\n<li>\\n<p><code>this</code> <strong>呼び出す時に決まる</strong>\\n特別のシーン：</p>\\n<ol>\\n<li><code>()=&gt;{}</code>\\n<code>this</code>は定義の時に決定される</li>\\n<li><code>手動で指定する</code></li>\\n</ol>\\n<pre><code class=\\\"language-ts\\\">     function a(){\\n       ...\\n     }\\n     a() &lt;=&gt; a.call()\\n\\n     a.call(this,...argment)\\n     a.apply(this,...arg:[])\\n\\n</code></pre>\\n</li>\\n<li>\\n<p><code>prototype chain</code> いわば<code>__proto__</code>にて</p>\\n<ol>\\n<li><code>instanceof</code>\\n<strong><code>__proto__</code>/constructor.prototype</strong> にあるか。シンプルに<code>is</code>として理解されます</li>\\n<li><code>Object.getPrototypeOf(o)</code>\\nprototype を取得する。 直接<code>__proto__</code>を使うのはよくない。</li>\\n<li><code>const obj = Object.create(target)</code>\\n<code>Object.getPrototypeOf(obj)===target</code></li>\\n<li><code>Object.setPrototypeOf(a1,a2)</code>\\nprototype の設置</li>\\n<li>継承\\nUser.call(this,name)\\nObject.setPrototypeOf(VipUser.prototype,User.prototype)\\n<strong>PS: 今は Reflect.setPrototypeOf，Reflect.getPrototypeOf もできます</strong></li>\\n</ol>\\n</li>\\n</ol>\\n<h2 id=\\\"property-descriptor\\\" tabindex=\\\"-1\\\"><code>property descriptor</code></h2>\\n<pre><code class=\\\"language-ts\\\">interface Descriptor {\\n  value: 2\\n  writable: true\\n  enumerable: true //for in, Object.keys() in は__proto__も見る\\n  configurable: true //property descriptor変更できるかどうか\\n  get: () =&gt; {}\\n  set: () =&gt; {}\\n}\\nObject.defineProperty(obj, &quot;key&quot;, {})\\n</code></pre>\\n<p><strong>注: get,set と value,writable 相互排他</strong>\\n<strong>get,set のおかけで、操作性の向上</strong></p>\\n<h2 id=\\\"es6\\\" tabindex=\\\"-1\\\">ES6</h2>\\n<h3 id=\\\"1.-symbol\\\" tabindex=\\\"-1\\\">1. symbol</h3>\\n<p>略する</p>\\n<h3 id=\\\"2.-iterator\\\" tabindex=\\\"-1\\\">2. iterator</h3>\\n<pre><code class=\\\"language-ts\\\">function next() {\\n  return { done: boolen, value: T }\\n}\\n</code></pre>\\n<p><strong>iterator protocol</strong></p>\\n<p>对象 具有知名符合属性<code>symbol.iterator</code>,并且该属性是一个迭代器创建函数，iterable\\nオブジェクトには<code>symbol.iterator</code>というプロパティがあり、この value は<code>next</code>。</p>\\n<h3 id=\\\"3.-generator\\\" tabindex=\\\"-1\\\">3. generator</h3>\\n<p><strong>コンストラクター Generator によって作成されたオブジェクト。enerator は iterator <code>next 付き</code> と<code>iterable object</code> (<code>[symbol.iterator]プロパティがあり</code>) の両方です`</strong></p>\\n<ol>\\n<li>\\n<p>generator は return でき</p>\\n<pre><code class=\\\"language-ts\\\">\\tfunction *g(){\\n\\t\\tyield 2\\n\\t\\treturn 1\\n\\t}\\n\\tconst g = g()\\n\\tg.next() {done: false,value:2}\\n\\tg.next() {done: true, value:1}\\n\\tg.next() {done: true,value: undefined}\\n</code></pre>\\n</li>\\n<li>\\n<p>next()は param 持ってます</p>\\n<pre><code class=\\\"language-ts\\\">\\tfunction *g(){\\n\\t\\tlet i = yield 2\\n\\t\\tyield i + 1\\n\\t}\\n\\tconst g = g()\\n\\tg.next() {done: false,value:2}\\n\\tg.next(10) {done: true, value:11}\\n\\tg.next() {done: true,value: undefined}\\n</code></pre>\\n<p><strong>初めて の next() の param は意味ない</strong></p>\\n</li>\\n<li>\\n<p>generator nesting</p>\\n<pre><code class=\\\"language-ts\\\">function *g(){\\n\\tyield 2\\n\\treturn 1\\n}\\nfunction *g2(){\\n\\tyield *g()\\n\\tyield 3\\n}\\nconst g = g2()\\ng.next() {done: false,value:2}\\ng.next() {done: false, value:3}\\ng.next() {done: true,value: undefined}\\n</code></pre>\\n</li>\\n<li>\\n<p>その他\\n<strong>return</strong></p>\\n<pre><code class=\\\"language-ts\\\">function* g() {\\n  yield 2\\n  return 1\\n}\\nconst g = g()\\ng.return(0)\\n</code></pre>\\n<p><strong>throw</strong></p>\\n<pre><code class=\\\"language-ts\\\">function* g() {\\n  yield 2\\n  return 1\\n}\\nconst g = g()\\ng.throw(new Error())\\n</code></pre>\\n</li>\\n</ol>\\n<h3 id=\\\"4.-reflect\\\" tabindex=\\\"-1\\\">4. Reflect</h3>\\n<p>基礎となる関数にアクセスするため API。 関数型プログラミング</p>\\n<h3 id=\\\"5.-proxy\\\" tabindex=\\\"-1\\\">5. proxy</h3>\\n<p>vue のトラック操作やトリガー操作など、通常は Reflect と一緒に、いくつかの基礎となる操作をインターセプトします。</p>\\n<pre><code class=\\\"language-ts\\\">const targetProxy = new Proxy(target, {\\n  set() {\\n    const type = target.hasOwnProperty(key) ? ETriggerType.set : ETriggerType.add\\n\\n    const oldValue = target[key]\\n    // const oldLength = Array.isArray(target) ? target.length : null\\n\\n    const res = Reflect.set(target, key, newValue, receiver)\\n\\n    if (isChanged(oldValue, newValue)) {\\n      //アップデートを配布する\\n      trigger({\\n        target,\\n        type,\\n        key: key as any,\\n      })\\n    }\\n    return res\\n  },\\n  get() {\\n    const res = Reflect.get(target, key, receiver)\\n\\n    //依存関係をインターセプトして収集する\\n    track({\\n      target,\\n      key,\\n      type: ETrackType.get,\\n    })\\n    if (res instanceof Object &amp;&amp; typeof res === &quot;object&quot;) {\\n      return reactive(res)\\n    }\\n    return res\\n  },\\n})\\n</code></pre>\\n<p>詳細については、「Vue」を参照してください。</p>\\n\"','Y','/img/JS.png','2','4','2024-09-16','2024-09-16 13:34:34','2024-09-23 16:12:23',64),(4,'よく使われるCSS3のまとめ','HTML5+CSS3 は開発エクスペリエンスを大幅に向上させました。js は非常に重要ですが、css も不可欠です。ccs3 で追加された新しいコンテンツを見てみましょう','[{\"anchor\":\"%E3%83%AC%E3%82%A4%E3%82%A2%E3%82%A6%E3%83%88\",\"name\":\"レイアウト\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E3%83%95%E3%83%AC%E3%83%83%E3%82%AF%E3%82%B9%E3%83%9C%E3%83%83%E3%82%AF%E3%82%B9\",\"name\":\"フレックスボックス\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"%E3%83%95%E3%83%AC%E3%82%AD%E3%82%B7%E3%83%96%E3%83%AB%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%A8%E3%83%95%E3%83%AC%E3%82%AD%E3%82%B7%E3%83%96%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B\",\"name\":\"フレキシブルコンテナとフレキシブルプロジェクトを生成する\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E6%96%B9%E5%90%91%E3%82%92%E5%A4%89%E3%81%88%E3%82%8B\",\"name\":\"方向を変える\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E4%B8%BB%E8%BB%B8%E9%85%8D%E7%BD%AE\",\"name\":\"主軸配置\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E5%81%B4%E8%BB%B8%E9%85%8D%E7%BD%AE\",\"name\":\"側軸配置\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E6%9F%94%E8%BB%9F%E3%81%AA%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%AA%E3%83%B3%E3%82%B0\",\"name\":\"柔軟なプロジェクトのスケーリング\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E3%82%B9%E3%83%94%E3%83%B3%E3%83%89%E3%83%AB%E3%83%A9%E3%82%A4%E3%83%B3%E3%83%A9%E3%83%83%E3%83%97\",\"name\":\"スピンドルラインラップ\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"%E3%82%B0%E3%83%AA%E3%83%83%E3%83%89\",\"name\":\"グリッド\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"%E3%82%B0%E3%83%AA%E3%83%83%E3%83%89%E3%83%AC%E3%82%A4%E3%82%A2%E3%82%A6%E3%83%88%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B\",\"name\":\"グリッドレイアウトを生成する\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E8%A1%8C%E3%81%A8%E5%88%97%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B\",\"name\":\"行と列を定義する\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E4%B8%A6%E3%81%B9%E6%9B%BF%E3%81%88%E6%96%B9%E5%90%91%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B\",\"name\":\"並べ替え方向を変更する\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E3%82%BB%E3%83%AB%E9%96%93%E3%81%AE%E3%82%AE%E3%83%A3%E3%83%83%E3%83%97\",\"name\":\"セル間のギャップ\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E3%82%BB%E3%83%AB%E5%86%85%E3%81%AE%E6%95%B4%E5%88%97\",\"name\":\"セル内の整列\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E3%82%B0%E3%83%AA%E3%83%83%E3%83%89%E9%A0%85%E7%9B%AE%E3%81%AE%E9%85%8D%E7%BD%AE\",\"name\":\"グリッド項目の配置\",\"tag\":\"h3\",\"children\":[]}]}]},{\"anchor\":\"%E3%83%93%E3%82%B8%E3%83%A7%E3%83%B3\",\"name\":\"ビジョン\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E5%BD%B1\",\"name\":\"影\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"%E3%83%9C%E3%83%83%E3%82%AF%E3%82%B9%E3%82%B7%E3%83%A3%E3%83%89%E3%82%A6\",\"name\":\"ボックスシャドウ\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%82%B7%E3%83%A3%E3%83%89%E3%82%A6\",\"name\":\"テキストシャドウ\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"%E8%A7%92%E3%81%8C%E4%B8%B8%E3%81%84\",\"name\":\"角が丸い\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E8%83%8C%E6%99%AF%E3%81%AE%E3%82%B0%E3%83%A9%E3%83%87%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3\",\"name\":\"背景のグラデーション\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E5%A4%89%E6%8F%9B\",\"name\":\"変換\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"translate\",\"name\":\"translate\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"scale\",\"name\":\"scale\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"rotate\",\"name\":\"rotate\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E5%A4%89%E5%BD%A2%E5%8E%9F%E7%82%B9%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B\",\"name\":\"変形原点を変更する\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E8%A4%87%E6%95%B0%E3%81%AE%E5%A4%89%E5%BD%A2%E3%81%AE%E9%87%8D%E3%81%AD%E5%90%88%E3%82%8F%E3%81%9B\",\"name\":\"複数の変形の重ね合わせ\",\"tag\":\"h3\",\"children\":[]}]}]},{\"anchor\":\"%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B8%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%A8%E3%82%A2%E3%83%8B%E3%83%A1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3\",\"name\":\"トランジションとアニメーション\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"transition\",\"name\":\"transition\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E3%82%A2%E3%83%8B%E3%83%A1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3\",\"name\":\"アニメーション\",\"tag\":\"h2\",\"children\":[]}]},{\"anchor\":\"%E3%81%9D%E3%81%AE%E4%BB%96\",\"name\":\"その他\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E3%83%9C%E3%83%83%E3%82%AF%E3%82%B9%E3%81%AE%E3%82%B5%E3%82%A4%E3%82%BA%E8%A8%AD%E5%AE%9A\",\"name\":\"ボックスのサイズ設定\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E3%83%95%E3%82%A9%E3%83%B3%E3%83%88%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3\",\"name\":\"フォントアイコン\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E7%94%BB%E5%83%8F%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E3%81%AE%E9%81%A9%E5%BF%9C\",\"name\":\"画像コンテンツの適応\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E3%83%93%E3%83%A5%E3%83%BC%E3%83%9D%E3%83%BC%E3%83%88%E5%8D%98%E4%BD%8D\",\"name\":\"ビューポート単位\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E6%93%AC%E4%BC%BC%E8%A6%81%E7%B4%A0%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF%E3%83%BC\",\"name\":\"擬似要素セレクター\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E3%82%B9%E3%83%A0%E3%83%BC%E3%82%BA%E3%81%AA%E3%82%B9%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%AB\",\"name\":\"スムーズなスクロール\",\"tag\":\"h2\",\"children\":[]}]}]','\"<h1 id=\\\"%E3%83%AC%E3%82%A4%E3%82%A2%E3%82%A6%E3%83%88\\\" tabindex=\\\"-1\\\">レイアウト</h1>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210511102802.png\\\" alt=\\\"image-20210511102549096\\\"></p>\\n<p><strong>フローティング</strong>: テキストの折り返し効果を作成します</p>\\n<p><strong>フレックスボックス</strong>: 単一行または単一列のレイアウト</p>\\n<p><strong>グリッド</strong>: 複数行および複数列のレイアウト</p>\\n<h2 id=\\\"%E3%83%95%E3%83%AC%E3%83%83%E3%82%AF%E3%82%B9%E3%83%9C%E3%83%83%E3%82%AF%E3%82%B9\\\" tabindex=\\\"-1\\\">フレックスボックス</h2>\\n<blockquote>\\n<p>詳細なドキュメントについては、<a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout\\\">MDN</a> を参照してください。</p>\\n<p>【フレキシブルボックスゲーム】(https://flexboxfroggy.com/)</p>\\n</blockquote>\\n<h3 id=\\\"%E3%83%95%E3%83%AC%E3%82%AD%E3%82%B7%E3%83%96%E3%83%AB%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%A8%E3%83%95%E3%83%AC%E3%82%AD%E3%82%B7%E3%83%96%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B\\\" tabindex=\\\"-1\\\">フレキシブルコンテナとフレキシブルプロジェクトを生成する</h3>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210511112624.png\\\" alt=\\\"image-20210511112624876\\\"></p>\\n<p><strong>デフォルトでは</strong> 弾性アイテムは主軸に沿って順番に配置され、交差軸は引き伸ばされます。</p>\\n<h3 id=\\\"%E6%96%B9%E5%90%91%E3%82%92%E5%A4%89%E3%81%88%E3%82%8B\\\" tabindex=\\\"-1\\\">方向を変える</h3>\\n<p>スピンドルの方向は<code>flex-direction</code>で変更できます。</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210511112510.png\\\" alt=\\\"image-20210511112510632\\\"></p>\\n<h3 id=\\\"%E4%B8%BB%E8%BB%B8%E9%85%8D%E7%BD%AE\\\" tabindex=\\\"-1\\\">主軸配置</h3>\\n<p><code>justify-content</code>属性を使用すると、主軸の配置に影響を与えることができます。</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210511113617.png\\\" alt=\\\"image-20210511113617325\\\"></p>\\n<h3 id=\\\"%E5%81%B4%E8%BB%B8%E9%85%8D%E7%BD%AE\\\" tabindex=\\\"-1\\\">側軸配置</h3>\\n<p><code>align-items</code>属性を通じて、交差軸の配置に影響を与えることができます。</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210511114016.png\\\" alt=\\\"image-20210511114016304\\\"></p>\\n<h3 id=\\\"%E6%9F%94%E8%BB%9F%E3%81%AA%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%AA%E3%83%B3%E3%82%B0\\\" tabindex=\\\"-1\\\">柔軟なプロジェクトのスケーリング</h3>\\n<p>いわゆる伸縮性とは、<strong>弾性容器</strong>に<strong>余分な空間</strong>がある場合に<strong>主軸方向</strong>に伸ばす必要があるかどうか、および<strong>弾性容器</strong>に<strong>余裕がある</strong>場合に<strong>圧縮する必要があるかどうかを指します</strong>.スペースが不足しています<strong>柔軟な項目</strong>の <code>flex</code> 属性を使用して、伸縮率と圧縮率を設定します: <code>flex: 伸縮率、圧縮率、初期サイズ</code></p>\\n<p>ストレッチの例:</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210511120916.png\\\" alt=\\\"image-20210511120916571\\\"></p>\\n<p>圧縮の例:</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210511121459.png\\\" alt=\\\"image-20210511121459341\\\"></p>\\n<p>デフォルトでは、<code>flex: 0 1 auto</code>です。</p>\\n<h3 id=\\\"%E3%82%B9%E3%83%94%E3%83%B3%E3%83%89%E3%83%AB%E3%83%A9%E3%82%A4%E3%83%B3%E3%83%A9%E3%83%83%E3%83%97\\\" tabindex=\\\"-1\\\">スピンドルラインラップ</h3>\\n<p>デフォルトでは、スピンドルの残量が不足している場合、圧縮率に従って圧縮が行われますが、スピンドル行折り返しが設定されている場合は、圧縮は行われず、そのまま行折り返しで表示されます。</p>\\n<p><code>flex-wrap:wrap</code> を <strong>flex コンテナ</strong>に設定して、主軸をラップします。</p>\\n<img src=\\\"http://mdrs.yuanjin.tech/img/20210511123310.png\\\" alt=\\\"image-20210511123310673\\\" style=\\\"zoom:50%;\\\" />\\n<blockquote>\\n<p>それにも関わらず、複数の行と列にはグリッド レイアウトが推奨されます。</p>\\n</blockquote>\\n<h2 id=\\\"%E3%82%B0%E3%83%AA%E3%83%83%E3%83%89\\\" tabindex=\\\"-1\\\">グリッド</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout\\\">MDN 詳細ドキュメント</a></p>\\n<p><a href=\\\"http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html\\\">Ruan Yifeng グリッド レイアウト チュートリアル</a></p>\\n<p>【グリッドレイアウトゲーム】(https://cssgridgarden.com/)</p>\\n</blockquote>\\n<p><strong>グリッド レイアウトは、複数行および複数列のレイアウトの究極のソリューションです</strong></p>\\n<h3 id=\\\"%E3%82%B0%E3%83%AA%E3%83%83%E3%83%89%E3%83%AC%E3%82%A4%E3%82%A2%E3%82%A6%E3%83%88%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B\\\" tabindex=\\\"-1\\\">グリッドレイアウトを生成する</h3>\\n<img src=\\\"http://mdrs.yuanjin.tech/img/20210511165317.png\\\" alt=\\\"image-20210511165317363\\\" style=\\\"zoom:50%;\\\" />\\n<p>コンテナがグリッド レイアウトを生成すると、そのすべての子要素は <strong>グリッド アイテム</strong>になります</p>\\n<h3 id=\\\"%E8%A1%8C%E3%81%A8%E5%88%97%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B\\\" tabindex=\\\"-1\\\">行と列を定義する</h3>\\n<p><code>grid-template-rows</code>: 行を定義します</p>\\n<p><code>grid-template-columns</code>: 列を定義します</p>\\n<p><strong>それらの構文は同じです</strong></p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210511172305.png\\\" alt=\\\"image-20210511172305100\\\"></p>\\n<h3 id=\\\"%E4%B8%A6%E3%81%B9%E6%9B%BF%E3%81%88%E6%96%B9%E5%90%91%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B\\\" tabindex=\\\"-1\\\">並べ替え方向を変更する</h3>\\n<p>属性 <code>grid-auto-flow:column</code> を使用して子要素を列に配置します</p>\\n<img src=\\\"http://mdrs.yuanjin.tech/img/20210511173447.png\\\" alt=\\\"image-20210511173447321\\\" style=\\\"zoom:50%;\\\" />\\n<h3 id=\\\"%E3%82%BB%E3%83%AB%E9%96%93%E3%81%AE%E3%82%AE%E3%83%A3%E3%83%83%E3%83%97\\\" tabindex=\\\"-1\\\">セル間のギャップ</h3>\\n<pre><code class=\\\"language-css\\\">row-gap: 10px; /* 行のギャップは 10px です */\\ncolumn-gap: 20px; /* 列のギャップは 20px です */\\ngap: 10px 20px; /* 行のギャップは 10 ピクセル、列のギャップは 20 ピクセル */\\n</code></pre>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210512132025.png\\\" alt=\\\"image-20210512132025687\\\"></p>\\n<h3 id=\\\"%E3%82%BB%E3%83%AB%E5%86%85%E3%81%AE%E6%95%B4%E5%88%97\\\" tabindex=\\\"-1\\\">セル内の整列</h3>\\n<p>デフォルトでは、グリッド項目はセル内で水平方向と垂直方向に伸びてセルを埋め尽くします。</p>\\n<p>属性 <code>justify-items</code> を使用して <strong>水平</strong> 配置を設定できます。</p>\\n<p>属性 <code>align-items</code> を使用して垂直方向の配置を設定できます。</p>\\n<p>それらの可能な値は同じです。</p>\\n<pre><code class=\\\"language-css\\\">justify-items: start 左 | end 右 | center 中 | stretch ストレッチ;\\nalign-items: start 上 | end 下 | center 中 | stretch ストレッチ;\\n</code></pre>\\n<img src=\\\"http://mdrs.yuanjin.tech/img/20210511174450.png\\\" alt=\\\"image-20210511174450356\\\" style=\\\"zoom:50%;\\\" />\\n<p>短縮属性<code>place-items: 垂直配置水平配置</code>を使用して、両方の値を同時に設定できます。</p>\\n<pre><code class=\\\"language-css\\\">place-items: start center; /* 垂直方向は上、水平方向は中央揃え */\\n</code></pre>\\n<h3 id=\\\"%E3%82%B0%E3%83%AA%E3%83%83%E3%83%89%E9%A0%85%E7%9B%AE%E3%81%AE%E9%85%8D%E7%BD%AE\\\" tabindex=\\\"-1\\\">グリッド項目の配置</h3>\\n<p>デフォルトでは、グリッド項目は次々とセルに配置され、各グリッドが 1 つのセルを占有します。</p>\\n<p>ただし、グリッド項目に<code>grid-area</code>属性を設定して、この動作を変更できます。</p>\\n<p>使用方法:</p>\\n<pre><code class=\\\"language-css\\\">grid-area: 開始行番号/開始列番号/終了行番号/終了列番号;\\n</code></pre>\\n<img src=\\\"http://mdrs.yuanjin.tech/img/20210511180028.png\\\" alt=\\\"image-20210511180027983\\\" style=\\\"zoom:50%;\\\" />\\n<h1 id=\\\"%E3%83%93%E3%82%B8%E3%83%A7%E3%83%B3\\\" tabindex=\\\"-1\\\">ビジョン</h1>\\n<blockquote>\\n<p>いわゆるビジュアルスタイルとは、テキストの色、背景色、背景画像など、ボックスの位置やサイズに影響を与えないスタイルを指します。</p>\\n</blockquote>\\n<h2 id=\\\"%E5%BD%B1\\\" tabindex=\\\"-1\\\">影</h2>\\n<h3 id=\\\"%E3%83%9C%E3%83%83%E3%82%AF%E3%82%B9%E3%82%B7%E3%83%A3%E3%83%89%E3%82%A6\\\" tabindex=\\\"-1\\\">ボックスシャドウ</h3>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-shadow\\\">MDN 詳細ドキュメント</a></p>\\n</blockquote>\\n<p>ボックス全体の影は<code>box-shadow</code>プロパティで設定できます。</p>\\n<p>以下にいくつかの例を示します</p>\\n<iframe src=\\\"http://mdrs.yuanjin.tech/html/css-manual/box-shadow.html?v=2\\\" style=\\\"height:900px;\\\"></iframe>\\n<h3 id=\\\"%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%82%B7%E3%83%A3%E3%83%89%E3%82%A6\\\" tabindex=\\\"-1\\\">テキストシャドウ</h3>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-shadow\\\">MDN 詳細ドキュメント</a></p>\\n</blockquote>\\n<p>テキストの影は<code>text-shadow</code>で設定できます。</p>\\n<p>以下にいくつかの例を示します</p>\\n<h3 id=\\\"%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%82%B7%E3%83%A3%E3%83%89%E3%82%A6-1\\\" tabindex=\\\"-1\\\">テキストシャドウ</h3>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-shadow\\\">MDN 詳細ドキュメント</a></p>\\n</blockquote>\\n<p>テキストの影は<code>text-shadow</code>で設定できます。</p>\\n<p>以下にいくつかの例を示します</p>\\n<iframe src=\\\"http://mdrs.yuanjin.tech/html/css-manual/text-shadow.html?v=3\\\" style=\\\"height:500px;\\\"></iframe>\\n<h2 id=\\\"%E8%A7%92%E3%81%8C%E4%B8%B8%E3%81%84\\\" tabindex=\\\"-1\\\">角が丸い</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-radius\\\">MDN 詳細ドキュメント</a></p>\\n</blockquote>\\n<p><code>border-radius</code>を設定することで、ボックスの角の丸みを設定できます</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210512131026.png\\\" alt=\\\"image-20210512131026084\\\"></p>\\n<p><code>border-radius</code> はさまざまな柔軟な方法で使用でき、次のコードをページに貼り付けてテストできます。</p>\\n<pre><code class=\\\"language-css\\\">border-radius: 10px; /* 4つの角の丸みを半径10pxで同時に設定します */\\nborder-radius: 50%; /* 4 つのコーナー フィレットを同時に設定します。円の水平半径は幅の半分、垂直半径は高さの半分です */\\nborder-radius: 10px 20px 30px 40px; /* 左上、右上、右下、左下の角の丸みをそれぞれ設定します */\\n</code></pre>\\n<h2 id=\\\"%E8%A7%92%E3%81%8C%E4%B8%B8%E3%81%84-1\\\" tabindex=\\\"-1\\\">角が丸い</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-radius\\\">MDN 詳細ドキュメント</a></p>\\n</blockquote>\\n<p><code>border-radius</code>を設定することで、ボックスの角の丸みを設定できます</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210512131026.png\\\" alt=\\\"image-20210512131026084\\\"></p>\\n<p><code>border-radius</code> はさまざまな柔軟な方法で使用でき、次のコードをページに貼り付けてテストできます。</p>\\n<pre><code class=\\\"language-css\\\">border-radius: 10px; /* 4つの角の丸みを半径10pxで同時に設定します */\\nborder-radius: 50%; /* 4 つのコーナー フィレットを同時に設定します。円の水平半径は幅の半分、垂直半径は高さの半分です */\\nborder-radius: 10px 20px 30px 40px; /* 左上、右上、右下、左下の角の丸みをそれぞれ設定します */\\n</code></pre>\\n<iframe src=\\\"http://mdrs.yuanjin.tech/html/css-manual/border-raduis.html?v=5\\\" style=\\\"height:550px;\\\">\\n</iframe>\\n<h2 id=\\\"%E8%83%8C%E6%99%AF%E3%81%AE%E3%82%B0%E3%83%A9%E3%83%87%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3\\\" tabindex=\\\"-1\\\">背景のグラデーション</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/linear-gradient()\\\">MDN 詳細ドキュメント</a></p>\\n</blockquote>\\n<p><strong>背景画像</strong>を設定する場合、<code>url()</code> を使用して背景画像を読み込むことに加えて、<code>linear-gradient()</code> 関数を使用して背景のグラデーションを設定することもできます。</p>\\n<p><code>linear-gradient()</code> はグラデーション画像を作成するために使用されます。構文は次のとおりです。</p>\\n<pre><code class=\\\"language-css\\\">/* グラデーションの背景を設定します。方向: 上から下、色: #e66465 から #9198e5 までのグラデーション */\\nbackground: linear-gradient(to bottom, #e66465, #9198e5);\\n</code></pre>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210512135028.png\\\" alt=\\\"image-20210512135024676\\\"></p>\\n<h2 id=\\\"%E5%A4%89%E6%8F%9B\\\" tabindex=\\\"-1\\\">変換</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform\\\">MDN 詳細ドキュメント</a></p>\\n</blockquote>\\n<p><code>transform</code>属性を使用すると、ボックスの形状を変更できます。</p>\\n<p>このアトリビュートはさまざまな変形スキームをサポートしています。一般的なものは次のとおりです。</p>\\n<ul>\\n<li>translate 水平移動</li>\\n<li>scale ズーム</li>\\n<li>rotate 回転</li>\\n</ul>\\n<p><strong>どの変換であっても、視覚効果が変更されるだけであり、ボックスのレイアウトには影響しません</strong></p>\\n<p><strong>変換ではブラウザのリフローや再レンダリングが発生しないため、非常に効率的です</strong></p>\\n<h3 id=\\\"translate\\\" tabindex=\\\"-1\\\">translate</h3>\\n<p><code>translate</code>を使用すると、相対位置決めと同様に、ボックスが元の位置からずれる可能性があります。</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210512140643.png\\\" alt=\\\"image-20210512140622630\\\"></p>\\n<h3 id=\\\"scale\\\" tabindex=\\\"-1\\\">scale</h3>\\n<p><code>translate</code> を使用して、元の寸法に基づいてボックスのスケールを作成します。</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210512141500.png\\\" alt=\\\"image-20210512141500499\\\"></p>\\n<h3 id=\\\"rotate\\\" tabindex=\\\"-1\\\">rotate</h3>\\n<p>元の画像に基づいて回転するには、<code>rotate</code>属性を使用します</p>\\n<pre><code class=\\\"language-css\\\">/* 元の画像を元に、時計回りに 45 度回転します */\\ntransform: rotate(45deg);\\n/* 元の画像を元に、時計回りに半回転します */\\ntransform: rotate(0.5turn);\\n</code></pre>\\n<p>下のボタンをクリックして回転効果を試すことができます</p>\\n<h2 id=\\\"%E8%83%8C%E6%99%AF%E3%81%AE%E3%82%B0%E3%83%A9%E3%83%87%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3-1\\\" tabindex=\\\"-1\\\">背景のグラデーション</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/linear-gradient()\\\">MDN 詳細ドキュメント</a></p>\\n</blockquote>\\n<p><strong>背景画像</strong>を設定する場合、<code>url()</code> を使用して背景画像を読み込むことに加えて、<code>linear-gradient()</code> 関数を使用して背景のグラデーションを設定することもできます。</p>\\n<p><code>linear-gradient()</code> はグラデーション画像を作成するために使用されます。構文は次のとおりです。</p>\\n<pre><code class=\\\"language-css\\\">/* グラデーションの背景を設定します。方向: 上から下、色: #e66465 から #9198e5 までのグラデーション */\\nbackground: linear-gradient(to bottom, #e66465, #9198e5);\\n</code></pre>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210512135028.png\\\" alt=\\\"image-20210512135024676\\\"></p>\\n<h2 id=\\\"%E5%A4%89%E6%8F%9B-1\\\" tabindex=\\\"-1\\\">変換</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform\\\">MDN 詳細ドキュメント</a></p>\\n</blockquote>\\n<p><code>transform</code>属性を使用すると、ボックスの形状を変更できます。</p>\\n<p>このアトリビュートはさまざまな変形スキームをサポートしています。一般的なものは次のとおりです。</p>\\n<ul>\\n<li>translate 水平移動</li>\\n<li>scale ズーム</li>\\n<li>rotate 回転</li>\\n</ul>\\n<p><strong>どの変換であっても、視覚効果が変更されるだけであり、ボックスのレイアウトには影響しません</strong></p>\\n<p><strong>変換ではブラウザのリフローや再レンダリングが発生しないため、非常に効率的です</strong></p>\\n<h3 id=\\\"translate-1\\\" tabindex=\\\"-1\\\">translate</h3>\\n<p><code>translate</code>を使用すると、相対位置決めと同様に、ボックスが元の位置からずれる可能性があります。</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210512140643.png\\\" alt=\\\"image-20210512140622630\\\"></p>\\n<h3 id=\\\"scale-1\\\" tabindex=\\\"-1\\\">scale</h3>\\n<p><code>translate</code> を使用して、元の寸法に基づいてボックスのスケールを作成します。</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210512141500.png\\\" alt=\\\"image-20210512141500499\\\"></p>\\n<h3 id=\\\"rotate-1\\\" tabindex=\\\"-1\\\">rotate</h3>\\n<p>元の画像に基づいて回転するには、<code>rotate</code>属性を使用します</p>\\n<pre><code class=\\\"language-css\\\">/* 元の画像を元に、時計回りに 45 度回転します */\\ntransform: rotate(45deg);\\n/* 元の画像を元に、時計回りに半回転します */\\ntransform: rotate(0.5turn);\\n</code></pre>\\n<p>下のボタンをクリックして回転効果を試すことができます</p>\\n<iframe src=\\\"http://mdrs.yuanjin.tech/html/css-manual/rotate.html\\\" style=\\\"height:400px;\\\">\\n</iframe>\\n<h3 id=\\\"%E5%A4%89%E5%BD%A2%E5%8E%9F%E7%82%B9%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B\\\" tabindex=\\\"-1\\\">変形原点を変更する</h3>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-origin\\\">MDN 詳細ドキュメント</a></p>\\n</blockquote>\\n<p>変形原点の位置は、特定の変形動作に影響します。</p>\\n<p>デフォルトでは、変換の原点はボックスの中心にありますが、<code>transform-origin</code> で変更できます。</p>\\n<pre><code class=\\\"language-css\\\">transform-origin: center; /* 原点をボックスの中心に設定します */\\ntransform-origin: left top; /* 原点をボックスの左上隅に設定します */\\ntransform-origin: right bottom; /* 原点をボックスの右下隅に設定します */\\ntransform-origin: 30px 60px; /* 原点をボックス座標 (30, 60) に設定します */\\n</code></pre>\\n<p>試してみてください。まず [原点を設定] ボタンをクリックして原点 (図の赤い点でマーク) を設定し、次に [変形] ボタンをクリックして変形します。</p>\\n<h3 id=\\\"%E5%A4%89%E5%BD%A2%E5%8E%9F%E7%82%B9%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B-1\\\" tabindex=\\\"-1\\\">変形原点を変更する</h3>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-origin\\\">MDN 詳細ドキュメント</a></p>\\n</blockquote>\\n<p>変形原点の位置は、特定の変形動作に影響します。</p>\\n<p>デフォルトでは、変換の原点はボックスの中心にありますが、<code>transform-origin</code> で変更できます。</p>\\n<pre><code class=\\\"language-css\\\">transform-origin: center; /* 原点をボックスの中心に設定します */\\ntransform-origin: left top; /* 原点をボックスの左上隅に設定します */\\ntransform-origin: right bottom; /* 原点をボックスの右下隅に設定します */\\ntransform-origin: 30px 60px; /* 原点をボックス座標 (30, 60) に設定します */\\n</code></pre>\\n<p>試してみてください。まず [原点を設定] ボタンをクリックして原点 (図の赤い点でマーク) を設定し、次に [変形] ボタンをクリックして変形します。</p>\\n<iframe src=\\\"http://mdrs.yuanjin.tech/html/css-manual/transform-origin.html?v2\\\" style=\\\"height:600px;\\\"></iframe>\\n<h3 id=\\\"%E8%A4%87%E6%95%B0%E3%81%AE%E5%A4%89%E5%BD%A2%E3%81%AE%E9%87%8D%E3%81%AD%E5%90%88%E3%82%8F%E3%81%9B\\\" tabindex=\\\"-1\\\">複数の変形の重ね合わせ</h3>\\n<p>複数のデフォメーション効果を一度に設定可能</p>\\n<pre><code class=\\\"language-css\\\">/* まず 45 度回転し、次に (100,100) を移動します */\\ntransform: rotate(45deg) translate(100px, 100px);\\n/* まず平行移動 (100, 100) し、次に 45 度回転します */\\ntransform: translate(100px, 100px) rotate(45deg);\\n</code></pre>\\n<p>注: 回転すると座標系も回転するため、その後の変形効果に影響を与える可能性があります。</p>\\n<p>次の例はこの点をよく示しています</p>\\n<h3 id=\\\"%E8%A4%87%E6%95%B0%E3%81%AE%E5%A4%89%E5%BD%A2%E3%81%AE%E9%87%8D%E3%81%AD%E5%90%88%E3%82%8F%E3%81%9B-1\\\" tabindex=\\\"-1\\\">複数の変形の重ね合わせ</h3>\\n<p>複数のデフォメーション効果を一度に設定可能</p>\\n<pre><code class=\\\"language-css\\\">/* まず 45 度回転し、次に (100,100) を移動します */\\ntransform: rotate(45deg) translate(100px, 100px);\\n/* まず平行移動 (100, 100) し、次に 45 度回転します */\\ntransform: translate(100px, 100px) rotate(45deg);\\n</code></pre>\\n<p>注: 回転すると座標系も回転するため、その後の変形効果に影響を与える可能性があります。</p>\\n<p>次の例はこの点をよく示しています</p>\\n<iframe src=\\\"http://mdrs.yuanjin.tech/html/css-manual/multi-transform.html\\\" style=\\\"height:600px;\\\"></iframe>\\n<h1 id=\\\"%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B8%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%A8%E3%82%A2%E3%83%8B%E3%83%A1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3\\\" tabindex=\\\"-1\\\">トランジションとアニメーション</h1>\\n<p>トランジションとアニメーションを使用して CSS プロパティの変更をよりスムーズに行う</p>\\n<p><strong>トランジションとアニメーションは、すべての CSS プロパティに影響を与えることはできません</strong>、色、幅と高さ、フォント サイズなどの数値プロパティにのみ影響します。</p>\\n<h2 id=\\\"transition\\\" tabindex=\\\"-1\\\">transition</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition\\\">MDN 詳細ドキュメント</a></p>\\n</blockquote>\\n<pre><code class=\\\"language-css\\\">transition: 遷移属性の持続時間 遷移関数の遷移遅延。;\\n</code></pre>\\n<ul>\\n<li><strong>transition プロパティ</strong></li>\\n</ul>\\n<p>トランジションを適用する CSS プロパティ。たとえば、<code>transform</code>と入力すると、トランジションが <strong>transform</strong> 属性にのみ適用されることを意味します。</p>\\n<p><code>all</code>を入力するか空白のままにすると、トランジションがすべての CSS 属性に適用されることを意味します。</p>\\n<ul>\\n<li><strong>間隔</strong></li>\\n</ul>\\n<p>CSS プロパティの変更の継続時間は単位である必要があります。たとえば、<code>3s</code>は 3 秒を意味し、<code>0.5s</code>または<code>500ms</code>は 500 ミリ秒を意味します。</p>\\n<ul>\\n<li><strong>遷移関数</strong></li>\\n</ul>\\n<p>これは本質的に CSS プロパティを変更するベジェ曲線関数であり、通常はプリセット値を直接使用します。</p>\\n<p><code>ease-in-out</code>: スムーズな開始、スムーズな終了</p>\\n<p><code>linear</code>: 線形変化</p>\\n<p><code>ease-in</code>: スムーズなスタートのみ</p>\\n<p><code>ease-out</code>: スムーズなエンディングのみ</p>\\n<ul>\\n<li><strong>移行遅延</strong></li>\\n</ul>\\n<p>記述ルールはデュレーションと同じで、トランジションエフェクトがトリガーされるまでの遅延時間を示します。これが入力されていない場合、遅延は発生しません。</p>\\n<p><strong>JS では、要素の <code>transitionstart</code> および <code>transitionend</code> イベントをリッスンして、トランジションの開始時と終了時に別のことを行うことができます</strong></p>\\n<h2 id=\\\"%E3%82%A2%E3%83%8B%E3%83%A1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3\\\" tabindex=\\\"-1\\\">アニメーション</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Animations\\\">MDN 詳細ドキュメント</a></p>\\n</blockquote>\\n<p><strong>アニメーションの本質は、事前定義された一連の CSS 変更ルールと、そのルールに名前を付けることです</strong></p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210513172902.png\\\" alt=\\\"image-20210513172902413\\\"></p>\\n<p>その後、他の要素は次のようなルールを使用できます。</p>\\n<pre><code class=\\\"language-css\\\">animation: ルール名の長さ;\\n</code></pre>\\n<p>ルールを適用するときに詳細情報を指定することもできます</p>\\n<pre><code class=\\\"language-css\\\">animation: ルール名、継続時間、繰り返し回数、時間関数、アニメーションの方向、遅延時間;\\n</code></pre>\\n<p>いくつかの詳細:</p>\\n<ul>\\n<li>ルールを定義する場合、<code>0%</code>を<code>from</code>として記述できます</li>\\n<li>ルールを定義する場合、<code>100%</code>を<code>to</code>と書くことができます。</li>\\n<li>繰り返し回数が<code>無限</code>の場合、無限繰り返しを意味します</li>\\n<li>アニメーションの方向が<code>交互</code>の場合、交互の逆方向を意味します。1 回目は順方向、2 回目は逆方向、3 回目は順方向、4 回目は逆方向、というようになります。</li>\\n</ul>\\n<p><strong>JS では、要素の <code>animationstart</code> および <code>animationnend</code> イベントをリッスンして、トランジションの開始時と終了時に別の処理を行うことができます</strong></p>\\n<h1 id=\\\"%E3%81%9D%E3%81%AE%E4%BB%96\\\" tabindex=\\\"-1\\\">その他</h1>\\n<h2 id=\\\"%E3%83%9C%E3%83%83%E3%82%AF%E3%82%B9%E3%81%AE%E3%82%B5%E3%82%A4%E3%82%BA%E8%A8%AD%E5%AE%9A\\\" tabindex=\\\"-1\\\">ボックスのサイズ設定</h2>\\n<p>百聞は一見に如かず</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210514150015.png\\\" alt=\\\"image-20210514150015660\\\"></p>\\n<p>サイズを制御するには<code>border-box</code>を使用する方がより直感的であるため、多くの Web サイトでは次のコードを追加します。</p>\\n<pre><code class=\\\"language-css\\\">* {\\n  margin: 0;\\n  padding: 0;\\n  box-sizing: border-box;\\n}\\n</code></pre>\\n<h2 id=\\\"%E3%83%95%E3%82%A9%E3%83%B3%E3%83%88%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3\\\" tabindex=\\\"-1\\\">フォントアイコン</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@font-face\\\">MDN font-face ディレクティブ</a></p>\\n</blockquote>\\n<p>css3 には <code>font-face</code> ディレクティブが追加されており、Web フォントをロードできるようになります。</p>\\n<p>最も一般的なアプリケーションはフォント アイコンです。</p>\\n<p><strong>フォント アイコンは基本的にテキストです。つまり、色は <code>color</code> によって設定され、サイズは <code>font-size</code> によって設定されます</strong></p>\\n<p>中国で最も一般的に使用されているフォント アイコン プラットフォームは [Alibaba Vector Icon Library] (https://www.iconfont.cn/) です。</p>\\n<p>プラットフォームにログインすると、すべてのフォントアイコンを無料で使用できます</p>\\n<h2 id=\\\"%E7%94%BB%E5%83%8F%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E3%81%AE%E9%81%A9%E5%BF%9C\\\" tabindex=\\\"-1\\\">画像コンテンツの適応</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/object-fit\\\">MDN 詳細ドキュメント</a></p>\\n</blockquote>\\n<p>css3 属性 <code>object-fit</code> は、マルチメディア コンテンツと要素が適応する方法を制御できます。これは通常、<code>img</code> 要素または <code>video</code> 要素で使用されます。</p>\\n<p>百聞は一見に如かず</p>\\n<p>下の図のすべての <code>img</code> 要素は幅と高さが固定されており、img からはみ出した部分は実際には表示されません。</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210514134908.png\\\" alt=\\\"image-20210514134908778\\\"></p>\\n<h2 id=\\\"%E3%83%93%E3%83%A5%E3%83%BC%E3%83%9D%E3%83%BC%E3%83%88%E5%8D%98%E4%BD%8D\\\" tabindex=\\\"-1\\\">ビューポート単位</h2>\\n<p>css3 は、それぞれ<code>ビューポートの幅</code>と<code>ビューポートの高さ</code>を表す単位として<code>vw</code>と<code>vh</code>の使用をサポートしています。</p>\\n<p>たとえば、<code>1vh</code>はビューポートの高さの<code>1%</code>を表し、<code>100vw</code>はビューポートの幅の<code>100%</code>を表します。</p>\\n<h2 id=\\\"%E6%93%AC%E4%BC%BC%E8%A6%81%E7%B4%A0%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF%E3%83%BC\\\" tabindex=\\\"-1\\\">擬似要素セレクター</h2>\\n<p><code>::before</code> および <code>::after</code> セレクターを使用すると、CSS を通じて 1 つの要素に対して 2 つの子要素を生成できます。</p>\\n<img src=\\\"http://mdrs.yuanjin.tech/img/20210514140049.png\\\" alt=\\\"image-20210514140049244\\\" style=\\\"zoom:50%;\\\" />\\n<p>疑似要素を使用して、HTML 内で空の要素が多すぎることを避ける</p>\\n<p><strong>疑似要素には <code>content</code> 属性が必要です。コンテンツが必要ない場合は、<code>content:\'\'</code> を設定します。</strong></p>\\n<h2 id=\\\"%E3%82%B9%E3%83%A0%E3%83%BC%E3%82%BA%E3%81%AA%E3%82%B9%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%AB\\\" tabindex=\\\"-1\\\">スムーズなスクロール</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/scroll-behavior\\\">MDN 詳細ドキュメント</a></p>\\n</blockquote>\\n<p>スクロールをよりスムーズにするには <code>scroll-behavior:smooth</code> を使用します</p>\\n<p>MDN 効果を参照</p>\\n<h1 id=\\\"%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B8%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%A8%E3%82%A2%E3%83%8B%E3%83%A1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3-1\\\" tabindex=\\\"-1\\\">トランジションとアニメーション</h1>\\n<p>トランジションとアニメーションを使用して CSS プロパティの変更をよりスムーズに行う</p>\\n<p><strong>トランジションとアニメーションは、すべての CSS プロパティに影響を与えることはできません</strong>、色、幅と高さ、フォント サイズなどの数値プロパティにのみ影響します。</p>\\n<h2 id=\\\"transition-1\\\" tabindex=\\\"-1\\\">transition</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition\\\">MDN 詳細ドキュメント</a></p>\\n</blockquote>\\n<pre><code class=\\\"language-css\\\">transition: 遷移属性の持続時間 遷移関数の遷移遅延。;\\n</code></pre>\\n<ul>\\n<li><strong>transition プロパティ</strong></li>\\n</ul>\\n<p>トランジションを適用する CSS プロパティ。たとえば、<code>transform</code>と入力すると、トランジションが <strong>transform</strong> 属性にのみ適用されることを意味します。</p>\\n<p><code>all</code>を入力するか空白のままにすると、トランジションがすべての CSS 属性に適用されることを意味します。</p>\\n<ul>\\n<li><strong>間隔</strong></li>\\n</ul>\\n<p>CSS プロパティの変更の継続時間は単位である必要があります。たとえば、<code>3s</code>は 3 秒を意味し、<code>0.5s</code>または<code>500ms</code>は 500 ミリ秒を意味します。</p>\\n<ul>\\n<li><strong>遷移関数</strong></li>\\n</ul>\\n<p>これは本質的に CSS プロパティを変更するベジェ曲線関数であり、通常はプリセット値を直接使用します。</p>\\n<p><code>ease-in-out</code>: スムーズな開始、スムーズな終了</p>\\n<p><code>linear</code>: 線形変化</p>\\n<p><code>ease-in</code>: スムーズなスタートのみ</p>\\n<p><code>ease-out</code>: スムーズなエンディングのみ</p>\\n<ul>\\n<li><strong>移行遅延</strong></li>\\n</ul>\\n<p>記述ルールはデュレーションと同じで、トランジションエフェクトがトリガーされるまでの遅延時間を示します。これが入力されていない場合、遅延は発生しません。</p>\\n<p><strong>JS では、要素の <code>transitionstart</code> および <code>transitionend</code> イベントをリッスンして、トランジションの開始時と終了時に別のことを行うことができます</strong></p>\\n<h2 id=\\\"%E3%82%A2%E3%83%8B%E3%83%A1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3-1\\\" tabindex=\\\"-1\\\">アニメーション</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Animations\\\">MDN 詳細ドキュメント</a></p>\\n</blockquote>\\n<p><strong>アニメーションの本質は、事前定義された一連の CSS 変更ルールと、そのルールに名前を付けることです</strong></p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210513172902.png\\\" alt=\\\"image-20210513172902413\\\"></p>\\n<p>その後、他の要素は次のようなルールを使用できます。</p>\\n<pre><code class=\\\"language-css\\\">animation: ルール名の長さ;\\n</code></pre>\\n<p>ルールを適用するときに詳細情報を指定することもできます</p>\\n<pre><code class=\\\"language-css\\\">animation: ルール名、継続時間、繰り返し回数、時間関数、アニメーションの方向、遅延時間;\\n</code></pre>\\n<p>いくつかの詳細:</p>\\n<ul>\\n<li>ルールを定義する場合、<code>0%</code>を<code>from</code>として記述できます</li>\\n<li>ルールを定義する場合、<code>100%</code>を<code>to</code>と書くことができます。</li>\\n<li>繰り返し回数が<code>無限</code>の場合、無限繰り返しを意味します</li>\\n<li>アニメーションの方向が<code>交互</code>の場合、交互の逆方向を意味します。1 回目は順方向、2 回目は逆方向、3 回目は順方向、4 回目は逆方向、というようになります。</li>\\n</ul>\\n<p><strong>JS では、要素の <code>animationstart</code> および <code>animationnend</code> イベントをリッスンして、トランジションの開始時と終了時に別の処理を行うことができます</strong></p>\\n<h1 id=\\\"%E3%81%9D%E3%81%AE%E4%BB%96-1\\\" tabindex=\\\"-1\\\">その他</h1>\\n<h2 id=\\\"%E3%83%9C%E3%83%83%E3%82%AF%E3%82%B9%E3%81%AE%E3%82%B5%E3%82%A4%E3%82%BA%E8%A8%AD%E5%AE%9A-1\\\" tabindex=\\\"-1\\\">ボックスのサイズ設定</h2>\\n<p>百聞は一見に如かず</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210514150015.png\\\" alt=\\\"image-20210514150015660\\\"></p>\\n<p>サイズを制御するには<code>border-box</code>を使用する方がより直感的であるため、多くの Web サイトでは次のコードを追加します。</p>\\n<pre><code class=\\\"language-css\\\">* {\\n  margin: 0;\\n  padding: 0;\\n  box-sizing: border-box;\\n}\\n</code></pre>\\n<h2 id=\\\"%E3%83%95%E3%82%A9%E3%83%B3%E3%83%88%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3-1\\\" tabindex=\\\"-1\\\">フォントアイコン</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@font-face\\\">MDN font-face ディレクティブ</a></p>\\n</blockquote>\\n<p>css3 には <code>font-face</code> ディレクティブが追加されており、Web フォントをロードできるようになります。</p>\\n<p>最も一般的なアプリケーションはフォント アイコンです。</p>\\n<p><strong>フォント アイコンは基本的にテキストです。つまり、色は <code>color</code> によって設定され、サイズは <code>font-size</code> によって設定されます</strong></p>\\n<p>中国で最も一般的に使用されているフォント アイコン プラットフォームは [Alibaba Vector Icon Library] (https://www.iconfont.cn/) です。</p>\\n<p>プラットフォームにログインすると、すべてのフォントアイコンを無料で使用できます</p>\\n<h2 id=\\\"%E7%94%BB%E5%83%8F%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E3%81%AE%E9%81%A9%E5%BF%9C-1\\\" tabindex=\\\"-1\\\">画像コンテンツの適応</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/object-fit\\\">MDN 詳細ドキュメント</a></p>\\n</blockquote>\\n<p>css3 属性 <code>object-fit</code> は、マルチメディア コンテンツと要素が適応する方法を制御できます。これは通常、<code>img</code> 要素または <code>video</code> 要素で使用されます。</p>\\n<p>百聞は一見に如かず</p>\\n<p>下の図のすべての <code>img</code> 要素は幅と高さが固定されており、img からはみ出した部分は実際には表示されません。</p>\\n<p><img src=\\\"http://mdrs.yuanjin.tech/img/20210514134908.png\\\" alt=\\\"image-20210514134908778\\\"></p>\\n<h2 id=\\\"%E3%83%93%E3%83%A5%E3%83%BC%E3%83%9D%E3%83%BC%E3%83%88%E5%8D%98%E4%BD%8D-1\\\" tabindex=\\\"-1\\\">ビューポート単位</h2>\\n<p>css3 は、それぞれ<code>ビューポートの幅</code>と<code>ビューポートの高さ</code>を表す単位として<code>vw</code>と<code>vh</code>の使用をサポートしています。</p>\\n<p>たとえば、<code>1vh</code>はビューポートの高さの<code>1%</code>を表し、<code>100vw</code>はビューポートの幅の<code>100%</code>を表します。</p>\\n<h2 id=\\\"%E6%93%AC%E4%BC%BC%E8%A6%81%E7%B4%A0%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF%E3%83%BC-1\\\" tabindex=\\\"-1\\\">擬似要素セレクター</h2>\\n<p><code>::before</code> および <code>::after</code> セレクターを使用すると、CSS を通じて 1 つの要素に対して 2 つの子要素を生成できます。</p>\\n<img src=\\\"http://mdrs.yuanjin.tech/img/20210514140049.png\\\" alt=\\\"image-20210514140049244\\\" style=\\\"zoom:50%;\\\" />\\n<p>疑似要素を使用して、HTML 内で空の要素が多すぎることを避ける</p>\\n<p><strong>疑似要素には <code>content</code> 属性が必要です。コンテンツが必要ない場合は、<code>content:\'\'</code> を設定します。</strong></p>\\n<h2 id=\\\"%E3%82%B9%E3%83%A0%E3%83%BC%E3%82%BA%E3%81%AA%E3%82%B9%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%AB-1\\\" tabindex=\\\"-1\\\">スムーズなスクロール</h2>\\n<blockquote>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/scroll-behavior\\\">MDN 詳細ドキュメント</a></p>\\n</blockquote>\\n<p>スクロールをよりスムーズにするには <code>scroll-behavior:smooth</code> を使用します</p>\\n<p>MDN 効果を参照</p>\\n\"','Y','/img/CSS.png','2','4','2024-09-16','2024-09-16 13:34:34','2024-09-23 16:13:49',65),(5,'webpack原理','クラシックなエンジニアリング パッケージング ツールの原理を理解する','[{\"anchor\":\"webpack\",\"name\":\"webpack\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E3%81%AA%E3%81%9C%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E5%8C%96\",\"name\":\"なぜエンジニア化\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E5%8E%9F%E7%90%86\",\"name\":\"原理\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E5%8E%9F%E7%90%86\",\"name\":\"コンパイル原理\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"1.-%E5%88%9D%E6%9C%9F%E5%8C%96\",\"name\":\"1. 初期化\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"2.-%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB\",\"name\":\"2. コンパイル\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"3.-emit\",\"name\":\"3. emit\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"loader\",\"name\":\"loader\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"plugins\",\"name\":\"plugins\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"webpack.config\",\"name\":\"webpack.config\",\"tag\":\"h2\",\"children\":[]}]}]','\"<h1 id=\\\"webpack\\\" tabindex=\\\"-1\\\">webpack</h1>\\n<h2 id=\\\"%E3%81%AA%E3%81%9C%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E5%8C%96\\\" tabindex=\\\"-1\\\">なぜエンジニア化</h2>\\n<p><strong>注: ノード環境はローカル ファイルを読み取るため、この問題は発生しません</strong>\\n<code>devtime</code>:</p>\\n<ol>\\n<li>モジュールの粒度が細かい</li>\\n<li>さまざまなモジュール標準 <strong>CommonJs、ESModule</strong> を直接実装する</li>\\n<li>新しい構文 <strong>ESNext</strong> を使用する</li>\\n</ol>\\n<p><code>runtime</code>:</p>\\n<ol>\\n<li>ファイルが少ないほど良い: リクエストも少なくなる 2.小 ​​ さいサイズ: 圧縮</li>\\n<li>乱雑であればあるほど良い: ロジックを改ざんしたくないし、コピーされたくない。</li>\\n<li>高い執行効率</li>\\n</ol>\\n<h2 id=\\\"%E5%8E%9F%E7%90%86\\\" tabindex=\\\"-1\\\">原理</h2>\\n<p>コンパイル結果</p>\\n<pre><code class=\\\"language-ts\\\">//関数環境を通じてグローバル変数を汚染しないようにする\\n;(function (modules) {\\n  const cachedModules = {}\\n  //ノード環境と同様の require を定義し、js コードを実行して、エクスポートを返します。\\n  function __webpack_require(path) {\\n    if (cachedModules[path]) {\\n      return cachedModules[path].exports\\n    }\\n    const module = (cachedModules[path] = {\\n      id: path,\\n      loaded: false,\\n      exports: {},\\n    })\\n    const exports = module.exports\\n    modules[path].call(exports, module, exports, __webpack_require)\\n    module.loaded = true\\n    return module.exports\\n  }\\n  __webpack_require.entry = &quot;&quot;\\n  __webpack_require.cache = cachedModules\\n  return __webpack_require((__webpack_require.entry = &quot;./src/index.js&quot;))\\n})({\\n  //ノード環境と同様の Commonjs インポート\\n  // _temp(module,exports, require,__dirname,__filename)只能说除了__dirname,__filename,都一样\\n  &quot;./src/a.js&quot;: function (module, exports, require) {\\n    //  const a = 1\\n    //  console.log(a);\\n    //  module.exports = {\\n    // \\ta\\n    //  }\\n    //ただし、これを行うと、使用されるコンソール出力が現在の js になります。\\n    //これは絶対によくないです。eval は新しい仮想環境を開くことと同じです。\\n    eval(\\n      `\\n\\t\\t\\tconst a = 1\\n\\t\\t\\tconsole.log(a);\\n\\t\\t\\tmodule.exports = {\\n\\t\\t\\t   a\\n\\t\\t\\t} \\n\\t\\t\\t` + &quot;//# sourceURL=webpack:///./src/a.js?&quot;\\n    )\\n  },\\n  &quot;./src/b.js&quot;: function (module, exports, require) {\\n    const b = 2\\n    exports.b = 2\\n  },\\n  &quot;./src/index.js&quot;: function (module, exports, require) {\\n    const a = require(&quot;./src/a.js&quot;)\\n    const b = require(&quot;./src/b.js&quot;)\\n    console.log(a)\\n    console.log(b)\\n  },\\n})\\n</code></pre>\\n<h2 id=\\\"%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E5%8E%9F%E7%90%86\\\" tabindex=\\\"-1\\\">コンパイル原理</h2>\\n<h3 id=\\\"1.-%E5%88%9D%E6%9C%9F%E5%8C%96\\\" tabindex=\\\"-1\\\">1. 初期化</h3>\\n<p><strong>ビルド</strong></p>\\n<p>CSS の<code>computed style</code>と同様に、cli パラメーター、webpack.config.js、およびデフォルト設定がマージされて、最終的な設定オブジェクトが生成されます。<code>yargs</code> ライブラリに依存する。</p>\\n<h3 id=\\\"2.-%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB\\\" tabindex=\\\"-1\\\">2. コンパイル</h3>\\n<ol>\\n<li><code>chunk</code>を作る\\n<strong>what’s chunk?</strong>\\nentry に従って、すべての依存関係を見つけます。各 entry は chunk に対応します</li>\\n</ol>\\n<pre><code class=\\\"language-ts\\\">interface chunk {\\n  name: &quot;main&quot; //メインのentry\\n  id: string //開発環境はnameであり、本番環境は数字になります。\\n  hash: string //chunk assetsを生成するとき,すべてのファイルの内容に基づいてchunk hashが生成されます。\\n}\\n</code></pre>\\n<ol start=\\\"2\\\">\\n<li>依存関係を構築</li>\\n</ol>\\n<pre><code class=\\\"language-ts\\\">interface IChunkModules {\\n  //通常、これはパスです。完全な相対パスを均一に変換します，./src/**/* ./node_modules/**/*\\n  [moduleId: string]: string //转换后的代码\\n}\\nconst moduleCache: IChunkModules = {}\\nfunction createDepencies(entryPath) {\\n  //1. モジュールがロードされているかどうかを確認する\\n  if (moduleCache[entryPath]) {\\n    return\\n  }\\n  //2. 解析\\n  // 1) コンテンツを読む\\n  const content = fs.readFileSync(entryPath)\\n  // 2) AST分析 これはツリー構造です\\n  const astResult = AST(content)\\n  // 3) ツリーをloop，すべての依存関係を取得する(require,import),完全な相対パスとして記録される\\n  const dependencies: string[] = loopTree(astResult)\\n  // 4) 依存関数を置き換える require=&gt;__webpack_require\\n  // 5）置き換えたコードを保存します\\n  moduleCache[entryPath] = content.replaceAll(&quot;require&quot;, &quot;__webpack_require&quot;) //肯定不能这样写吧\\n  // 6) 再帰dependencies,深さ優先\\n  dependencies.forEach((path) =&gt; createDepencies(path))\\n}\\n</code></pre>\\n<ol start=\\\"3\\\">\\n<li><code>chunk assets</code>を作成\\n<code>chunk</code>のモジュールに基づいてリソース リストを生成します。各項目は特定のファイルに対応します。<code>bundle</code>とも呼ばれます</li>\\n</ol>\\n<pre><code class=\\\"language-ts\\\">{\\n\\t[ファイル名: string]:文件内容\\n\\t\'./dist/bundle.js\':(function (modules){})({\\n\\t   \'./src/a.js\':function (module,exports,require){\\n\\t\\t\\teval(`\\n\\t\\t\\tconst a = 1\\n\\t\\t\\tconsole.log(a);\\n\\t\\t\\tmodule.exports = {\\n\\t\\t\\t   a\\n\\t\\t\\t}\\n\\t\\t\\t`+&quot;//# sourceURL=webpack:///./src/a.js?&quot;);\\n\\t\\t},\\n})\\n</code></pre>\\n<ol start=\\\"4\\\">\\n<li>chunk assets マージ\\nchunk assets をマージして,総 hash を生成する</li>\\n</ol>\\n<h3 id=\\\"3.-emit\\\" tabindex=\\\"-1\\\">3. emit</h3>\\n<p>fs を通じて chunk assets を emit</p>\\n<h2 id=\\\"loader\\\" tabindex=\\\"-1\\\">loader</h2>\\n<p>本质: ファイル内容=&gt;js 内容</p>\\n<p>config</p>\\n<pre><code class=\\\"language-ts\\\">  module: {\\n    rules: [\\n      {\\n        test: /\\\\.tsx?$/, //pathマッチ\\n        use: [\\n          {\\n            loader: [&quot;ts-loader&quot;],\\n            options: {\\n\\t\\t\\t\\t//Param\\n\\t\\t\\t},\\n          },\\n        ],\\n        exclude: /node_modules/,\\n      },\\n    ],\\n  },\\n</code></pre>\\n<p><strong>注:loaders は後ろから呼び出す。 decorator と同じ</strong></p>\\n<pre><code class=\\\"language-ts\\\">{\\n  module: {\\n    rules: [\\n      {\\n        test: /\\\\.js/,\\n        use: [&quot;./src/loaders/testloader/loader&quot;, &quot;./src/loaders/testloader/loader2&quot;],\\n      },\\n      {\\n        test: /test\\\\.js/,\\n        use: [&quot;./src/loaders/testloader/loader3&quot;, &quot;./src/loaders/testloader/loader2&quot;],\\n      },\\n    ]\\n  }\\n}\\n\\n// 结果\\n2\\n3\\n2\\n1\\n\\n// 原理\\n\\nlet fscontent = xxx\\nconst rules = []\\n///\\\\.js/マッチ成功\\nrules.push(...[&quot;./src/loaders/testloader/loader&quot;, &quot;./src/loaders/testloader/loader2&quot;])\\n///test\\\\.js/ マッチ成功\\nrules.push(...[&quot;./src/loaders/testloader/loader3&quot;, &quot;./src/loaders/testloader/loader2&quot;])\\n\\nfor (let i = rules.length - 1; i + 1; i--) {\\n  const loader = require(rules[i])\\n  //fs の読み取り内容をローダーに渡します\\n  fscontent = loader(fscontent)\\n}\\nreturn fscontent\\n</code></pre>\\n<p>例 css loader</p>\\n<pre><code class=\\\"language-ts\\\">//entry.js\\nrequire(&quot;./style/index.css&quot;)\\n//require 自体は CSS を読み取れない必要があります\\n//Webpack はファイルの内容を確実に読み取ることができます。抽象 AST 解析でエラーが発生します。\\n//つまり、ローダー経由でのみ、ファイルの内容 =&gt; 解析できません (js 内容)\\n\\n// webpack.config.js\\n//\\n {\\n        test: /\\\\.css/,\\n        use: [&quot;./src/loaders/cssLoader&quot;],\\n }\\n\\n //loader\\n module.exports = function (sourceCode) {\\n  const res = `\\n    const style = document.createElement(&quot;style&quot;)\\n    style.innerHTML = \\\\`${sourceCode}\\\\`\\n    document.head.appendChild(style)\\n    module.exports = \\\\`${sourceCode}\\\\`\\n  `\\n  //   console.log(res)\\n  return res\\n}\\n</code></pre>\\n<h2 id=\\\"plugins\\\" tabindex=\\\"-1\\\">plugins</h2>\\n<p>loaders とは異なり、plugins は、Webpack コンパイル プロセスで hooks を処理するために使用されます。</p>\\n<pre><code class=\\\"language-ts\\\">import { Compilation, Compiler } from &quot;webpack&quot;\\n\\nclass Compiler {\\n  //初期化フェーズで作成される\\n  //コンパイルと出力操作は内部で作成された Compilation によって完了します\\n  // 監視時に再コンパイルするとコンパイルが再作成されるだけです\\n}\\n//バンドルサイズをカウントするプラグイン\\nclass MyPlugin {\\n  //コンパイラを作成した後、apply が実行されます。\\n  apply(compiler: Compiler) {\\n    compiler.hooks.emit.tap(&quot;MyFilePlugin&quot;, (compilation) =&gt; {\\n      const assets = Object.keys(compilation.assets)\\n      const res = assets\\n        .map((x) =&gt; {\\n          const size = compilation.assets[x].size()\\n\\n          return `[${x}]:\\n    \\t  size:${size / 1000}kb\\n    \\t`\\n        })\\n        .join(&quot;\\\\n\\\\n&quot;)\\n      compilation.assets[this.filmeName] = {\\n        source() {\\n          return res\\n        },\\n        size() {\\n          return Buffer.from(res).byteLength\\n        },\\n      }\\n    })\\n  }\\n}\\n</code></pre>\\n<h2 id=\\\"webpack.config\\\" tabindex=\\\"-1\\\">webpack.config</h2>\\n<p>関数も使える</p>\\n<pre><code class=\\\"language-ts\\\">module.export = (env) =&gt; {\\n  return {\\n    entry: {\\n      main: &quot;./src/index.js&quot;,\\n    },\\n  }\\n}\\n</code></pre>\\n\"','Y','/img/webpack.png','1','4','2024-09-16','2024-09-16 13:34:34','2024-09-23 16:16:56',67),(6,'node package manager','一般的なパッケージマネージャーとその違い','[{\"anchor\":\"npm-node-package-manager\",\"name\":\"npm node package manager\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%AE%E8%A8%AD%E5%AE%9A\",\"name\":\"ダウンロードソースの設定\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\".gitignore\",\"name\":\".gitignore\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"npm-install\",\"name\":\"npm install\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-npm-init\",\"name\":\"配置文件 npm init\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"package.json\",\"name\":\"package.json\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"package-lock.json\",\"name\":\"package-lock.json\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"%E8%AF%AD%E4%B9%89%E7%89%88%E6%9C%AC\",\"name\":\"语义版本\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"script\",\"name\":\"script\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"json-%E4%BD%BF%E7%94%A8\",\"name\":\"json 使用\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E5%91%BD%E4%BB%A4\",\"name\":\"命令\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"publish\",\"name\":\"publish\",\"tag\":\"h2\",\"children\":[]}]},{\"anchor\":\"yarn\",\"name\":\"yarn\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89\",\"name\":\"コマンド\",\"tag\":\"h2\",\"children\":[]}]},{\"anchor\":\"cnpm\",\"name\":\"cnpm\",\"tag\":\"h1\",\"children\":[]},{\"anchor\":\"nvm\",\"name\":\"nvm\",\"tag\":\"h1\",\"children\":[]},{\"anchor\":\"pnpm\",\"name\":\"pnpm\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"pnpm-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\",\"name\":\"pnpm 目录结构\",\"tag\":\"h2\",\"children\":[]}]}]','\"<h1 id=\\\"npm-node-package-manager\\\" tabindex=\\\"-1\\\">npm node package manager</h1>\\n<h2 id=\\\"%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%AE%E8%A8%AD%E5%AE%9A\\\" tabindex=\\\"-1\\\">ダウンロードソースの設定</h2>\\n<p>npm config set registry https://registry.npm.taobao.org\\nnmp config get registry</p>\\n<h2 id=\\\".gitignore\\\" tabindex=\\\"-1\\\">.gitignore</h2>\\n<p>node_modules\\nソースコードは node_modules を無視する</p>\\n<h2 id=\\\"npm-install\\\" tabindex=\\\"-1\\\">npm install</h2>\\n<pre><code class=\\\"language-ts\\\">//複数\\nnpm install axios jquery\\nnpm i axios jquery\\n\\n// 以前は、package.json に保存するには --save/-S を追加する必要がありましたが、現在はその必要がありません。\\nnpm i prettier -D/--save-dev 安装到 dev 里面\\nnpm i typescript --global/-g\\n\\n// 実稼働環境パッケージのみをインストールする\\nnpm i --production\\n\\n// 一部のパッケージは cli を提供します\\n// 現時点では、これらのコマンドは、node_module/.bin に存在し、npx (非グローバル インストール) を通じて実行されます。\\n// usr/appdata/roaming/npm\\nnpx\\n\\n</code></pre>\\n<h2 id=\\\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-npm-init\\\" tabindex=\\\"-1\\\">配置文件 npm init</h2>\\n<h3 id=\\\"package.json\\\" tabindex=\\\"-1\\\">package.json</h3>\\n<p>ほとんどは名前を見ればわかると思いますので省略させていただきます。検索手順は次のとおりです</p>\\n<pre><code class=\\\"language-tex\\\">\\nrequire(\'jquery\') =&gt;\\n 1.ファイルとして探す。node_modules/jquery.js見つからない場合は2に回る\\n 2.パッケージとして探す。 package.json が存在するかどうかを確認し、main が構成されている場合は、`node_modules/jquery/${main}.js`を探す。ないなら、 `node_modules/jquery/index.js`を探す。\\n なかったら、3に回ります。\\n 3.父のファイルに戻って繰り返します\\n</code></pre>\\n<h3 id=\\\"package-lock.json\\\" tabindex=\\\"-1\\\">package-lock.json</h3>\\n<p>場合によっては、依存関係が複雑すぎて、異なるパッケージが同じパッケージの小さいバージョンに依存し、さまざまな競合が発生することがあります。\\nlock は、このプロジェクトのすべての正確な依存関係を記録します。\\nプロジェクトに package-lock.json が存在する場合は、package-lock.json の内容がインストールされます。存在しない場合は、package.json がインストールされます。</p>\\n<h2 id=\\\"%E8%AF%AD%E4%B9%89%E7%89%88%E6%9C%AC\\\" tabindex=\\\"-1\\\">语义版本</h2>\\n<p>パッケージに依存するパッケージを作成すると、他の人があなたのパッケージをインストールするときに、その人がインストールするパッケージがあなたのものと同じか最新のものになるようにしますか?</p>\\n<pre><code class=\\\"language-tex\\\">   &gt; 大于版本\\n\\t  &gt;=\\n\\t  &lt;\\n\\t  &lt;=\\n\\t  - 1.2.1-3.4.1 の间\\n\\t  x  1.1.x  　パッチのバージョンは自由\\n\\t  ~  ~1.1.6  パッチのバージョン&gt;=6\\n\\t  ^  ^4.4.0  メインバージョンは変更しない\\n\\t  *  lastest\\n</code></pre>\\n<h2 id=\\\"script\\\" tabindex=\\\"-1\\\">script</h2>\\n<pre><code class=\\\"language-tex\\\">     npxはスクリプト内で省略できます\\n     start、test、stopはrun省略できます\\n     npm start デフォルトのエントリserve.js\\n\\n\\n     ## 環境変数\\n     1. 永久設定 process.env.NODE_ENV (NODE_ENV 変数をシステム環境変数に追加します) お勧めしない\\n     2. 临时设置 windows: set NODE_ENV=development\\n                 mac: export NODE_ENV=development\\n</code></pre>\\n<pre><code class=\\\"language-json\\\">    start: &quot;nodemon script/start.js&quot;\\n</code></pre>\\n<h2 id=\\\"json-%E4%BD%BF%E7%94%A8\\\" tabindex=\\\"-1\\\">json 使用</h2>\\n<pre><code class=\\\"language-js\\\">const json = require(&quot;./package.json&quot;)\\n</code></pre>\\n<h2 id=\\\"%E5%91%BD%E4%BB%A4\\\" tabindex=\\\"-1\\\">命令</h2>\\n<ol>\\n<li>\\n<p>最新バージョンを正確にインストールする\\nnpm i --save-exact/-E package &lt;=&gt; &quot;konva&quot;: &quot;9.3.6&quot;</p>\\n</li>\\n<li>\\n<p>バージョンの指定\\nnpm i lodash@2.1.1</p>\\n</li>\\n<li>\\n<p>インストールパスを問い合わせる\\nnpm root [-g]</p>\\n</li>\\n<li>\\n<p>パッケージ情報を確認する（公式サイトを直接確認）\\nnpm view vue\\nview aliases:v info show</p>\\n</li>\\n<li>\\n<p>インストールパッケージを表示する\\nnpm list [-g] [--depth=\'依存の深さ\']\\nlist aliases:ls la ll</p>\\n</li>\\n<li>\\n<p>更新可能なパッケージを表示する\\nnpm outdated</p>\\n</li>\\n<li>\\n<p>更新\\nnpm update [-g] [package]\\nupdate aliases: up, upgrade</p>\\n</li>\\n<li>\\n<p>アンインストール\\nnpm uninstall [-g] package</p>\\n</li>\\n<li>\\n<p>npm config ls [-l] [--json] 查看生效的配置</p>\\n</li>\\n<li>\\n<p>npm config get/set/delete 配置 npm config get registry</p>\\n</li>\\n<li>\\n<p>依存関係パッケージの脆弱性を表示する\\nnpm audit</p>\\n</li>\\n<li>\\n<p>このパッケージがインストールされた理由を確認する\\nnpm explain vue</p>\\n</li>\\n</ol>\\n<p>npm 更新 :\\nnpm i npm -g\\nnpm update -g npm</p>\\n<h2 id=\\\"publish\\\" tabindex=\\\"-1\\\">publish</h2>\\n<pre><code class=\\\"language-tex\\\">npm公式サイトのアカウント登録\\nnpm cli 登録\\nnpm login/logout\\nnpm whoami\\n\\npackjsonを埋める\\n\\nadd LICENSE http://choosealicense.online/appendix\\nadd README.MD\\nnpm publish\\n</code></pre>\\n<h1 id=\\\"yarn\\\" tabindex=\\\"-1\\\">yarn</h1>\\n<p>当時の npm は非常にゴミで、シリアルダウンロード、非フラットな構造、煩雑な出力、そして npx がありませんでした...\\nそこで、Facebook、Chrome、その他の大手企業は、npm の運用を最適化するために糸を作成しました。\\n現在、npm と yarn には大きな違いはありません</p>\\n<h2 id=\\\"%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89\\\" tabindex=\\\"-1\\\">コマンド</h2>\\n<pre><code class=\\\"language-tex\\\">yarn init --yes/-y\\n\\nyarn [global/-g] add package@ package [--dev/-D] [--exact/-E]\\n\\nすべてインストールする\\nyarn install [--production/--prod]\\n\\n(start,stop,test)は run 省略できます\\nyarn run script\\nyarn run package 内蔵コマンド　(npxはこれを参考した)\\n\\n\\nパッケージのコマンド フォルダーを表示する\\nyarn [global/-g] bin\\nyarn info package\\nyarn [global/-g] list [--depth]\\n\\nyarn outdate\\n\\nyarn [global/-g] update\\n\\nyarn remove package\\n\\nyarn check 查看 package.json 与 yarn.lock 是否匹配\\nyarn audit\\nyarn why\\n\\n\\n\\nscaffold\\nyarn create\\n\\n過去のやり方\\n\\n1.   yarn add create-react-app -g\\n2.   create-react-app my-app\\n\\n今\\nyarn create react-app my-app\\n\\n</code></pre>\\n<h1 id=\\\"cnpm\\\" tabindex=\\\"-1\\\">cnpm</h1>\\n<p>npm config set registry の出現によって、意味なくなった。</p>\\n<h1 id=\\\"nvm\\\" tabindex=\\\"-1\\\">nvm</h1>\\n<p>node バージョン管理ツール</p>\\n<p>nvm install\\nnvm use</p>\\n<h1 id=\\\"pnpm\\\" tabindex=\\\"-1\\\">pnpm</h1>\\n<p>単純な node_modules ディレクトリ\\n間接的な依存関係の使用を避ける\\nディスク使用量を削減する</p>\\n<p>原理: 現在のディスク コピーのルート ディレクトリに直接ダウンロードします。各インストール中に存在する場合は、コピーの代わりにリンクが直接作成されます (ショートカットと同様)。これは、パッケージのコピーが存在することを意味します。ツリー構造に戻る</p>\\n<pre><code>[拡張] ファイルの本質は外部ストレージへのポインタです\\n削除されるのはポインタであるため、削除はサイズとは関係ありません。これがデータを復元できる理由でもあります。\\n\\nハード リンク: Unix オペレーティング システムでは、新しいポインタが現在の場所を指すことは参照と同等です。\\nハードリンクが Windows でもサポートされるようになりました\\nmklink /h リンク名ターゲット ファイル (フォルダーではなくファイルのみを指定できます)\\n削除してもハードリンクには影響しません\\nソフトリンク (シンボリックリンク): フォルダーまたはファイルを指します。\\nmklin /d リンク名ターゲットファイル\\nシンボリック リンクは常にリンクされたコンテンツに関連付けられます\\n\\nノード内: ノードはハードリンクかどうかを区別できません。\\nソフトリンクは元の場所を見つけて実行します\\n\\n</code></pre>\\n<h2 id=\\\"pnpm-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\\\" tabindex=\\\"-1\\\">pnpm 目录结构</h2>\\n<pre><code class=\\\"language-tex\\\">node_modules\\n  .pnpm\\n\\t node_modules\\n     registry\\n\\t\\t  node_modules\\n\\n   librarys\\n</code></pre>\\n\"','Y','/img/NPM.png','1','4','2024-09-16','2024-09-16 13:34:34','2024-09-23 16:19:15',74);
/*!40000 ALTER TABLE `blog_jp` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blogtype`
--

DROP TABLE IF EXISTS `blogtype`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `blogtype` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `count` int DEFAULT '0',
  `order` int NOT NULL,
  `isValid` varchar(1) NOT NULL DEFAULT 'Y',
  `createdAt` datetime NOT NULL,
  `updatedAt` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=76 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blogtype`
--

LOCK TABLES `blogtype` WRITE;
/*!40000 ALTER TABLE `blogtype` DISABLE KEYS */;
INSERT INTO `blogtype` VALUES (62,'HTML',0,1,'Y','2024-09-04 12:55:33','2024-09-04 12:55:33'),(63,'Node',4,5,'Y','2024-09-04 12:55:33','2024-09-16 13:34:34'),(64,'JavaScript',4,2,'Y','2024-09-04 12:55:33','2024-09-16 13:34:34'),(65,'CSS',4,3,'Y','2024-09-04 12:55:33','2024-09-16 13:34:34'),(66,'TypeScript',0,4,'Y','2024-09-04 12:55:33','2024-09-04 12:55:33'),(67,'Webpack',4,6,'Y','2024-09-04 12:55:33','2024-09-16 13:34:34'),(68,'Vue',0,7,'Y','2024-09-04 12:55:33','2024-09-04 12:55:33'),(69,'React',0,8,'Y','2024-09-04 12:55:33','2024-09-04 12:55:33'),(70,'Algorithm',0,9,'Y','2024-09-04 12:55:33','2024-09-04 12:55:33'),(71,'Design Pattern',0,10,'Y','2024-09-04 12:55:33','2024-09-04 12:55:33'),(72,'Browser',0,11,'Y','2024-09-04 12:55:33','2024-09-04 12:55:33'),(73,'Network',4,12,'Y','2024-09-04 12:55:33','2024-09-16 13:34:34'),(74,'NPM',4,13,'Y','2024-09-04 12:55:33','2024-09-16 13:34:34'),(75,'Others',0,14,'Y','2024-09-04 12:55:33','2024-09-04 12:55:33');
/*!40000 ALTER TABLE `blogtype` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `message`
--

DROP TABLE IF EXISTS `message`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `message` (
  `id` int NOT NULL AUTO_INCREMENT,
  `nickName` varchar(255) NOT NULL,
  `content` varchar(255) NOT NULL,
  `avatar` varchar(255) NOT NULL,
  `isValid` varchar(255) NOT NULL DEFAULT 'Y',
  `createdAt` datetime NOT NULL,
  `updatedAt` datetime NOT NULL,
  `blogId` int DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `blogId` (`blogId`),
  CONSTRAINT `message_ibfk_1` FOREIGN KEY (`blogId`) REFERENCES `blog` (`id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `message`
--

LOCK TABLES `message` WRITE;
/*!40000 ALTER TABLE `message` DISABLE KEYS */;
INSERT INTO `message` VALUES (1,'mock','nodeって侮らないな','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar4.jpg','Y','2024-09-16 15:45:33','2024-09-16 15:45:33',2),(2,'mock','+1','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar8.jpg','Y','2024-09-16 15:45:33','2024-09-16 15:45:33',2),(3,'mock','excellent','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar2.jpg','Y','2024-09-16 15:45:33','2024-09-16 15:45:33',2),(4,'mock','谢谢博主','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar6.jpg','Y','2024-09-16 15:45:33','2024-09-16 15:45:33',3),(5,'mock','原来这就是HTTP','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar6.jpg','Y','2024-09-16 15:45:33','2024-09-16 15:45:33',1),(6,'mock','知らなかったjs知識だ','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar4.jpg','Y','2024-09-16 15:45:33','2024-09-16 15:45:33',3),(7,'mock','+1','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar8.jpg','Y','2024-09-16 15:45:33','2024-09-16 15:45:33',3),(8,'mock','excellent','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar2.jpg','Y','2024-09-16 15:45:33','2024-09-16 15:45:33',3),(9,'mock','原来这就是Node','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar6.jpg','Y','2024-09-16 15:45:33','2024-09-16 15:45:33',2),(10,'mock','+1','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar8.jpg','Y','2024-09-16 15:45:33','2024-09-16 15:45:33',1),(11,'mock','good','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar2.jpg','Y','2024-09-16 15:45:33','2024-09-16 15:45:33',1),(12,'mock','なるほど','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar4.jpg','Y','2024-09-16 15:45:33','2024-09-16 15:45:33',1),(13,'mock','谢谢博主','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar6.jpg','Y','2024-09-16 15:45:33','2024-09-16 15:45:33',4),(14,'mock','css3便利ですね','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar4.jpg','Y','2024-09-16 15:45:33','2024-09-16 15:45:33',4),(15,'mock','+1','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar8.jpg','Y','2024-09-16 15:45:33','2024-09-16 15:45:33',4),(16,'mock','usefull','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar2.jpg','Y','2024-09-16 15:45:33','2024-09-16 15:45:33',4),(17,'mock','谢谢博主','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar6.jpg','Y','2024-09-16 15:45:33','2024-09-16 15:45:33',5),(18,'mock','これがwebpackの原理か','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar4.jpg','Y','2024-09-16 15:45:33','2024-09-16 15:45:33',5),(19,'mock','+1','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar8.jpg','Y','2024-09-16 15:45:33','2024-09-16 15:45:33',5),(20,'mock','usefull','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar2.jpg','Y','2024-09-16 15:45:33','2024-09-16 15:45:33',5),(21,'mock','谢谢博主','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar6.jpg','Y','2024-09-16 15:45:33','2024-09-16 15:45:33',6),(22,'mock','npm','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar4.jpg','Y','2024-09-16 15:45:33','2024-09-16 15:45:33',6),(23,'mock','+1','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar8.jpg','Y','2024-09-16 15:45:33','2024-09-16 15:45:33',6),(24,'mock','good','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar2.jpg','Y','2024-09-16 15:45:33','2024-09-16 15:45:33',6),(25,'mock','ようやっと作り終えたか','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar6.jpg','Y','2024-09-16 16:05:25','2024-09-16 16:05:25',NULL),(26,'mock','頑張ったな','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar4.jpg','Y','2024-09-16 16:05:25','2024-09-16 16:05:25',NULL),(27,'mock','不错哦','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar8.jpg','Y','2024-09-16 16:05:25','2024-09-16 16:05:25',NULL),(28,'mock','good','https://qiheizhiya.oss-cn-shenzhen.aliyuncs.com/image/avatar2.jpg','Y','2024-09-16 16:05:25','2024-09-16 16:05:25',NULL);
/*!40000 ALTER TABLE `message` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `project`
--

DROP TABLE IF EXISTS `project`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `project` (
  `id` int NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `description` varchar(255) DEFAULT '0',
  `toc` text NOT NULL,
  `htmlContent` text NOT NULL,
  `isValid` varchar(1) NOT NULL DEFAULT 'Y',
  `thumb` varchar(255) NOT NULL,
  `scanNumber` varchar(255) NOT NULL,
  `commentNumber` varchar(255) NOT NULL,
  `createDate` varchar(255) NOT NULL,
  `createdAt` datetime NOT NULL,
  `updatedAt` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `project`
--

LOCK TABLES `project` WRITE;
/*!40000 ALTER TABLE `project` DISABLE KEYS */;
INSERT INTO `project` VALUES (1,'第一个vue页面','使用vue做的第一个看板','[{\"anchor\":\"%E7%AC%AC%E4%B8%80%E4%B8%AA-vue-%E9%A1%B5%E9%9D%A2\",\"name\":\"第一个 Vue 页面\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E6%95%88%E6%9E%9C\",\"name\":\"效果\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"template\",\"name\":\"template\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"options\",\"name\":\"options\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"data\",\"name\":\"data\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"method\",\"name\":\"method\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"computed\",\"name\":\"computed\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"%E6%80%BB%E7%BB%93\",\"name\":\"总结\",\"tag\":\"h2\",\"children\":[]}]}]','\"<h1 id=\\\"%E7%AC%AC%E4%B8%80%E4%B8%AA-vue-%E9%A1%B5%E9%9D%A2\\\" tabindex=\\\"-1\\\">第一个 Vue 页面</h1>\\n<h2 id=\\\"%E6%95%88%E6%9E%9C\\\" tabindex=\\\"-1\\\">效果</h2>\\n<p><img src=\\\"C:%5CUsers%5CASUS%5CDesktop%5Cproject%5CfirstVue.gif\\\" alt=\\\"firstVue\\\"></p>\\n<h2 id=\\\"template\\\" tabindex=\\\"-1\\\">template</h2>\\n<p>写死的东西太多,computed 传参也不太好,这种 style 我感觉换类可能更舒服一点,table-column里面的v-if感觉纯属浪费……</p>\\n<pre><code class=\\\"language-ts\\\"> &lt;el-table\\n      ref=&quot;lightTable&quot;\\n      tooltip-effect=&quot;dark&quot;\\n      style=&quot;width: 100%&quot;\\n      :height=&quot;tableHeight&quot;\\n      border\\n      :data=&quot;tableData&quot;\\n      @select=&quot;hide&quot;\\n      @cell-mouse-enter=&quot;getMSG&quot;\\n      :header-cell-class-name=&quot;cellClass&quot;\\n    &gt;\\n      &lt;el-table-column type=&quot;selection&quot; align=&quot;center&quot;&gt; &lt;/el-table-column&gt;\\n\\n      &lt;el-table-column label=&quot;线体&quot; align=&quot;center&quot; prop=&quot;line&quot;&gt;\\n      &lt;/el-table-column&gt;\\n      &lt;el-table-column\\n        v-for=&quot;i in stations&quot;\\n        :key=&quot;i&quot;\\n        :label=&quot;i&quot;\\n        align=&quot;center&quot;\\n        :prop=&quot;i&quot;\\n      &gt;\\n        &lt;template slot-scope=&quot;scope&quot;&gt;\\n          &lt;div\\n            v-if=&quot;scope.row[scope.column.property] === \'bgcRunning\'&quot;\\n            @click=&quot;turnTOWeb&quot;\\n            :style=&quot;bgcComputed(\'bgcRunning\')&quot;\\n          &gt;\\n            &amp;emsp;\\n          &lt;/div&gt;\\n          &lt;div\\n            v-else-if=&quot;scope.row[scope.column.property] == \'bgcWaitRepair\'&quot;\\n            :style=&quot;bgcComputed(\'bgcWaitRepair\')&quot;\\n            @click=&quot;turnTOWeb&quot;\\n          &gt;\\n            &amp;emsp;\\n          &lt;/div&gt;\\n\\t\\t//   ...\\n\\n        &lt;/template&gt;\\n      &lt;/el-table-column&gt;\\n    &lt;/el-table&gt;\\n</code></pre>\\n<h2 id=\\\"options\\\" tabindex=\\\"-1\\\">options</h2>\\n<h3 id=\\\"data\\\" tabindex=\\\"-1\\\">data</h3>\\n<p>东西太多，太乱。style的设置放data里也没用必要。类型也有错误的。</p>\\n<pre><code class=\\\"language-ts\\\">  data(){\\n\\treturn {\\n\\t\\t    tableData: [],\\n\\t\\t\\tstations: [], //列\\n\\t\\t\\tlines: [],    //行\\n\\t\\t\\tdisLine: [],  //只显示被勾选的行\\n\\t\\t\\ttableHeight: &quot;1000px&quot;,\\n\\t\\t\\ttimer1: null,  //短轮训timer\\n\\t\\t\\ttimer2: null,\\n\\t\\t\\t/**\\n\\t\\t\\t * @type {\\n\\t\\t\\t *     {\\n\\t\\t\\t *        [line,statin]: value\\n\\t\\t\\t *     }\\n\\t\\t\\t * }\\n\\t\\t\\t */\\n\\t\\t\\tBoardInfo: &quot;&quot;,  //存放灯号信息,明明是个对象 \\n\\t\\t\\tbgcRunning: [{ &quot;background-color&quot;: &quot;#00B050&quot; }], //正常运行的特殊颜色，下同\\n\\t\\t\\tbgc: [\\n\\t\\t\\t\\t//通用属性\\n\\t\\t\\t\\t{ &quot;border-radius&quot;: &quot;50%&quot; },\\n\\t\\t\\t\\t{ width: &quot;20px&quot; },\\n\\t\\t\\t\\t{ height: &quot;20px&quot; },\\n\\t\\t\\t\\t{ &quot;margin-left&quot;: &quot;50%&quot; },\\n\\t\\t\\t\\t{ transform: &quot;translateX(-50%)&quot; },\\n\\t\\t\\t],\\n\\t\\t\\tbgc5MinsUnRepair: [{ &quot;background-color&quot;: &quot;red&quot; }],\\n\\t\\t\\tbgc5MinsRepairing: [{ &quot;background-color&quot;: &quot;#FF9900&quot; }],\\n\\t\\t\\tbgcGrayFlash: [{ &quot;background-color&quot;: &quot;gray&quot; }],\\n\\t\\t\\tbgcBlueFlash: [{ &quot;background-color&quot;: &quot;#0000FF&quot; }],\\n\\t\\t\\tbgcWaitRepair: [{ &quot;background-color&quot;: &quot;red&quot; }],\\n\\t\\t\\tbgcNoEquipment: [{ &quot;background-color&quot;: &quot;white&quot; }],\\n\\t\\t\\tbgcUnUse: [{ &quot;background-color&quot;: &quot;#A6A6A6&quot; }],\\n\\t\\t\\tbgcBlue: [{ &quot;background-color&quot;: &quot;#0000FF&quot; }],\\n\\t\\t\\tbgcRepairing: [{ &quot;background-color&quot;: &quot;#FF9900&quot; }],\\n\\n\\t\\t\\tbgcContrl: true, //控制闪烁\\n\\t}\\n  }\\n</code></pre>\\n<h3 id=\\\"method\\\" tabindex=\\\"-1\\\">method</h3>\\n<pre><code class=\\\"language-ts\\\">//Boardinfo=&gt;tableData\\n\\nmethods:{\\n\\t//太可怕了，居然会操作字符串,而且需要分if else吗\\nDisplay() {\\n      //显示控制，生成表格对应的json\\n      if (this.disLine.length === 0) {\\n        //全部显示\\n        var Lines = this.lines;\\n        var tboby = &quot;&quot;;\\n        var Boardinfo = this.BoardInfo;\\n        var Station = this.stations;\\n        for (var i = 0; i &lt; Lines.length; i++) {\\n          if (i != 0) {\\n            tboby += \'{&quot;line&quot;:&quot;\' + Lines[i] + \'&quot;,\';\\n          } else {\\n            tboby += \'[{&quot;line&quot;:&quot;\' + Lines[i] + \'&quot;,\';\\n          }\\n\\n          for (var j = 0; j &lt; Station.length; j++) {\\n            var station = Station[j];\\n            var bgc = &quot;&quot;;\\n            //判断JSON Array中是否包含value2=line value3=station。如果有的话，那么就取当前JSON中的值\\n            var JsonKey = Lines[i] + &quot;,&quot; + station;\\n            if (this.isHasAttr(Boardinfo, JsonKey)) {\\n              switch (Boardinfo[JsonKey]) {\\n                case &quot;1&quot;:\\n                  bgc = &quot;bgcRunning&quot;;\\n                  break;\\n                case &quot;2&quot;:\\n                  bgc = &quot;bgcWaitRepair&quot;;\\n                  break;\\n                case &quot;3&quot;:\\n                  bgc = &quot;bgc5MinsUnRepair&quot;;\\n                  break;\\n                case &quot;4&quot;:\\n                  bgc = &quot;bgcRepairing&quot;;\\n                  break;\\n                case &quot;5&quot;:\\n                  bgc = &quot;bgc5MinsRepairing&quot;;\\n                  break;\\n                case &quot;6&quot;:\\n                  bgc = &quot;bgcUnUse&quot;; //bgcNoEquipment\\n                  break;\\n                case &quot;7&quot;:\\n                  bgc = &quot;bgcGrayFlash&quot;;\\n                  break;\\n                case &quot;8&quot;:\\n                  bgc = &quot;bgcBlue&quot;;\\n                  break;\\n                case &quot;9&quot;:\\n                  bgc = &quot;bgcBlueFlash&quot;;\\n                  break;\\n              }\\n            }\\n            if (j != Station.length - 1) {\\n              tboby += \'&quot;\' + station + \'&quot;:\' + \'&quot;\' + bgc + \'&quot;,\';\\n            } else {\\n              tboby += \'&quot;\' + station + \'&quot;:\' + \'&quot;\' + bgc + \'&quot;\';\\n            }\\n          }\\n          if (i != Lines.length - 1) {\\n            tboby += &quot;},&quot;;\\n          } else {\\n            tboby += &quot;}]&quot;;\\n          }\\n        }\\n        this.tableData = JSON.parse(tboby);\\n      } else {\\n        var Lines = this.disLine;\\n        var tboby = &quot;&quot;;\\n        var Boardinfo = this.BoardInfo;\\n        var Station = this.stations;\\n        for (var i = 0; i &lt; Lines.length; i++) {\\n          if (i != 0) {\\n            tboby += \'{&quot;line&quot;:&quot;\' + Lines[i] + \'&quot;,\';\\n          } else {\\n            tboby += \'[{&quot;line&quot;:&quot;\' + Lines[i] + \'&quot;,\';\\n          }\\n        //   ……\\n        this.tableData = JSON.parse(tboby);\\n      }\\n    },\\n\\t //通过时间间隔改变控制属性，结合computed中 bgcComputed达到闪烁目的\\n\\t bgcControl() {\\n      this.bgcContrl = !this.bgcContrl;\\n    },\\n}\\n</code></pre>\\n<h3 id=\\\"computed\\\" tabindex=\\\"-1\\\">computed</h3>\\n<pre><code class=\\\"language-ts\\\">  computed: {\\n    bgcComputed() {\\n      return function (x) {\\n        var BGC = [];\\n        switch (x) {\\n          case &quot;bgcRunning&quot;:\\n            BGC = this.bgcRunning;\\n            return this.bgc.concat(BGC);\\n          // break;\\n          case &quot;bgcWaitRepair&quot;:\\n            BGC = this.bgcWaitRepair;\\n            return this.bgc.concat(BGC);\\n          // break;\\n          case &quot;bgc5MinsUnRepair&quot;:\\n            BGC = this.bgc5MinsUnRepair;\\n            break;\\n          case &quot;bgcRepairing&quot;:\\n            BGC = this.bgcRepairing;\\n            // break;\\n            return this.bgc.concat(BGC);\\n          case &quot;bgc5MinsRepairing&quot;:\\n            BGC = this.bgc5MinsRepairing;\\n            break;\\n          case &quot;bgcUnUse&quot;:\\n            BGC = this.bgcUnUse;\\n            // break;\\n            return this.bgc.concat(BGC);\\n          case &quot;bgcGrayFlash&quot;:\\n            BGC = this.bgcGrayFlash;\\n            break;\\n          case &quot;bgcBlue&quot;:\\n            BGC = this.bgcBlue;\\n            return this.bgc.concat(BGC);\\n          // break;\\n          case &quot;bgcBlueFlash&quot;:\\n            BGC = this.bgcBlueFlash;\\n            break;\\n        }\\n        var res = this.bgcContrl ? this.bgc.concat(BGC) : this.bgc;\\n        return res;\\n      };\\n    },\\n  },\\n</code></pre>\\n<h2 id=\\\"%E6%80%BB%E7%BB%93\\\" tabindex=\\\"-1\\\">总结</h2>\\n<p>现在看起来，这个页面没用任何难度。但对于新手来说，特别是ES6,CSS也不熟悉的人来说还是有点难度的。</p>\\n<p>如果现在的我来写,直接计算出全部表格数据，通过computed控制显示</p>\\n<pre><code class=\\\"language-ts\\\">  data(){\\n\\treturn {\\n\\t\\t//获取行列直接计算出全部的数据\\n\\t\\ttableData:[],\\n\\t\\tdisplayLines:[]\\n\\t}\\n  },\\n  methods:{\\n\\t setTableData(){\\n\\t\\t const res = [] \\n\\t\\t for(let i of Object.keys(BoardInfo)){\\n\\t\\t\\tconst [line,station] = i.split(&quot;,&quot;)\\n\\t\\t\\tres.push({line,station,value:BoardInfo[i]})\\n\\t\\t }\\n\\t\\t this.tableData = res\\n\\t }\\n  },\\n  computed:{\\n\\tdisplayTableData(){\\n        return this.tableData.filter(x=&gt;displayLines.includes(x.line))\\n\\t}\\n  }\\n\\n</code></pre>\\n<p>闪烁很明显使用简单的animation就完成了,用js控制真没必要</p>\\n<pre><code class=\\\"language-less\\\">@bgcWaitRepair: red;\\n.bgc{\\n\\t&amp;.bgcWaitRepair{\\n\\t\\tbackground:@bgcWaitRepair;\\n\\t\\tanimation: flicker .3s infinite;\\n\\t}\\n}\\n@keyframes flicker {\\n\\t0%{\\n\\t\\topacity:1;\\n\\t}\\n\\t50%{\\n\\t\\topacity:0;\\n\\t}\\n\\t100%{\\n\\t\\topacity:1;\\n\\t}\\n};\\n</code></pre>\\n\"','Y','/img/firstVue.gif','2','0','2024-09-23','2024-09-22 16:45:17','2024-09-23 16:35:41'),(2,'human management','简单的人员管理系统','[{\"anchor\":\"%E4%BA%BA%E5%91%98%E7%AE%A1%E7%90%86\",\"name\":\"人员管理\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E6%95%88%E6%9E%9C\",\"name\":\"效果\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E5%90%8E%E7%AB%AF\",\"name\":\"后端\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E5%89%8D%E7%AB%AF\",\"name\":\"前端\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E6%80%BB%E7%BB%93\",\"name\":\"总结\",\"tag\":\"h2\",\"children\":[]}]}]','\"<h1 id=\\\"%E4%BA%BA%E5%91%98%E7%AE%A1%E7%90%86\\\" tabindex=\\\"-1\\\">人员管理</h1>\\n<h2 id=\\\"%E6%95%88%E6%9E%9C\\\" tabindex=\\\"-1\\\">效果</h2>\\n<p><img src=\\\"C:%5CUsers%5CASUS%5CDesktop%5Cproject%5Chuman.gif\\\" alt=\\\"human\\\"></p>\\n<h2 id=\\\"%E5%90%8E%E7%AB%AF\\\" tabindex=\\\"-1\\\">后端</h2>\\n<p>公司使用还是.Net Framework4.0,\\nRoute</p>\\n<pre><code class=\\\"language-C#\\\">//  Route 对应 handler  xxx.ashx\\n public class basicInfo : IHttpHandler{\\n basicInfo_BLL bInfo = new basicInfo_BLL();\\n public void ProcessRequest(HttpContext context)\\n        {\\n\\t\\t\\t//CORS\\n            context.Response.ContentType = &quot;text/plain&quot;;\\n            context.Response.AddHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);\\n            context.Response.AddHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;GET, POST, PUT, DELETE, OPTIONS&quot;);\\n            context.Response.AddHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Content-Type&quot;);\\n            string action = context.Request[&quot;action&quot;];\\n\\t\\t\\t//路由还不是Rest风格\\n            switch (action)\\n            {\\n                case &quot;getTable&quot;:\\n                    getTable(context);\\n                    break;\\n                // ...\\n\\n            }\\n}\\nprivate void getTable(HttpContext context){\\n            //自己写的Action,统一处理错误\\n            Try(() =&gt;\\n            {\\n                context.Response.Write(bInfo.search(context.Request[&quot;dept&quot;], context.Request[&quot;id&quot;],...);\\n            });\\n}\\n\\n}\\n\\n\\n</code></pre>\\n<p>BLL 略</p>\\n<pre><code class=\\\"language-C#\\\">    public class basicInfo_BLL\\n    {\\n        basicInfo_DAL bInfo = new basicInfo_DAL();\\n        public string search(string dept,string id,string name,string line,string position)\\n        {\\n            string condition = getCondition(dept, &quot;dept&quot;) + getCondition(id, &quot;id&quot;) + getCondition(name, &quot;cName&quot;) + getCondition(line, &quot;line&quot;) + getCondition(position,&quot;position&quot;);\\n            return bInfo.search(condition);\\n \\n        }\\n\\t\\t...\\n\\t}\\n</code></pre>\\n<p>DAL 以直接的sql语句+Linq为主</p>\\n<pre><code class=\\\"language-ts\\\">  public List&lt;basicData_Model&gt; SearchList(string condition){\\n\\n     string factory = &quot;MSM0&quot;;\\n            string cmd2 = string.Format(@&quot;select * from\\n(\\n     select company,dept,id,cName,eName,line,position,gender,enterDate,leaveDate,homeAddress,telephone,wechat,email,emergencyContact,station,responseRegion,factory,region,rownumber,EMSIdentity \\n\\t from HM_BasicInfo where isValid =\'Y\' and factory=\'{1}\' {0}\\n) A\\nleft join\\n(\\n\\t select value2 ,value6 shiftAB,term hmProperty,rowNum EMSRowNum,value1,value4 from EMS_Maintain \\n\\t\\twhere system_type=\'打卡看板\' and value4 = \'MSM0\'  and term in (\'领班\',\'出席信息\',\'组长\',\'工程师\') and validYN = \'Y\'\\n) B on id = value2 and  factory = value4 and region = value1 and EMSIdentity=hmProperty order by rownumber desc&quot;, condition, factory);\\n\\n            List&lt;basicData_Model&gt; list = SqlHelper.GetList&lt;basicData_Model&gt;(cmd2).Select(x =&gt;\\n            {\\n                x.emergencyContact = x.emergencyContact.Trim();\\n                x.leaveDate = System.Text.RegularExpressions.Regex.IsMatch(x.leaveDate, @&quot;1900.*&quot;) ? &quot;&quot; : DateTime.Parse(x.leaveDate).ToString(&quot;yyyy-MM-dd&quot;);\\n\\n                x.enterDate = DateTime.Parse(x.enterDate).ToString(&quot;yyyy-MM-dd&quot;);\\n                return x;\\n            }).ToList();\\n            return list;\\n        }\\n</code></pre>\\n<h2 id=\\\"%E5%89%8D%E7%AB%AF\\\" tabindex=\\\"-1\\\">前端</h2>\\n<p>慢慢开始接近我现在的风格了,但是还差很远，这个初始化就感觉回到了jQuery,完全没用理解到模块化的好处。</p>\\n<pre><code class=\\\"language-ts\\\">     init(){\\n           let labels =[\'公司别\',\'部门\',\'工号\',\'姓名\',\'英文名\',\'线别\',\'职务\',\'性别\',\\n           \'入职日\',\'离职日期\',\'户籍地址\',\'电话\',\'微信\',\'邮箱\',\'紧急联络人\',\'班别\',\'人员属性\',\'设备别\',\'负责区域(线体)\',\'厂别\',\'车间\']\\n           let prop = [\'company\',\'dept\',\'id\',\'cName\',\'eName\',\'line\',\'position\',\'gender\',\'enterDate\',\\n           \'leaveDate\',\'homeAddress\',\'telephone\',\'wechat\',\'email\',\'emergencyContact\',\'shiftAB\',\'hmProperty\',\'station\',\'responseRegion\',\'factory\',\'region\']\\n           let table = {\\n                label:[],\\n                height:window.innerHeight*0.75,\\n                data:[]\\n           }\\n           let widthArr = {\\n               \'company\':\'70px\',\\n               \'line\':\'70px\',\\n               \'gender\':\'50px\',\\n               \'shiftAB\':\'50px\',\\n               \'station\':\'200px\',\\n               \'responseRegion\':\'200px\',\\n               \'homeAddress\':\'180px\'\\n           }\\n           for(let i = 0;i&lt;labels.length;i++){\\n              table.label.push({label:labels[i],prop:prop[i],width:widthArr[prop[i]]})\\n           }\\n           this.tableData = table   \\n           this.paginationData = {\\n               sizes : [10,15,20,30],\\n               size:20,\\n               total:null,\\n               currentPage:1\\n           }\\n           Promise.resolve().then(()=&gt;{\\n               let array = [\'homeAddress\',\'telephone\',\'wechat\',\'email\',\'emergencyContact\',\'station\',\'responseRegion\']\\n               this.editableData = array\\n               this.testInput = {\\n                    email:x=&gt; /^([a-zA-Z]|[0-9])(\\\\w|\\\\-)+@[a-zA-Z0-9]+\\\\.([a-zA-Z]{2,4})$/.test(x),\\n                    telephone:x=&gt;/^1\\\\d{10}$/.test(x),\\n                    wechat:x=&gt;/^1\\\\d{10}$/.test(x),\\n                    emergencyContact:x=&gt;/^1[3|4|5|8][0-9]\\\\d{4,8}$/.test(x),\\n                    homeAddress:x=&gt;/[\\\\u4e00-\\\\u9fa5]+/.test(x),\\n               }\\n\\n           }).then(()=&gt;{\\n               this.getSelectInfo()\\n           })\\n           \\n\\n        },\\n</code></pre>\\n<p>当然也开始尝试写一些共用方法了，虽然不忍直视,而且还是CommonJs那种导入，当然webpack无所谓，也没用用户ts。</p>\\n<pre><code class=\\\"language-ts\\\">async function getData(url,param={},type=\'post\'){\\n    let axios = require(\'axios\')\\n    function PostData(){\\n        let qs = require(\'qs\')\\n        return  qs.stringify(param,{ indices: false })\\n    }\\n   return axios[type](url,type===&quot;post&quot;?PostData():{params:param}).then(value=&gt;value.data,reason=&gt;{console.error(reason); throw reason}).catch((e)=&gt;{})\\n}\\n\\nasync function excelOut(name=\'excel\',header=[],series=[]){\\n    const ExportJsonExcel = require(&quot;js-export-excel&quot;);\\n    let option = {\\n        fileName:name,\\n        datas:[{\\n            sheetHeader:header,\\n            // sheetName: &quot;sheet&quot;,\\n            sheetData:series\\n         }]\\n    }\\n    setTimeout(() =&gt; {\\n        let toExcel = new ExportJsonExcel(option); //new\\n        toExcel.saveExcel();\\n    }, 0); \\n}\\n</code></pre>\\n<p>数据管理混乱，很明显感觉数据应该在父组件里。不管是formData，又或者是tableData。</p>\\n<pre><code class=\\\"language-ts\\\">&lt;template&gt;\\n    &lt;div&gt;\\n        &lt;Selects ref=&quot;Inputs&quot; @updateTable=&quot;updateTable&quot; @saveData=&quot;saveData&quot; @excelOut=&quot;excelOut&quot; @addItem=&quot;addItem&quot; /&gt;\\n        &lt;Table ref=&quot;Table&quot; @rowClick=&quot;updateInputs&quot; style=&quot;margin:1.5% 0&quot;/&gt;     \\n    &lt;/div&gt;\\n&lt;/template&gt;\\n&lt;script&gt;\\nexport default {\\n    components:{\\n        Selects:()=&gt;import(\'@/components/basicInfo/selects\'),\\n        Table:()=&gt;import(\'@/components/basicInfo/basicInfoTB\')\\n    },\\n    methods:{\\n        \\n        updateTable(value){},\\n        updateInputs(row){\\n             this.$refs.Inputs.setInputValue(row)\\n        },\\n        saveData(){\\n            this.$refs.Table.saveData()\\n        },\\n        excelOut(){\\n            this.$refs.Table.excelOut()\\n        },\\n        addItem(row){\\n            this.$refs.Table.addItem(row)\\n        },\\n    }\\n}\\n</code></pre>\\n<h2 id=\\\"%E6%80%BB%E7%BB%93\\\" tabindex=\\\"-1\\\">总结</h2>\\n<p>此时的自己应该是对vue有了一定的了解，也可以实现一定的功能，但是模块化思想，组件之间的关系还是非常欠缺。总之就是非常混乱，缺乏美感。</p>\\n\"','Y','/img/human.gif','1','0','2024-09-23','2024-09-22 16:45:17','2024-09-23 16:36:05'),(3,'wechat mini program','微信小程序记录','[{\"anchor\":\"wechat\",\"name\":\"wechat\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E8%AE%A4%E8%AF%81\",\"name\":\"认证\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"mvvm%E6%93%8D%E4%BD%9C\",\"name\":\"MVVM操作\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\",\"name\":\"基本使用\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E9%80%9A%E4%BF%A1\",\"name\":\"通信\",\"tag\":\"h3\",\"children\":[]}]}]}]','\"<h1 id=\\\"wechat\\\" tabindex=\\\"-1\\\">wechat</h1>\\n<h2 id=\\\"%E8%AE%A4%E8%AF%81\\\" tabindex=\\\"-1\\\">认证</h2>\\n<p>前端</p>\\n<pre><code class=\\\"language-ts\\\">// app.ts\\n enum LoginStatus{\\n\\tlogining = \'logining\',\\n\\tlogined = \'logined\',\\n\\tunlogin = \'unlogin\'\\n }\\n\\n async onShow(){\\n   let pages = getCurrentPages();\\n   //进入小程序\\n   if(pages.length == 0) {\\n\\t   wx.setStorageSync(\'loginStatus\',LoginStatus.logining)\\n       const res = await checkIdentity()\\n       if(!res){\\n         wx.showToast({\\n           title: \'身份认证失败\',\\n         })\\n\\t\\t  wx.setStorageSync(\'loginStatus\',LoginStatus.unlogin)\\n       }else{ \\n\\t\\t wx.setStorageSync(\'loginStatus\',LoginStatus.logined)\\n         wx.setStorageSync(\'userInfo\',{userid:res.id,token:res.token,factory:res.factory,access:res.access})\\n         wx.showToast({\\n           title: `${res.id}\\n              \\\\r\\\\nversion:${wx.getAccountInfoSync().miniProgram.version}` ,\\n         })\\n       }\\n    }\\n}\\n\\n//utils.ts\\n/**\\n * 返回工号token,根据企业微信还是手机微信统一返回固定格式\\n */\\nasync function checkIdentity(){\\n  const {environment} = await getEnvironment() as {environment:string}  \\n  if(environment &amp;&amp; environment==\'wxwork\'){\\n      return qyLogin() \\n  }else{\\n      return wxLogin()\\n  }\\n}\\n\\n/**\\n * 微信认证,就是拿code换id\\n */\\nasync function wxLogin(){\\n  const code = await new Promise(resolve=&gt;{\\n      wx.login({\\n        success:res=&gt;{\\n          resolve(res.code)\\n        },\\n      })\\n  })\\n  //自己封装了一下wx.request(),以前写的，感觉写的不是很好\\n  return requestData(`${loginUrl}login`,{code},&quot;POST&quot;,{\\n    \'content-type\': \'application/x-www-form-urlencoded\'\\n  },setSessionId) as Promise&lt;IUserInfo&gt;\\n}\\n</code></pre>\\n<p>后端也就根据code去换id,如何生成token并返回</p>\\n<pre><code class=\\\"language-c#\\\">        /// &lt;summary&gt;\\n        /// 通过openid认证\\n        /// &lt;/summary&gt;\\n        /// &lt;returns&gt;&lt;/returns&gt;\\n        public static string auth2(string code)\\n        {\\n            string res = string.Empty;\\n            string openid = GetOpenid(code);\\n            string url = string.Format(@&quot;https://qyapi.weixin.qq.com/cgi-bin/user/convert_to_userid?access_token={0}&quot;, GetAccessToken());\\n            string responseText = HttpHelper.Instance.post(url, &quot;{\\\\&quot;openid\\\\&quot;:\\\\&quot;&quot; + openid + &quot;\\\\&quot;}&quot;);\\n            WeChatUserInfoFromOpenId codeEn = JsonHelper.GetEntity&lt;WeChatUserInfoFromOpenId&gt;(responseText);\\n            if (!string.IsNullOrEmpty(codeEn.errmsg) &amp;&amp; codeEn.errmsg.Equals(&quot;ok&quot;))\\n            {\\n                res = codeEn.userid;\\n            }\\n            return res;\\n        }\\n</code></pre>\\n<p>当时写的是判断40s内有没有验证通过，现在的话，我感觉使用一个eventbus之类，可能比这个死循环要好多了</p>\\n<pre><code class=\\\"language-ts\\\">  async onShow(){\\n      wx.showLoading({title:\'加载中\'})\\n      const result = await isIdentityCheckFinished()\\n      if(!result){\\n        wx.redirectTo({\\n          \'url\':\'../errorPage/index\',\\n        })\\n        return\\n      }\\n      wx.hideLoading()\\n      this.init()\\n  }\\n\\n\\n/**\\n * 认证是否执行完成\\n */\\nconst isIdentityCheckFinished= async (count = 20)=&gt;{\\n  while(count--){\\n\\tconst status = wx.getStorageSync(\'loginStatus\')\\n\\tif(status===LoginStatus.logining){\\n       await sleep(2)\\n\\t}else{\\n\\t\\treturn wx.getStorageSync(\'loginStatus\') === LoginStatus.logined\\n\\t}\\n  }\\n  return false\\n}\\n</code></pre>\\n<h2 id=\\\"mvvm%E6%93%8D%E4%BD%9C\\\" tabindex=\\\"-1\\\">MVVM操作</h2>\\n<h3 id=\\\"%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\\\" tabindex=\\\"-1\\\">基本使用</h3>\\n<p>这就完成可以类比vue了,就是没有composition api。\\n之前vue里面的生成template的和data的方法都可以直接用,模板里面的语法也大差不差。变化也只是标签而且。</p>\\n<pre><code class=\\\"language-html\\\">   &lt;view class=&quot;inspectionItem&quot; wx:for=&quot;{{templateData}}&quot; wx:key=&quot;prop&quot;&gt; \\n      &lt;block wx:if=&quot;{{item.prop==\'remark\'}}&quot;&gt;\\n        &lt;wux-cell wx:if=&quot;{{showRemark}}&quot;&gt;\\n          &lt;view  class=&quot;InspectionItemLabel&quot; &gt;\\n              {{item.label}}\\n          &lt;/view&gt;  \\n          &lt;wux-textarea  bind:change=\'onChange\' data-prop=&quot;{{item.prop}}&quot; rows=\'3\' placeholder=\'请输入\' placeholder-style=\'font-weight:10\'&gt;&lt;/wux-textarea&gt;\\n        &lt;/wux-cell&gt; \\n      &lt;/block&gt;\\n      &lt;block wx:elif=&quot;{{item.prop==\'haveProblem\'}}&quot;&gt;\\n        &lt;wux-picker options=&quot;{{[\'是\',\'否\']}}&quot; value=&quot;{{ formData[item.prop] }}&quot;  bind:confirm=&quot;onConfirm&quot;\\n        data-prop=&quot;{{item.prop}}&quot;\\n      &gt;\\n        &lt;wux-cell  is-link extra=&quot;{{ formData[item.prop][0] }}&quot;&gt;\\n          &lt;view class=&quot;InspectionItemLabel&quot; &gt;\\n              {{item.label}}\\n          &lt;/view&gt;  \\n        &lt;/wux-cell&gt;\\n      &lt;/wux-picker&gt;\\n      &lt;/block&gt; \\n   &lt;/view&gt;\\n   ……\\n   &lt;wux-button block type=&quot;balanced&quot; wux-class=\'myButton\' bind:click=\'submit\'\\n      &gt;&lt;wux-icon type=&quot;ios-save&quot; size=&quot;16&quot; /&gt; 提交&lt;/wux-button\\n    &gt;\\n</code></pre>\\n<p>唯一不同的就是不是响应式,和React一样要手动set一下</p>\\n<pre><code class=\\\"language-ts\\\">Page({\\n   data:{\\n     formData,\\n     templateData,\\n     ……\\n   },\\n   onLoad(){\\n\\t  //调用一些后台api\\n   },\\n   //监听input的change事件\\n   onChange(){\\n\\t  ···\\n      setFormValue()\\n   },\\n    setFormValue(prop: Insection,value: any){\\n      this.setData({\\n        [`formData.${prop}`]:value\\n      })\\n   },\\n   submit(){\\n\\t  validate(this.data.formData) &amp;&amp; submitApi(this.data.formData)\\n   }\\n\\n})\\n</code></pre>\\n<h3 id=\\\"%E9%80%9A%E4%BF%A1\\\" tabindex=\\\"-1\\\">通信</h3>\\n<p>父子组件通过event的方式即可。打开也被打开页面见的通信，我一般使用<code>eventChannel</code>。经过vue的经验，可以确定这就是<code>event bus</code>,也就是和vue观察者模式类似的发布订阅模式。</p>\\n<pre><code class=\\\"language-ts\\\"> wx.navigateTo({\\n             url:\'../resolve/index\',\\n             events:{\\n               research:()=&gt;{\\n                this.getList()\\n              },\\n             },\\n            success:(res)=&gt;{\\n                res.eventChannel.emit(\'navSuccess\',item,this.data.searchCondition)\\n            }\\n})\\n\\nonLoad(){\\n\\tconst eventChannel = this.getOpenerEventChannel();\\n\\tthis.eventChannel.on(\'navSuccess\',(condition:Record&lt;string,string&gt;)=&gt;{\\n\\t\\t\\t\\tthis.setData({\\n\\t\\t\\t\\t\\tcondition\\n\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\n\\t})\\n}\\n\\n</code></pre>\\n\"','Y','/img/JS.png','1','0','2024-09-23','2024-09-22 16:45:17','2024-09-23 16:36:19'),(4,'Big Data Board','Big Data Board can see different chart about production','[{\"anchor\":\"bigdata-system\",\"name\":\"bigData System\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E6%95%88%E6%9E%9C\",\"name\":\"效果\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84\",\"name\":\"项目结构\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"prototype%E6%8B%93%E5%B1%95\",\"name\":\"prototype拓展\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95\",\"name\":\"自定义方法\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"%E6%94%B9%E5%96%84%E5%90%8E%E7%9A%84%E8%BD%AE%E6%92%AD%E6%96%B9%E6%B3%95\",\"name\":\"改善后的轮播方法\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"%E5%85%AC%E7%94%A8%E7%BB%84%E4%BB%B6\",\"name\":\"公用组件\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"echarts%E7%BB%84%E4%BB%B6\",\"name\":\"echarts组件\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"upload-excel%E7%BB%84%E4%BB%B6\",\"name\":\"upload excel组件\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"store\",\"name\":\"Store\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"route\",\"name\":\"Route\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E6%80%BB%E7%BB%93\",\"name\":\"总结\",\"tag\":\"h2\",\"children\":[]}]}]','\"<h1 id=\\\"bigdata-system\\\" tabindex=\\\"-1\\\">bigData System</h1>\\n<p>此时的自己vue的操作已经是没有问题了，但是一些模块化思想啊，逻辑就感觉很奇怪，自己也感觉自己的vue写的很不优雅。也是看了一些比较优质的代码，当时从零开始梳理了一遍vue-element-admin,在此基础上加上了新学习的typescript，开始了本次的项目。</p>\\n<h2 id=\\\"%E6%95%88%E6%9E%9C\\\" tabindex=\\\"-1\\\">效果</h2>\\n<p><img src=\\\"C:%5CUsers%5CASUS%5CDesktop%5Cproject%5Cmsp0.gif\\\" alt=\\\"msp0\\\"></p>\\n<h2 id=\\\"%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84\\\" tabindex=\\\"-1\\\">项目结构</h2>\\n<p>项目结构已经大致接近现在的项目了，但是没有Utils目录，一些工具写在了外面。对typescript不熟悉，所以types目录不存在。</p>\\n<p><img src=\\\"C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240827200012949.png\\\" alt=\\\"image-20240827200012949\\\"></p>\\n<h2 id=\\\"prototype%E6%8B%93%E5%B1%95\\\" tabindex=\\\"-1\\\">prototype拓展</h2>\\n<p>有了Typescript之后，终于可以摆脱挂在原型上没有提示了</p>\\n<pre><code class=\\\"language-ts\\\">declare module &quot;vue/types/vue&quot; {\\n  interface Vue {\\n    $message:typeof Message;\\n    $axios: typeof Axios;\\n    $echarts: EChartsHelper;\\n    $MessageBox:ElMessageBox;\\n  }\\n}\\n//main.ts\\nVue.config.productionTip = false\\nVue.prototype.$axios = Axios\\nVue.prototype.$echarts = EChartsHelper\\nVue.prototype.$MessageBox = MessageBox\\nObject.prototype[Symbol.iterator] = function * &lt;T&gt;(this:T){\\n  for(let i in this){\\n    yield {key:i,value:this[i]}\\n  }\\n}\\n</code></pre>\\n<h2 id=\\\"%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95\\\" tabindex=\\\"-1\\\">自定义方法</h2>\\n<p>此时写的Helper大部分还是为了熟悉使用</p>\\n<pre><code class=\\\"language-ts\\\">class EChartsHelper{\\n    private Mychart: EChartsType\\n    \\n    constructor(dom:HTMLElement|undefined|null,theme=\'lightGreen\'){\\n        if(dom){\\n            this.Mychart = echarts.init(dom,theme)\\n            this.Mychart.off(\'click\')\\n         }else{\\n            throw new Error(\'echarts init failed\')\\n         }  \\n    }\\n    /**\\n     * @type\\n     * 普通合并，永远不会删除组件 */\\n    updateMyChart(obj: object): void\\n    /**\\n     * @param notMerge 为true 则全部删除，默认false不写\\n     */\\n    updateMyChart(obj: object,notMerge:boolean): void\\n    /**\\n     * \\n     * @param notMerge 默认false不需要传 \\n     * @param replaceMerge 哪些组件需要替换更新——有就更新，没有就删除\\n     */\\n    updateMyChart(obj: object,{replaceMerge}: {replaceMerge: Array&lt;string&gt;|string}): void\\n    updateMyChart(obj:object,s?:any):void {\\n        if(s){\\n            if(typeof s == \'boolean\'){}\\n            else{\\n               if(s.replaceMerge &amp;&amp; (Array.isArray(s.replaceMerge)|| typeof s.replaceMerge==\'string\')){}\\n               else{\\n                   throw new Error(\'ECharts setOption params error\')\\n               }\\n            }\\n            this.Mychart.setOption(obj as echarts.EChartsCoreOption,s)\\n        }\\n        this.Mychart.setOption(obj as echarts.EChartsCoreOption)\\n    }\\n    // setOn(event: string,series=\'\',F: Function){\\n    //     this.Mychart.on(event,\'series\',()=&gt;{\\n    //         F()\\n    //     })\\n    // }\\n    setOn(event: string,F:Function): void\\n    setOn(event: string,F: Function,series: string): void\\n    setOn(event: string,F: Function,c?: any): void{\\n        if(!c){\\n            c = \'series\'\\n        }\\n        this.Mychart.on(event,c,(param: object)=&gt;{\\n                    F(param)\\n                })\\n    }\\n    setLoading(){\\n        this.Mychart.showLoading()\\n    }\\n    hideLoading(){\\n        this.Mychart.hideLoading()\\n    }\\n    triggerAction(action: string, name: string){\\n        this.Mychart.dispatchAction({type:action,name})\\n    }\\n    get chart(){\\n        return this.Mychart\\n    }\\n\\n    get width(){\\n       return this.Mychart.getWidth()*0.8\\n    }\\n    resize(){\\n        this.Mychart.resize()\\n    }\\n   dispose(){\\n       this.Mychart.dispose()\\n   }\\n   static of(dom: HTMLElement|undefined|null,theme=\'lightGreen\'){\\n        return new EChartsHelper(dom,theme)\\n    }\\n\\n}\\n</code></pre>\\n<pre><code class=\\\"language-ts\\\">class AxiosHelper{\\n     private static axios:AxiosStatic = axios\\n     static async getData(url: string): Promise&lt;any&gt;\\n     static async getData(url: string,type: string): Promise&lt;any&gt;\\n     static async getData(url: string,data:{[k: string]:any}): Promise&lt;any&gt;\\n     static async getData(url: string,data:{[k: string]:any},type: string): Promise&lt;any&gt;\\n     static async getData(url: string,b?:any,c?: string){\\n         if(b){\\n             if(typeof b == \'object\'){\\n                 if(c &amp;&amp; typeof c==\'string\'){\\n                     return this.request(url,b,c as Method)\\n                 }else{\\n                     return this.request(url,b)\\n                 }\\n             }else{\\n                 if(typeof b == \'string\'){\\n                     return this.requstUrl(url,b)\\n                 }else{\\n                    throw new Error(\'参数格式错误\')\\n                }        \\n             }\\n         }else{\\n            //  b=&quot;POST&quot; \\n             return  this.requstUrl(url)\\n         }\\n\\n     }\\n\\n     static async request(url: string,data:{} = {},type: Method =&quot;post&quot; ){\\n       return await this.axios({\\n            url: url,\\n            data: qs.stringify(data),\\n            method:type\\n         }).then(value=&gt;{\\n             if(value.data){\\n                 return value.data\\n             }else{\\n                 throw new Error(&quot;无数据&quot;+url);\\n             }\\n         },reason=&gt;{throw reason}).catch((e: Error)=&gt;{console.error(e)})\\n         \\n\\n     }\\n     static async requstUrl(url: string,b=\'POST\'){\\n        return await this.axios({\\n            url: url,\\n            method:b as Method\\n         }).then(value=&gt;{\\n             if(value.data){\\n                 return value.data\\n             }else{\\n                 throw new Error(&quot;无数据&quot;);\\n             }\\n         },reason=&gt;{throw reason}).catch((e: Error)=&gt;{console.error(e)})\\n     }\\n     static get Axios(){\\n         return this.axios\\n     }\\n\\n     \\n\\n} \\n</code></pre>\\n<p>轮播页面工具。当时想了很久才写出来。现在看起来很low就是了。</p>\\n<pre><code class=\\\"language-ts\\\">class Carousel{\\n    /**\\n     * 所有可选页面\\n     */\\n     private pageNames: string[]\\n     /**\\n      * 控制轮播开始与暂停\\n      */\\n     private canCarousel = true\\n     /**\\n      * 获取下一个轮播页面名\\n      */\\n     private nextPage: Generator&lt;string | void, void, unknown&gt; = this.getNextPage()\\n     /**\\n      * 每个页面停留时间\\n      */\\n     private interval:number;\\n     constructor(config: typeof carouselConfig){\\n        const {carouselInterval,loopIndex} = config\\n        this.interval = carouselInterval\\n        this.pageNames = loopIndex\\n     }\\n\\n    private *getNextPage(){\\n         const currentPage = getCookie(\'currentPageName\')\\n         /**\\n          * \\n          * 从循环的下一个页面开始\\n          * */\\n         let p =  this.pageNames\\n         if(p.includes(currentPage)){\\n            p = p.slice(p.indexOf(currentPage)+1)\\n            p = p.length?p:this.pageNames   \\n         }\\n        let t = this.pages(p)\\n        let res = t.next()\\n        while(true){\\n            if(res.done){\\n                t = this.pages()\\n                res = t.next()\\n            }\\n            yield res.value\\n            res = t.next()\\n        } \\n    }\\n     private *pages(pages = this.pageNames){\\n        if(!pages.length)\\n           yield \'\'\\n        \\n        for(let i of pages){\\n            yield i\\n        }\\n     }\\n     start(){\\n       this.canCarousel = true\\n       this.carousel() \\n     }\\n     // 主要逻辑其实只是这里\\n     async carousel(){\\n        const next = this.nextPage.next()\\n        if(next.value &amp;&amp; store.getters.getLoginIdentity){\\n            const path = getPathByPageName(next.value as string)\\n            this.canCarousel &amp;&amp; Router.push(path).catch(e=&gt;{\\n                Router.push({name:&quot;back&quot;})\\n                setTimeout(()=&gt;{\\n                    Router.replace(path)\\n                },500)\\n            })\\n        }\\n        await sleep(this.interval)\\n        this.canCarousel &amp;&amp; this.carousel()\\n     }\\n\\n     stopCarousel(){\\n         this.canCarousel = false\\n     }\\n     static of(){\\n         return new Carousel(carouselConfig)\\n     }\\n     setNextPage(){\\n        this.nextPage = this.getNextPage()\\n     }\\n}\\n</code></pre>\\n<p>现在看来有主要有两个大问题。</p>\\n<ol>\\n<li>违反了单一职能原则。</li>\\n</ol>\\n<p>​       明明是路由的轮播的工具，却有一大半在做无限循环。其实主要逻辑就是控制播放与停止。无限获取下一个，可以单独提出来。</p>\\n<ol start=\\\"2\\\">\\n<li>\\n<p>无法正确停止</p>\\n<p>极端的情况，调用停止的的时候，此时正在sleep，在sleep结束前再次开始，这其实没有任何意义。</p>\\n</li>\\n</ol>\\n<h3 id=\\\"%E6%94%B9%E5%96%84%E5%90%8E%E7%9A%84%E8%BD%AE%E6%92%AD%E6%96%B9%E6%B3%95\\\" tabindex=\\\"-1\\\">改善后的轮播方法</h3>\\n<p>之后也写过类似方法，是这样写的</p>\\n<p>无限Loop</p>\\n<pre><code class=\\\"language-ts\\\">type Item&lt;T&gt; = T extends Iterable&lt;infer R&gt;?R:never\\nclass LoopIteratorData&lt;T extends Iterable&lt;TItem&gt;,TItem = Item&lt;T&gt;&gt;{\\n\\tprivate _generator: Generator&lt;TItem,TItem,any&gt;\\n\\tprivate _index = 0\\n\\tprivate _destroyed = false\\n\\tconstructor(private _data:T){\\n\\t\\tthis.createGenerator()\\n\\t}\\n\\tprivate createGenerator(){\\n\\t\\tthis._generator = LoopIteratorData.createGenerator(this._data)\\n\\t\\tthis._index = 0\\n\\t}\\n\\tnext():{value:TItem,index:number}{\\n\\t\\tif(this._destroyed){\\n\\t\\t\\tthrow new Error(\'loop is over\')\\n\\t\\t}\\n\\t\\tconst value = this._generator.next()\\n\\t\\tif(!value.done){\\n\\t\\t\\treturn {value:value.value,index:this._index++}\\n\\t\\t}else{\\n\\t\\t\\tthis.createGenerator()\\n            return this.next()\\n\\t\\t}\\n\\t}\\n\\tdestory(){\\n\\t\\ttry{\\n\\t\\t\\tthis._destroyed = true\\n\\t\\t\\tthis._generator.throw(\'手动停止\')\\n\\t\\t}catch(e){\\n\\t\\t}\\n\\t}\\n    //创建生成器直接挂在了类构造器上了\\n    static createGenerator&lt;T extends Iterable&lt;TItem&gt;,TItem = Item&lt;T&gt;&gt;(data:T){\\n\\t\\tfunction *g(){\\n            for(let i of data){\\n\\t\\t\\t\\tyield i\\n\\t\\t\\t}\\n\\t\\t} \\n\\t\\treturn g() as Generator&lt;TItem,TItem,any&gt;\\n        \\n\\t}\\n}\\n</code></pre>\\n<p>轮播方法。其实<code>_loopInstance</code>也可以直接约束为  <code>interface ILoopInstance{ next():{value:TItem,index:number}}</code></p>\\n<pre><code class=\\\"language-ts\\\">interface ICarouselExecuteObject&lt;T extends Iterable&lt;TItem&gt;&gt;{\\n    exec(value: {value:TItem,index:number}):void\\n}\\n\\nclass Carousel&lt;T extends Iterable&lt;TItem&gt;&gt;{\\n    private _timer: number\\n    constructor(private _loopInstance: LoopIteratorData&lt;T&gt;,\\n                private _executeInstance: ICarouselExecuteObject&lt;T&gt;,\\n                private _interval = 5000\\n                ){}\\n    start(){\\n        if(this.isLooping){\\n            console.warn(&quot;is looping&quot;)\\n            return\\n        }\\n        this.carouselIt()\\n    }\\n    stop(){\\n        this._timer &amp;&amp; clearInterval(this._timer)\\n        this._timer = null\\n    }\\n    private carouselIt(){\\n        this._timer = setTimeout(()=&gt;{\\n            this._executeInstance.exec(_loopInstance.next())\\n            this.carouselIt()\\n        },this._interval)\\n    }\\n    get isLooping(){\\n        return !!this._timer\\n    }\\n    \\n}\\n</code></pre>\\n<p>这样不仅符合单一职能原则，还满足开闭原则，我也不关心你要轮播干啥，只有你<code>implements ICarouselExecuteObject </code>就行。这样看起来，至少现在的我还是感觉挺优雅的。</p>\\n<h2 id=\\\"%E5%85%AC%E7%94%A8%E7%BB%84%E4%BB%B6\\\" tabindex=\\\"-1\\\">公用组件</h2>\\n<h3 id=\\\"echarts%E7%BB%84%E4%BB%B6\\\" tabindex=\\\"-1\\\">echarts组件</h3>\\n<p>感觉粒度太大了，props也没有写类型，明明是ts。</p>\\n<pre><code class=\\\"language-ts\\\">export default Vue.extend({\\n    data(){\\n        return {\\n            myChart:null as null|EChartsHelper,\\n        }\\n    },\\n    props:[&quot;custom&quot;,\'dataset\'],\\n    created(){\\n       this.initPie() \\n    },\\n    beforeDestroy(){\\n        this.myChart?.dispose()\\n        this.myChart = null\\n    }\\n    ,methods:{\\n       initPie(){\\n           if(!this.custom || !this.custom.title){\\n               return\\n           }\\n           const div = document.getElementById(`${this.custom.title}`)\\n          \\n           if(!div){\\n               return      \\n           }\\n            this.myChart = EChartsHelper.of(div)\\n            this.dataset &amp;&amp; this.myChart.updateMyChart(this.dataset)\\n            this.myChart.setOn(\'click\',(params: {[k:string]:any})=&gt;{\\n                 let index = params.seriesIndex as number|undefined     \\n                 this.$emit(\'clickPie\',this.custom.title,getType(index))\\n               })\\n           }\\n           \\n       }\\n\\n    },\\n  \\n    watch:{\\n        dataset:{\\n            handler(){         \\n                this.myChart?.updateMyChart({dataset:{source:this.dataset},title})\\n            }\\n          }\\n        },\\n       async menuOpen(){ \\n           const timer = setInterval(()=&gt;{\\n               this.myChart?.resize()  \\n            },1000)\\n            setTimeout(() =&gt; {\\n                clearInterval(timer)\\n            }, 1000);      \\n        }, \\n    },\\n    \\n      computed:{\\n        ...mapGetters({\\n            menuOpen:&quot;menuOpen&quot;,\\n        }),\\n    \\n    },\\n})\\n\\n</code></pre>\\n<h3 id=\\\"upload-excel%E7%BB%84%E4%BB%B6\\\" tabindex=\\\"-1\\\">upload excel组件</h3>\\n<p>感觉读取文件内容可以提出去，或者使用Hooks之类的，可以减少代码量方便阅读</p>\\n<pre><code class=\\\"language-ts\\\">&lt;template&gt;\\n  &lt;div&gt;\\n    &lt;input ref=&quot;excel-upload-input&quot; class=&quot;excel-upload-input&quot; type=&quot;file&quot; accept=&quot;.xlsx, .xls&quot; @change=&quot;handleClick&quot;&gt;\\n     &lt;el-button :loading=&quot;loading&quot;  size=&quot;mini&quot; type=&quot;primary&quot; @click=&quot;handleUpload&quot;&gt;\\n        选择\\n      &lt;/el-button&gt;\\n      &lt;el-button size=&quot;mini&quot; type=&quot;primary&quot; @click=&quot;uploadExcel&quot;&gt;上传&lt;/el-button&gt;\\n      &lt;div class=&quot;myFile&quot;&gt;\\n            &lt;div v-if=&quot;excelData.fileName&quot; class=&quot;fileName&quot;&gt;\\n                {{excelData.fileName}} \\n                &lt;span&gt;(数据无误,请点击上传)&lt;/span&gt;\\n            &lt;/div&gt;\\n            &lt;div v-else&gt;\\n                未选择文件&lt;span&gt;(请选择上传文件)&lt;/span&gt;\\n            &lt;/div&gt;\\n      &lt;/div&gt;\\n  &lt;/div&gt;\\n&lt;/template&gt;\\n\\n&lt;script&gt;\\nimport XLSX from \'xlsx\'\\nexport default {\\n  props: {\\n     onUpload:Function\\n    ,dataFormat:{\\n        required:true,\\n        default:[],\\n        type:Array\\n    }\\n  },\\n  data() {\\n    return {\\n      loading: false,\\n      excelData: {\\n        header: null,\\n        results: null,\\n        fileName:null\\n      },\\n      \\n    }\\n  },\\n  methods: {\\n    uploadExcel(){\\n       this.onUpload &amp;&amp; this.onUpload(JSON.stringify(this.excelData.results))\\n    },\\n    generateData({ header, results }) {\\n      this.excelData.header = header\\n      results?.shift()\\n      this.excelData.results = results\\n    },\\n    handleUpload() {\\n      this.$refs[\'excel-upload-input\'].click()\\n    },\\n    handleClick(e) {\\n      const files = e.target.files\\n      const rawFile = files[0] // only use files[0]\\n      if (!rawFile) return\\n      this.readerData(rawFile)\\n    },\\n    readerData(rawFile) {\\n      const name = rawFile.name\\n      this.loading = true\\n      return new Promise((resolve, reject) =&gt; {\\n        const reader = new FileReader()  \\n        reader.onload = e =&gt; {  \\n          const data = e.target.result\\n          const workbook = XLSX.read(data, { type: \'array\' })\\n          const firstSheetName = workbook.SheetNames[0]\\n          const worksheet = workbook.Sheets[firstSheetName]\\n          const header = this.getHeaderRow(worksheet)\\n          if(this.dataFormat &amp;&amp; this.dataFormat.length){\\n              /*\\n              *@param {[{prop:string,label: string}]} ar1\\n               * @param {string[]} ar2\\n               */\\n              const checkFormat = (ar1 ,ar2)=&gt;{\\n                  if(ar1.length!=ar2.length)\\n                     return false\\n                  for(let i of ar1){\\n                      if(!ar2.includes(i.label)){\\n                          return false\\n                      }\\n                  }\\n                  return true\\n              }\\n              if(!checkFormat(this.dataFormat,header)){\\n                  this.loading = false\\n                  reject(\'上传格式有误\')\\n                  return\\n              }\\n\\n          }\\n          const results = XLSX.utils.sheet_to_json(worksheet,{header:this.dataFormat.map(v=&gt;v.prop)})\\n          this.generateData({ header, results })\\n          this.excelData.fileName = name\\n          this.loading = false\\n          resolve()\\n        }\\n        reader.readAsArrayBuffer(rawFile)\\n      }).catch(e=&gt;{\\n           this.$message({\\n                      type:\'warning\',\\n                      message:e\\n           })\\n      })\\n    },\\n    getHeaderRow(sheet) {\\n      const headers = []\\n      const range = XLSX.utils.decode_range(sheet[\'!ref\'])\\n      let C\\n      const R = range.s.r\\n      /* start in the first row */\\n      for (C = range.s.c; C &lt;= range.e.c; ++C) { /* walk every column in the range */\\n        const cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })]\\n        /* find the cell in the first row */\\n        let hdr = \'UNKNOWN \' + C // &lt;-- replace with your desired default\\n        if (cell &amp;&amp; cell.t) hdr = XLSX.utils.format_cell(cell)\\n        headers.push(hdr)\\n      }\\n      return headers\\n    },\\n    isExcel(file) {\\n      return /\\\\.(xlsx|xls|csv)$/.test(file.name)\\n    }\\n  }\\n}\\n&lt;/script&gt;\\n</code></pre>\\n<h2 id=\\\"store\\\" tabindex=\\\"-1\\\">Store</h2>\\n<p>没有分模块，还是比较混乱的，而且有些，比如url完成可以用环境变量处理，存在store感觉没有必要，最主要的作用就是存用户信息以及记录菜单是否展开，echarts的图表需要resize一下。</p>\\n<pre><code class=\\\"language-ts\\\">export default new Vuex.Store({\\n  state: {\\n    userName:null as null|string,\\n    login:false,\\n    frameLabels:null as null|Iterable&lt;{key:string,value:string|null|number}&gt;,\\n    pageName:\'S4大数据\',\\n    url:isOnline?onlineUrl:testUrl,\\n\\n    continue:true,\\n    frameLabelsTimer:null as null|number,\\n    countDownTimer:null as null|number,\\n    menuOpen:true,\\n    imgSrc:&quot;&quot;,\\n    ...\\n  },\\n   getters:{...},\\n   mutations:{...},\\n   actions:{...}\\n}\\n</code></pre>\\n<h2 id=\\\"route\\\" tabindex=\\\"-1\\\">Route</h2>\\n<p>个人感觉此项目最大的不足还是明明已经设置了路由，还要手动去设置菜单内容，还是hard code，那时候不知道route专门预留了meta的位置。</p>\\n<pre><code class=\\\"language-ts\\\">const menuName = [\'一阶\',\'二阶\',...]\\nconst menuRouter:{[k in number]:RawLocation} = {\\n    0:{\\n        name:\'step1\',params:{\\n            pageName:\'一阶\'\\n        }\\n    },\\n    1:{\\n        name:&quot;step2&quot;,\\n        params:{\\n            pageName:\'二阶\'\\n        }\\n    \\n    },\\n  ...    \\n]\\n\\n</code></pre>\\n<pre><code class=\\\"language-vue\\\">&lt;el-menu-item-group&gt;\\n      &lt;el-menu-item  v-for=&quot;(item,index) in menuName&quot; :key=&quot;index&quot; :index=&quot;getIndex(index)&quot; @click=&quot;turn2Page(index)&quot;\\n      class=&quot;S4Item&quot;&gt;{{item}}&lt;/el-menu-item&gt;\\n&lt;/el-menu-item-group&gt;\\n</code></pre>\\n<h2 id=\\\"%E6%80%BB%E7%BB%93\\\" tabindex=\\\"-1\\\">总结</h2>\\n<p>我感觉，此时期的我已经初步具备了解决复杂问题能力，但是对一些编程的基本思想，原则学习不够，也就是内功不够，所以也出来的代码可阅读性，可维护性不强。所以之后才会开始补Vue原理，设计原则，算法这种内功。</p>\\n\"','Y','/img/msp0.gif','1','0','2024-09-23','2024-09-22 16:45:17','2024-09-23 16:36:35'),(5,'模具管理系统','常见包管理器及其区别','[{\"anchor\":\"vsp0modules\",\"name\":\"VSP0Modules\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E6%95%88%E6%9E%9C\",\"name\":\"效果\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84\",\"name\":\"项目结构\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"layout\",\"name\":\"Layout\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"%E5%85%AC%E7%94%A8%E6%96%B9%E6%B3%95%E4%B8%8E%E7%BB%84%E4%BB%B6\",\"name\":\"公用方法与组件\",\"tag\":\"h3\",\"children\":[]}]}]}]','\"<h1 id=\\\"vsp0modules\\\" tabindex=\\\"-1\\\">VSP0Modules</h1>\\n<p>终于开始了vue3，真的很忙，用vue2肯定会轻松，但是不想停下就用了vue3.</p>\\n<h2 id=\\\"%E6%95%88%E6%9E%9C\\\" tabindex=\\\"-1\\\">效果</h2>\\n<p><img src=\\\"C:%5CUsers%5CASUS%5CDesktop%5Cproject%5Cvsp0all.png\\\" alt=\\\"vsp0all\\\"></p>\\n<p><img src=\\\"C:%5CUsers%5CASUS%5CDesktop%5Cproject%5Cvsp0.gif\\\" alt=\\\"vsp0\\\"></p>\\n<h2 id=\\\"%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84\\\" tabindex=\\\"-1\\\">项目结构</h2>\\n<p>项目结构已经成型</p>\\n<p>![image-20240827222802818](C:\\\\Users\\\\ASUS\\\\Pictures\\\\Saved Pictures\\\\image-20240827222802818.png)</p>\\n<h2 id=\\\"layout\\\" tabindex=\\\"-1\\\">Layout</h2>\\n<p>此时眼里的网页就是LayOut里面加了一个Route-view，Layout我也不是太关注，想要用的东西就存store里面，主要关注Route-view。</p>\\n<h3 id=\\\"%E5%85%AC%E7%94%A8%E6%96%B9%E6%B3%95%E4%B8%8E%E7%BB%84%E4%BB%B6\\\" tabindex=\\\"-1\\\">公用方法与组件</h3>\\n<p>可能是这种一个form(不管是查询条件还是维护信息)+buttons(一些操作)+table(结果),这种结构真是太多了，不知不觉间就形成了现在的风格。</p>\\n<p>不过也分为两个时期吧。</p>\\n<h4>1.  typescript进阶学习之后</h4>\\n<p>对OOP有了执念，想着前后端统一了。</p>\\n<h5>axios</h5>\\n<pre><code class=\\\"language-ts\\\">class AxiosHelper{\\n        public  request:&lt;T&gt;(config: AxiosRequestConfig) =&gt; Promise&lt;T&gt;\\n        private instance:AxiosInstance\\n        private constructor(){\\n            this.instance= this.createInstance()\\n            this.request = this.createRequset()\\n        }\\n        private createInstance(){\\n            const instance = axios.create()\\n            //设置拦截器\\n            instance.interceptors.request.use(config=&gt;{\\n              return  config\\n            },error=&gt;Promise.reject(error))\\n            instance.interceptors.response.use(\\n                response=&gt;{\\n                const apiData = response.data as IApiResponseData&lt;any&gt;                \\n                return apiData as any\\n\\n            },\\n            error=&gt;Promise.reject(error)\\n            \\n            )\\n            return instance\\n        }\\n        private createRequset(){\\n            return  &lt;T&gt;(config:AxiosRequestConfig):Promise&lt;T&gt;=&gt;{\\n                const defaultConfig:AxiosRequestConfig = {\\n                    headers:{\\n                        Authorization:\'\',\\n                        \'Content-Type\':config.headers?.[\'Content-Type\']||\'application/json\',\\n                       \\n                    },\\n                    timeout: 10000,\\n                    baseURL: import.meta.env.VITE_BASE_API\\n                    // process.env.VUE_APP_BASE_URL\\n                    ,\\n                    data: {}\\n                } \\n                return  this.instance({...defaultConfig,...config})\\n           }\\n        }\\n        static _instance:AxiosHelper\\n        static instance(){\\n              if(this._instance){\\n                  return this._instance\\n              }else{\\n                  this._instance = new AxiosHelper()\\n                  return this.instance()\\n              }\\n        }\\n  \\n}\\n\\n const axiosHelper = AxiosHelper.instance()\\n</code></pre>\\n<h5>手写Promise</h5>\\n<pre><code class=\\\"language-ts\\\">enum Status{\\n     /**\\n         * 等待/准备\\n         */\\n     pending = \'pending\',\\n     /**\\n      * 执行态\\n      */\\n     fulFilled = &quot;fulFilled&quot;,\\n     /**\\n      * 拒绝\\n      */\\n     rejected = \'rejected\'\\n}\\n\\nclass MyPromise&lt;T&gt; implements MyPromiseTypes.IMyPromise&lt;T&gt;{\\n    /**\\n     * 三种状态\\n     */\\n    private status:MyPromiseTypes.TStatus\\n    /**\\n     * fulfilled value\\n     * rejected err\\n     * pending null\\n     */\\n    private result:T = null\\n    /**\\n     * 存储在当前promise里，即p里面，不是then的新的promisem,因为那个时候还没有生成\\n     * 因为一个promise后面可以分开跟着无数then\\n     * p.then()\\n     * p.then()\\n     * 需要一个queue去挨个执行\\n     */\\n    private handler:Array&lt;MyPromiseTypes.handlerItem&lt;T&gt;&gt; = []\\n    constructor(executor: (resolve?:MyPromise&lt;T&gt;[\'resolve\'],reject?:MyPromise&lt;T&gt;[\'reject\'])=&gt;any){\\n         this.status = Status.pending\\n         try{\\n            /**\\n             * 注意点，resolve执行是在executor内部，this指向有问题\\n             */\\n            executor(this.resolve.bind(this),this.reject.bind(this)) \\n         }catch(err){ \\n            this.reject(err)\\n         }\\n         \\n    }\\n    resolve&lt;TResovle = T&gt;(value: TResovle){\\n        this.changeStatus(Status.fulFilled,value)\\n    }\\n    reject(err){\\n        this.changeStatus(Status.rejected,err) \\n    }\\n    private changeStatus(status:keyof MyPromiseTypes.Status,result:any){\\n         if(this.status!==Status.pending) return //promise 状态不可逆\\n         this.status = status\\n         this.result = result \\n         this.run()\\n    }\\n    private isPromiseLike&lt;R extends MyPromiseTypes.IMyPromiseLike&lt;T&gt;&gt;(callback: R){\\n        if(callback &amp;&amp; (typeof callback==\'function\' || typeof callback==\'object\')){\\n             return typeof callback.then == \'function\'\\n        }\\n        return false  \\n    }\\n    \\n    private add2MicroTask(func: MyPromise&lt;T&gt;[\'resolve\']|MyPromise&lt;T&gt;[\'reject\']){\\n        //node 环境\\n        if(process &amp;&amp; typeof process=== \'object\' &amp;&amp; typeof process.nextTick === \'function\'){\\n            process.nextTick(func)\\n        }else if(MutationObserver &amp;&amp; typeof MutationObserver === \'function\'){\\n            const ob = new MutationObserver(func)\\n            const node = document.createTextNode(&quot;1&quot;)\\n            ob.observe(node,{\\n                characterData:true\\n            })\\n            node.data = &quot;2&quot;\\n        }else{\\n             setTimeout(func,0)\\n        }\\n    }\\n   \\n    then&lt;TReturn1 = T,TReturn2 = never&gt;(onfulfilled?:(res:T)=&gt;TReturn1|MyPromiseTypes.IMyPromiseLike&lt;TReturn1&gt;,onrejected?:(res: any)=&gt;TReturn2|MyPromiseTypes.IMyPromiseLike&lt;TReturn2&gt;):MyPromise&lt;TReturn1|TReturn2&gt;{\\n        return new MyPromise&lt;TReturn1|TReturn2&gt;((resolve,reject)=&gt;{\\n            this.handler.push({\\n                onfulfilled,onrejected,resolve,reject\\n            })\\n            /**\\n             * 注意，如果new 的时候是同步代码，then的时候其实已经执行完了，需要手动调用一次。\\n             * 如果异步没有完成，这次会因为pending状态而什么都没做，等异步完成通过resolve，reject时候调用执行\\n             */\\n            this.run()\\n        })\\n        \\n        \\n    }\\n   \\n    \\n    private runOneItem&lt;R extends MyPromiseTypes.handlerItem&lt;T&gt;&gt;({onfulfilled,onrejected,reject,resolve}:R){\\n         this.add2MicroTask(()=&gt;{\\n            const callback = this.status===Status.fulFilled?onfulfilled:onrejected\\n            \\n            //如果不是函数，新promise resolve 之前的result\\n            if(typeof callback !== \'function\'){\\n                const settled = this.status === Status.fulFilled?resolve:reject\\n                settled(this.result)\\n                return\\n            }\\n            //是函数，如果执行成功就resolve,就算是onrejected里面的，也是resolve\\n            try{\\n                    const data = callback(this.result)\\n                    if(this.isPromiseLike(data)){\\n                        (data as MyPromise&lt;any&gt;).then(resolve,reject)\\n                    }else{\\n                        resolve(data)\\n                    }\\n                \\n            }catch(err){\\n                reject(err)\\n            }\\n            }\\n        )\\n\\n    }\\n\\n\\n \\n    private run(){\\n         if(this.status===Status.pending) return\\n         else{\\n            while(this.handler.length){\\n                this.runOneItem(this.handler.shift())\\n            }\\n         }\\n    }\\n}\\ndeclare namespace MyPromiseTypes{\\n\\n    declare enum Status{\\n        /**\\n         * 等待/准备\\n         */\\n        pending:\'pending\',\\n        /**\\n         * 执行态\\n         */\\n        fulFilled:&quot;fulFilled&quot;,\\n        /**\\n         * 拒绝\\n         */\\n        rejected:\'rejected\'\\n    }\\n    interface IMyPromiseLike&lt;T&gt;{\\n         then:IMyPromise&lt;T&gt;[\'then\']\\n    }\\n    type TStatus = keyof Status\\n    interface handlerItem&lt;T&gt;{\\n        resolve: MyPromise&lt;T&gt;[\'resolve\']\\n        reject: MyPromise&lt;T&gt;[\'reject\']\\n        onfulfilled:Parameters&lt;IMyPromise&lt;T&gt;[\'then\']&gt;[0]\\n        onrejected(res: any):any\\n    } \\n\\n    interface IMyPromise&lt;T&gt;{\\n        // status:keyof Status\\n        /**\\n         * pending-&gt;fulfilled\\n         */\\n        resolve&lt;R = T&gt;(value:R):void\\n        /**\\n         * pending=&gt;rejected\\n         */\\n        reject(value: any):void\\n        /**\\n         * \\n         * @param onfulfilled \\n         * @param onrejected \\n         * @description 需要执行的回调,全部存在handler数组里面了，执行当状态改变会执行回调函数\\n         * 回调分为三种 \\n         * 1.函数，执行成功resolve，失败reject\\n         * 2.promiseLike即有then回调的\\n         * 3.非上面两种，直接将继承之前的promise状态与值\\n         */\\n        then&lt;TReturn1 = T,TReturn2 = never&gt;(onfulfilled:(res:T)=&gt;TReturn1|IMyPromiseLike&lt;TReturn1&gt;,onrejected?:(res: any)=&gt;TReturn2|IMyPromiseLike&lt;TReturn2&gt;):MyPromise&lt;TReturn1|TReturn2&gt;\\n        \\n    }\\n    \\n\\n}\\n</code></pre>\\n<h5>Form</h5>\\n<pre><code class=\\\"language-ts\\\">// form.d.ts\\n\\n/**\\n * all formitem type enum\\n */\\ndeclare  enum EFormItemType{\\n   input = \'input\',\\n   date = \'date\',\\n   select = \'select\'\\n}\\n/**\\n * all formitem type\\n */\\ntype TSearchItem = keyof typeof EFormItemType\\n/**\\n * if formitem is select,then it can has some options\\n * option type\\n */\\ntype TSelectOption&lt;T extends string = string&gt; = T | {value:T,label: string} \\n\\n/**\\n * getFormTemplate params.\\n * can auto fill content\\n */\\ninterface IFormTemplateOption&lt;T extends (string[]|readonly string[]),TType extends Partial&lt;Record&lt;ArrayKey&lt;T&gt;,EFormItemType&gt;&gt;&gt;{\\n\\tlabels:string[],\\n\\tprops:T, \\n\\ttypes?:TType,\\n\\toptions?:{\\n\\t\\t [k in keyof TType as TType[k] extends EFormItemType.select?k :never]?: TSelectOption[]\\n\\t},\\n\\treadonlys?:{[k in ArrayKey&lt;T&gt;]?:boolean}\\n }\\n /**\\n  * getFormTemplate Return data\\n  */\\n interface IFormItem&lt;T extends string&gt;{\\n\\t label: string,\\n\\t prop: T\\n\\t type?:EFormItemType\\n\\t options?:IFormItem&lt;T&gt;[\'type\'] extends EFormItemType.select?TSelectOption[]:never\\n\\t readonly?:boolean\\n }\\n\\n\\n\\n/**\\n * getFormData param\\n */\\ninterface IFormDataOption&lt;T extends string[]|readonly string[]&gt;{\\n\\tprops:T,\\n\\tdefaultData?:Partial&lt;Record&lt;ArrayKey&lt;T&gt;,string&gt;&gt;\\n}\\n\\n\\n /**\\n  * formitem type\\n  */\\n type ICondition&lt;T extends string&gt; = {\\n\\t[k in  T]: string\\n }\\n\\n\\n interface IFormComponent&lt;T extends string = any&gt;{\\n    template: IFormItem&lt;T&gt;[]\\n\\tformdata: ICondition&lt;T&gt;\\n }\\n\\n//form.ts\\n\\nexport enum EFormItemType  {\\n\\tinput = \'input\',\\n\\tdate = \'date\',\\n\\tselect = \'select\'\\n}\\n\\nexport function getFormTemplate&lt;\\n        T extends string[]|readonly string[],\\n\\t\\tR extends Partial&lt;Record&lt;ArrayKey&lt;T&gt;,EFormItemType&gt;&gt;\\n&gt;({labels,props,types,options,readonlys}:IFormTemplateOption&lt;T,R&gt;){\\n\\ttypes = types||{} as R\\n    options = options||{}\\n    readonlys = readonlys||{}\\n    if(labels.length !== props.length){\\n      throw new Error(\'label and prop are not corrent\')\\n    }\\n    return props.map((prop:ArrayKey&lt;T&gt;,i)=&gt;{\\n      const label = labels[i] \\n      const type = types[prop] \\n      const option = options[prop as any] as TSelectOption[]\\n      const readonly = readonlys[prop]\\n      return {\\n          label,prop,\\n          ...type?{type}:{},\\n          ...option?{option}:{},\\n          ...readonly?{readonly}:{}\\n      }\\n   })\\n}\\n\\nexport function getFormData&lt;T extends string[]|readonly string[]&gt;({props,defaultData={}}:IFormDataOption&lt;T&gt;){\\n    return Object.fromEntries(props.map(v=&gt;[v,defaultData[v]||null]))  as ICondition&lt;ArrayKey&lt;T&gt;&gt;\\n}\\n</code></pre>\\n<pre><code class=\\\"language-vue\\\">\\n&lt;script lang=&quot;ts&quot; setup&gt;\\nimport { EFormItemType } from \'@/utils/template/form\'\\nconst { formdata, template } = defineProps&lt;IFormComponent&gt;()\\n&lt;/script&gt;\\n\\n&lt;template&gt;\\n\\t&lt;div class=&quot;form-container&quot;&gt;\\n\\t\\t&lt;ElForm inline&gt;\\n\\t\\t\\t&lt;template v-for=&quot;item of template&quot; :key=&quot;item.prop&quot;&gt;\\n\\t\\t\\t\\t&lt;slot :name=&quot;item.prop&quot;&gt;\\n\\t\\t\\t\\t\\t&lt;ElFormItem class=&quot;form-item&quot; :label=&quot;item.label&quot;&gt;\\n\\t\\t\\t\\t\\t\\t&lt;template v-if=&quot;item.type === EFormItemType.select&quot;&gt;\\n\\t\\t\\t\\t\\t\\t\\t&lt;ElSelect v-model=&quot;formdata[item.prop]&quot;&gt;\\n\\t\\t\\t\\t\\t\\t\\t\\t&lt;template v-if=&quot;item.options&quot; v-for=&quot;(option, index) of &lt;TSelectOption[]&gt;item.options &quot;&gt;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t&lt;ElOption v-if=&quot;typeof option === \'object\'&quot; :label=&quot;option.label&quot;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t:value=&quot;option.value&quot; :key=&quot;index&quot;&gt;&lt;/ElOption&gt;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t&lt;ElOption v-else :label=&quot;option&quot; :value=&quot;option&quot;&gt;&lt;/ElOption&gt;\\n\\t\\t\\t\\t\\t\\t\\t\\t&lt;/template&gt;\\n\\t\\t\\t\\t\\t\\t\\t&lt;/ElSelect&gt;\\n\\t\\t\\t\\t\\t\\t&lt;/template&gt;\\n\\t\\t\\t\\t\\t\\t&lt;template v-if=&quot;item.type === EFormItemType.date&quot;&gt;\\n\\t\\t\\t\\t\\t\\t\\t&lt;ElDatePicker v-model=&quot;formdata[item.prop]&quot; format=&quot;YYYY-MM-DD&quot; value-format=\'YYYY-MM-DD\'\\n\\t\\t\\t\\t\\t\\t\\t\\tclearable&gt;&lt;/ElDatePicker&gt;\\n\\t\\t\\t\\t\\t\\t&lt;/template&gt;\\n\\t\\t\\t\\t\\t\\t&lt;template v-else&gt;\\n\\t\\t\\t\\t\\t\\t\\t&lt;ElInput v-model=&quot;formdata[item.prop]&quot;&gt;&lt;/ElInput&gt;\\n\\t\\t\\t\\t\\t\\t&lt;/template&gt;\\n\\n\\t\\t\\t\\t\\t&lt;/ElFormItem&gt;\\n\\t\\t\\t\\t&lt;/slot&gt;\\n\\t\\t\\t&lt;/template&gt;\\n\\t\\t\\t&lt;ElFormItem class=&quot;form-item&quot;&gt;\\n\\t\\t\\t\\t&lt;slot name=&quot;last&quot;&gt;&lt;/slot&gt;\\n\\t\\t\\t&lt;/ElFormItem&gt;\\n\\n\\t\\t&lt;/ElForm&gt;\\n\\t&lt;/div&gt;\\n&lt;/template&gt;\\n</code></pre>\\n<h5>buttons</h5>\\n<pre><code class=\\\"language-ts\\\">// buttons.d.ts\\nimport type { ButtonType } from &quot;element-plus&quot;\\nimport { DefineComponent } from &quot;vue&quot;\\n\\ndeclare global {\\n  type TButtonType = ButtonType\\n  type TIcon = DefineComponent\\n  \\n  interface IButtonOption&lt;T extends string[]| readonly string[]&gt; {\\n    labels: string[]\\n    props: T\\n    icons?: Partial&lt;Record&lt;ArrayKey&lt;T&gt;,TIcon&gt;&gt;\\n    types?: Partial&lt;Record&lt;ArrayKey&lt;T&gt;,TButtonType&gt;&gt;,\\n  }\\n\\n  interface IButtonItem&lt;T extends string&gt;{\\n     label: string\\n\\t prop: T\\n\\t icon?: TIcon\\n\\t type?:TButtonType\\n  }\\n\\n  interface IButtonProps&lt;T = any&gt;{\\n\\t  template: IButtonItem&lt;T&gt;[]\\n\\t//   events:Partial&lt;Record&lt;TEvent,(...any)=&gt;any&gt;&gt;\\n  }\\n}\\n//button.ts\\nexport function getButtonTemplate&lt;T extends string[]| readonly string[]&gt;({props,labels,icons={},types={}}:IButtonOption&lt;T&gt;){\\t\\n    if(labels.length !== props.length){\\n       throw new Error(\'length is diff between labels and props\')\\n\\t}\\n\\treturn props.map((prop:ArrayKey&lt;T&gt;,index)=&gt;{\\n\\t\\t const label = labels[index]\\n\\t\\t const res:IButtonItem&lt;ArrayKey&lt;T&gt;&gt; = {\\n\\t\\t\\tprop,\\n\\t\\t\\tlabel,\\n\\t\\t }\\n\\t\\t icons[prop] &amp;&amp; Reflect.set(res,\'icon\',icons[prop])\\n\\t\\t types[prop] &amp;&amp; Reflect.set(res,\'type\',types[prop])\\n\\t\\t return res\\n\\t})\\n\\n}\\n</code></pre>\\n<pre><code class=\\\"language-vue\\\">&lt;script lang=&quot;ts&quot; setup&gt;\\nconst {template,} = defineProps&lt;IButtonProps&gt;()\\nconst emit = defineEmits&lt;{\\n\\t(event: \'buttonClick\',item: IButtonItem&lt;any&gt;)\\n}&gt;()\\nfunction handleClick(e:MouseEvent,item: IButtonItem&lt;any&gt;){\\n\\te.stopPropagation()\\n    emit(\'buttonClick\',item)\\n\\t\\n}\\n&lt;/script&gt;\\n\\n&lt;template&gt;\\n\\t&lt;div class=&quot;buttons-container&quot;&gt;\\n\\t\\t&lt;ElButton v-for=&quot;item of template&quot; :key=&quot;item.prop&quot; :type=&quot;item.type&quot; :icon=&quot;item.icon&quot;\\n\\t\\t @click=&quot;e=&gt;handleClick(e,item)&quot;\\n\\t\\t&gt;{{ item.label }}&lt;/ElButton&gt;\\n\\t&lt;/div&gt;\\n&lt;/template&gt;\\n</code></pre>\\n<h5>table</h5>\\n<pre><code class=\\\"language-ts\\\">//table.d.ts\\nimport type { TableInstance } from &quot;element-plus&quot;\\nimport {UnwrapNestedRefs} from \'vue\'\\n\\ntype FuncFirstParam&lt;T extends (...arg: any) =&gt; any&gt; = T extends (\\n  ...arg: [infer R]\\n) =&gt; any\\n  ? R\\n  : any\\ntype TEvents = FuncFirstParam&lt;TableInstance[&quot;$emit&quot;]&gt;\\n\\ndeclare global {\\n  interface IPaginationTable&lt;T extends Record&lt;string, any&gt; = any&gt; {\\n    /**\\n     * 满足loading的querySelector用\\n     */\\n    class?: string\\n    tableConfig: UnwrapNestedRefs&lt;{\\n      tableData: T[]\\n      tableTemplate: Array&lt;\\n        Record&lt;&quot;label&quot; | &quot;prop&quot;, string&gt; &amp; { [k: string]: string }\\n      &gt;\\n    }&gt;\\n    columnConfig?: UnwrapNestedRefs&lt;TElTableColumnConfig&lt;string&gt;&gt;\\n    pagination?: UnwrapNestedRefs&lt;{\\n      currentPageNum: number\\n      pageSizes: number[]\\n      total: number\\n      pageSize: number\\n    }&gt;\\n    onClickRow?: (row: T) =&gt; any\\n    rowStyle?: (data: { row: T; rowIndex: number }) =&gt; Object\\n    events?: Partial&lt;Record&lt;TEvents, (...arg: any) =&gt; any&gt;&gt;\\n  }\\n  type TElTableColumnConfig&lt;T extends string&gt; = Partial&lt;\\n    Record&lt;\\n      T,\\n      {\\n        type?: &quot;input&quot; | &quot;select&quot; | &quot;color&quot;\\n        options?: { value: string; tip?: string; label: string }[] | string[]\\n        cannotedit?: true\\n        cannotshow?: true\\n      }\\n    &gt;\\n  &gt;\\n\\n  type TTableDataItem&lt;T extends string[]|readonly string[]&gt; = {\\n\\t   [k in ArrayKey&lt;T&gt;]: string\\n\\t  \\n  } &amp; { [k: string] : any}\\n\\n\\n  type TTableTemplateItem = Record&lt;\'label\'|\'prop\',string&gt;\\n}\\n//table.ts\\n\\nexport function getTableTemplate&lt;T extends string[]|readonly string[]&gt;({props,labels}:{props:T,labels: string[]}){\\n\\tif(props.length!==labels.length){\\n\\t\\tthrow new Error(\'length is diff between labels and props\')\\n\\t}\\n\\n\\treturn props.map((prop,i)=&gt;({prop,label:labels[i]}))\\n}\\n</code></pre>\\n<pre><code class=\\\"language-vue\\\">&lt;script lang=&quot;ts&quot; setup&gt;\\nimport { computed, toRefs,reactive } from \'vue\'\\nimport {paginationTable} from \'.\'\\n\\nconst props = withDefaults(defineProps&lt;paginationTable.IPaginationTable&gt;(),{\\n    pagination:()=&gt;reactive({  currentPageNum:1, pageSizes:[2,5,10], total:0, pageSize:5 }),\\n    columnConfig:()=&gt;reactive({}),\\n\\tevents:()=&gt;reactive({})\\n\\t\\n})\\nconst displayData = computed(()=&gt;{\\n    const {pageSize: size,currentPageNum: page,total} = toRefs(props.pagination)\\n    total.value = props.tableConfig.tableData.length\\n     const res = props.tableConfig.tableData.filter((x,i)=&gt;i&lt;size.value*page.value&amp;&amp;i&gt;=size.value*(page.value-1))\\n     return res\\n})\\n\\n&lt;/script&gt;\\n\\n\\n&lt;template&gt;\\n\\t&lt;div class=&quot;paginationTableContainer&quot;&gt;\\n    &lt;div class=&quot;paginationTable&quot; &gt;\\n        &lt;ElTable border stripe :class=&quot;class&quot; :data=&quot;displayData&quot; fit flexible highlight-current-row \\n\\t\\t height=&quot;100%&quot; :row-style=&quot;(rowStyle as any)&quot;\\n\\t      v-on=&quot;events&quot;\\n\\t\\t  &gt;\\n            &lt;template v-for=&quot;item of props.tableConfig.tableTemplate&quot; &gt;\\n                &lt;ElTableColumn min-width=&quot;150px&quot; v-if=&quot;!columnConfig[item.prop] || !columnConfig[item.prop].cannotshow&quot;  :label=&quot;item.label&quot; :prop=&quot;item.prop&quot; :key=&quot;item.prop&quot;\\n                   align=&quot;center&quot; resizable show-overflow-tooltip&gt;\\n                    &lt;template v-if=&quot;columnConfig[item.prop] &amp;&amp; columnConfig[item.prop].type==\'color\'&quot; #default=&quot;scope&quot;&gt;\\n                        &lt;ElColorPicker :model-value=&quot;scope.row[item.prop]&quot;  disabled&gt;&lt;/ElColorPicker&gt;\\n                    &lt;/template&gt;\\n                &lt;/ElTableColumn&gt;\\n           &lt;/template&gt;\\n        &lt;/ElTable&gt;\\n    &lt;/div&gt;\\n    &lt;ElPagination  v-model:page-size=&quot;pagination.pageSize&quot; v-model:current-page=&quot;pagination.currentPageNum&quot;\\n               :total=&quot;pagination.total&quot; :page-sizes=&quot;pagination.pageSizes&quot; layout=&quot;total, sizes, prev, pager, next, jumper&quot;\\n            &gt;&lt;/ElPagination&gt;\\n\\t\\t&lt;/div&gt;\\n&lt;/template&gt;\\n</code></pre>\\n<p>使用</p>\\n<pre><code class=\\\"language-vue\\\">&lt;script lang=&quot;ts&quot; setup&gt;\\nimport { reactive, ref,onBeforeMount } from \'vue\';\\nimport {formTemplate,conditions,buttonTemplate} from \'.\'\\nimport {TButtonProp,TTableItem} from \'backupModel\'\\nimport {backupModelList as backupModelListApi} from \'@/api/backupModel\'\\nimport { ElMessage, ElNotification} from \'element-plus\';\\nimport PaginationTable from \'@/components/publicComponents/paginationTable/index.vue\'\\nimport { paginationTable } from \'customComponent\'\\nimport { excelOut } from \'@/utils/excelHelper\';\\nimport { getExcelData, sleep } from \'@/utils/common\';\\nimport {TFormDataProp} from \'backupModel\'\\n\\nonBeforeMount(()=&gt;{\\n     backupModelListApi.getTableTemplate().then(v=&gt;{\\n         if(v.status){\\n             tableTemplate.value = v.data\\n         }\\n     })\\n})\\n\\nconst formData = ref(conditions)\\nconst tableData = ref&lt;TTableItem[]&gt;([])\\nconst tableTemplate = ref&lt;Array&lt;{prop:keyof TTableItem,label: string}&gt;&gt;([])\\nlet currentRow:TTableItem = null\\nconst tableConfig:Partial&lt;paginationTable.IPaginationTable&lt;TTableItem&gt;&gt; = {\\n    pagination:reactive({\\n        currentPageNum:1,\\n        pageSizes:[10,15,20],\\n        total:0,\\n        pageSize:15\\n      }),\\n\\t  events:{\\n\\t\\t\'row-click\':(row:TTableItem)=&gt;{\\t\\t\\t\\n            currentRow = row\\n\\t\\t},\\n\\t\\t\'row-dblclick\':(row:TTableItem)=&gt;{\\n\\t\\t\\t// console.log(row);\\n\\t\\t    formData.value.workOrderNumber = row.workOrderNumber\\n\\t\\t}\\n\\t  }\\n}\\n\\nconst buttonClick = &lt;T extends TButtonProp&gt;(type: T)=&gt;{\\n    const strategy:Record&lt;TButtonProp,()=&gt;any&gt; = {\\n         search(){\\n            // if(!formData.value.mouldSteelGrade){\\n            //     ElMessage.info(\'模具钢号为空\')\\n            //     return\\n            // }\\n            backupModelListApi.search({...formData.value,dom:\'.tableContainer\'}).then(v=&gt;{\\n                 if(v.status &amp;&amp; v.data){\\n                    //  ElMessage.success(\'查询成功\')\\n                     tableData.value = v.data\\n                 }else{\\n                     ElMessage.info(\'查询失败\')\\n                     tableData.value = []\\n                 }\\n            })\\n         },\\n         backupFinish(){\\n            if(!currentRow){\\n                 ElMessage.info(\'请选择要备模行\')\\n                 return\\n            }\\n\\t\\t\\tif(currentRow.workOrderNumber!==formData.value.workOrderNumber){\\n\\t\\t\\t\\tElMessage.info(\'请选择要备模行\')\\n\\t\\t\\t\\treturn\\n\\t\\t\\t}\\n\\n\\n\\n            backupModelListApi.backupFinish({...currentRow,dom:\'.tableContainer\',mouldSteelGrade:formData.value.mouldSteelGrade}).then(v=&gt;{\\n                if(v.status &amp;&amp; v.data){\\n                     ElMessage.success(\'备模成功\')\\n                     strategy.search()\\n                }else{\\n                    ElMessage.error(\'备模失败\')\\n                }\\n                \\n            })\\n         },\\n         excelOut(){\\n            if(!tableData.value.length){\\n                 ElMessage({type:\'info\',message:&quot;无数据可以导出&quot;})\\n                 return\\n            }\\n            const excelData = getExcelData({name:&quot;备模清单&quot;,tableTemplate: tableTemplate.value,tableData:tableData.value})\\n            excelOut(excelData.name,excelData.headers as any,excelData.series)\\n         }\\n    }\\n    strategy[type]()\\n}\\n\\nconst visibleChange = (prop:TFormDataProp,visible:boolean)=&gt;{\\n\\tconst strategy:Partial&lt;Record&lt;TFormDataProp,()=&gt;any&gt;&gt; = {\\n\\t\\t mouldSteelGrade:()=&gt;{\\n\\t\\t\\tif(visible){\\n\\t\\t\\t\\tconst mouldSteelGrade = ref()\\n\\t\\t\\t\\tconst templateRow = formTemplate.find(x=&gt;x.prop===prop);\\n\\t\\t\\t\\t(templateRow as any).loading = true\\n                backupModelListApi.getMouldSteelGradeFromMSch(formData.value).then(v=&gt;{\\n\\t\\t\\t\\t\\tif(v.status){\\n\\t\\t\\t\\t\\t\\ttemplateRow.option = v.data\\n\\t\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\t\\tElNotification({\\n\\t\\t\\t\\t\\t\\t\\ttitle:`getMouldSteelGradeFromMSch error`,\\n\\t\\t\\t\\t\\t\\t\\ttype:\'error\',\\n\\t\\t\\t\\t\\t\\t\\tmessage:v.data as any\\n\\t\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t}).finally(()=&gt;{\\n\\t\\t\\t\\t\\t(templateRow as any).loading = false\\n\\t\\t\\t\\t})\\n\\t\\t\\n\\t\\t\\t}\\n\\t\\t }\\n\\t}\\n\\tstrategy[prop] &amp;&amp; strategy[prop]()\\n}\\n\\n\\n\\n// console.log(formTemplate);\\n\\n\\n&lt;/script&gt;\\n\\n\\n&lt;template&gt;\\n    &lt;div class=&quot;backupModelList&quot;&gt;\\n        &lt;div class=&quot;header&quot;&gt;\\n            &lt;ElForm class=&quot;myForm&quot;&gt;\\n                &lt;!-- 之前的display:inline-block;不想改,就在下面加了一个flex的div --&gt;\\n                &lt;div&gt;\\n                    &lt;ElFormItem v-for=&quot;item of formTemplate&quot; :label=&quot;item.label&quot; :key=&quot;item.prop&quot;&gt;\\n                        &lt;ElSelect v-model=&quot;formData[item.prop]&quot; clearable v-if=&quot;item.type &amp;&amp; item.type===\'select\'&quot; \\n\\t\\t\\t\\t\\t\\t @visible-change=&quot;visible=&gt;visibleChange(item.prop,visible)&quot;\\n\\t\\t\\t\\t\\t\\t :loading=&quot;(item as any).loading&quot;\\n\\t\\t\\t\\t\\t\\t &gt;\\n\\t\\t\\t\\t\\t\\t\\t&lt;template v-if=&quot;item.option&quot;&gt;\\n\\t\\t\\t\\t\\t\\t\\t\\t&lt;ElOption v-for=&quot;op of item.option&quot; :key=&quot;op&quot; :value=&quot;op&quot; :label=&quot;op&quot;&gt;&lt;/ElOption&gt;\\n\\t\\t\\t\\t\\t\\t\\t&lt;/template&gt;\\n                        &lt;/ElSelect&gt;\\n                        &lt;ElInput v-else v-model=&quot;formData[item.prop]&quot;&gt;&lt;/ElInput&gt;\\n                    &lt;/ElFormItem&gt;\\n                &lt;/div&gt;\\n                \\n            &lt;/ElForm&gt;\\n            &lt;div class=&quot;buttonContainer&quot;&gt;\\n                &lt;ElButton v-for=&quot;item of buttonTemplate&quot; :key=&quot;item.prop&quot; :icon=&quot;item.icon&quot; :type=&quot;item.type&quot; @click=&quot;buttonClick(item.prop)&quot;&gt;\\n                {{ item.label }}\\n                &lt;/ElButton&gt;\\n            &lt;/div&gt;\\n                              \\n        &lt;/div&gt;\\n        &lt;div class=&quot;tableContainer&quot;&gt;\\n            &lt;PaginationTable :table-config=&quot;{tableTemplate,tableData}&quot; :pagination=&quot;tableConfig.pagination&quot; \\n\\t\\t\\t:events=&quot;tableConfig.events&quot;&gt;&lt;/PaginationTable&gt;\\n        &lt;/div&gt;\\n    &lt;/div&gt;\\n&lt;/template&gt;\\n</code></pre>\\n<p>此时也还没有从vue2中完成出来，虽然确实写在了一起，但感觉莫名有点乱。</p>\\n<h4>2.  上手React之后</h4>\\n<p>class，又或者OOP没有什么不好，但ts中的class就有点奇怪，假如我想像后端一样属性私有，只能通过get，set访问。写是没有问题，但是当想遍历时，又或者我想有Object.keys,Reflect.ownKeys之类的，就会吧私有属性带出来，毕竟ts编译之后就没了。当然可以通过new Proxy，来设置ownKeys，但这就感觉太复杂，而且不确定以后会不会有其他操作。使用<code>#prop</code>的话，又感觉兼容性不行，而且看着也不舒服。就很迷茫。</p>\\n<p>学习React之后，React从class组件到function组件，我才发现，我好像确实忘记了function，hooks真是神了啊。忽然感觉豁然开朗、</p>\\n<p>此时风格又一次发生改变，开始拥抱Composition API；</p>\\n<pre><code class=\\\"language-ts\\\">// useForm.ts\\nexport function useForm(){\\n\\tconst formTemplate = getFormTemplate({\\n\\t\\tprops,\\n        //整个系统中某些数据库中列太常用，就设置成了enum\\n\\t\\tlabels:[EModuleLabels.makeMachine,EModuleLabels.mouldSteelGrade]\\n\\t})\\n\\t\\n\\tconst formData = reactive(getFormData({props})) \\n\\treturn {\\n       formData,\\n\\t   formTemplate\\n\\t}\\n}\\n</code></pre>\\n<pre><code class=\\\"language-ts\\\">// useButton.ts\\nconst strategy:Record&lt;TProps,(...arg: any)=&gt;any&gt; = {\\n\\tsearch({formData,getTableData}:IUseButtonProps&lt;TFormData&gt;){\\n\\t\\tgetTableData &amp;&amp; formData &amp;&amp; getTableData(formData)\\n\\t},\\n\\texport({exportExcel}:IUseButtonProps&lt;any&gt;){\\n\\t\\texportExcel &amp;&amp; exportExcel()\\n\\t}\\n}\\n\\nexport function useButton&lt;T extends Record&lt;string,any&gt;&gt;(options: IUseButtonProps&lt;T&gt;) {\\n  const buttonTemplate = getButtonTemplate({\\n    props: buttonProps,\\n    labels: buttonLabels,\\n    icons: {\\n      search: Search,\\n      export: Download,\\n    },\\n    types: {\\n      search: &quot;primary&quot;,\\n      export: &quot;success&quot;,\\n    },\\n  })\\n  \\n  function buttonClickHandler(item:IButtonItem&lt;TProps&gt;){\\n\\t  strategy[item.prop]? strategy[item.prop](options):\'\'\\n  }\\n  \\n  return {\\n    buttonTemplate,\\n\\tbuttonClickHandler\\n  }\\n}\\n</code></pre>\\n<pre><code class=\\\"language-ts\\\">// useTable.ts\\nexport function useTable(){\\n\\tconst tableData = ref&lt;TTableDataItem&lt;any&gt;[]&gt;([])\\n\\tconst tableTemplate = reactive&lt;Record&lt;\'label\'|\'prop\',string&gt;[]&gt;([])\\n    \\n    let loadingInstance:LoadingInstance\\n\\tfunction getTableTemplate(){\\n\\t\\tendTime.getTableTemplate().then(v=&gt;{\\n\\t\\t\\t// console.log(v);\\n\\t\\t\\tif(v.status){\\n\\t\\t\\t\\ttableTemplate.splice(0,tableTemplate.length,...v.data)\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t})\\n\\t}\\n\\tgetTableTemplate()\\n\\tfunction getTableData&lt;T extends TFormData&gt;(formData:T){\\n\\t\\tif(loadingInstance){\\n\\t\\t\\treturn\\n\\t\\t}\\n\\t\\t loadingInstance = ElLoadingService({\\n\\t\\t\\ttarget:\'.paginationTable\'\\n\\t\\t})\\n\\t\\t return  endTime.getTableData(formData).then(v=&gt;{\\n\\t\\t\\t if(v.status){\\n\\t\\t\\t\\t tableData.value = v.data\\n\\t\\t\\t\\t ElMessage.success(\'查询成功\')\\n\\t\\t\\t }else{\\n\\t\\t\\t\\tElMessage.error(\'查询失败\')\\n\\t\\t\\t }\\n\\t\\t  }).catch(e=&gt;{\\n\\t\\t\\tElNotification({\\n\\t\\t\\t\\tmessage:e instanceof Error?e.message:e,\\n\\t\\t\\t\\ttitle:\'error\'\\n\\t\\t\\t})\\n\\t\\t  }).finally(()=&gt;{\\n\\t\\t\\tloadingInstance?.close()\\n\\t\\t\\tloadingInstance = null\\n\\t\\t  })\\n\\t}\\n\\treturn {\\n\\t\\ttableTemplate,\\n\\t\\ttableData,\\n\\t\\tgetTableData\\n\\t}\\n}\\n</code></pre>\\n<p>现在vue文件就非常清爽了。</p>\\n<pre><code class=\\\"language-vue\\\">&lt;script lang=&quot;ts&quot; setup&gt;\\nimport { useButton } from \'./useButton\';\\nimport { useForm } from \'./useForm\';\\nimport FormCondition from \'@/components/publicComponents/formCondition/index.vue\'\\nimport Buttons from &quot;@/components/publicComponents/buttons/index.vue&quot;\\nimport PaginationTable  from \'@/components/publicComponents/paginationTable/index.vue\'\\nimport { useTable } from \'./useTable\';\\nimport { useExportExcel } from \'@/hooks/useExportExcel\'\\nimport { onMounted, reactive } from \'vue\';\\n\\nconst {formData,formTemplate} = useForm()\\n\\nconst {tableData,tableTemplate,getTableData} = useTable()\\n\\nconst {exportExcel} = useExportExcel({tableData,tableTemplate})\\n\\nconst {buttonTemplate, buttonClickHandler} = useButton({formData,exportExcel,getTableData})\\n\\n\\nconst tableSetting:Partial&lt;IPaginationTable&lt;any&gt;&gt; = {\\n\\tpagination:reactive({\\n      currentPageNum: 1,\\n      pageSizes: [15,20,30],\\n      total: 0,\\n      pageSize: 20\\n    })\\n}\\n\\nonMounted(()=&gt;{\\n\\tbuttonClickHandler({prop:&quot;search&quot;,label:\'\'})\\n})\\n\\n\\n&lt;/script&gt;\\n\\n&lt;template&gt;\\n\\t&lt;div class=&quot;end-time-container&quot;&gt;\\n          &lt;FormCondition :template=&quot;formTemplate&quot; :formdata=&quot;formData&quot;&gt;\\n\\t\\t\\t&lt;template #last&gt;\\n\\t\\t\\t\\t&lt;Buttons :template=&quot;buttonTemplate&quot; @button-click=&quot;buttonClickHandler&quot;&gt;&lt;/Buttons&gt;\\n\\t\\t\\t&lt;/template&gt;\\n\\t\\t  &lt;/FormCondition&gt;\\n\\t\\t  &lt;PaginationTable :table-config=&quot;{tableData,tableTemplate}&quot; :pagination=&quot;tableSetting.pagination&quot;&gt;&lt;/PaginationTable&gt;\\n\\n\\t&lt;/div&gt;\\n&lt;/template&gt;\\n</code></pre>\\n\"','Y','/img/vsp0all.png','1','0','2024-09-23','2024-09-22 16:45:17','2024-09-23 16:36:50'),(6,'模具备模看板','特定数据看板','[{\"anchor\":\"chartboard\",\"name\":\"chartBoard\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E6%95%88%E6%9E%9C\",\"name\":\"效果\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E7%BB%93%E6%9E%84\",\"name\":\"结构\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"vue\",\"name\":\"vue\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"hooks\",\"name\":\"hooks\",\"tag\":\"h3\",\"children\":[]}]}]}]','\"<h1 id=\\\"chartboard\\\" tabindex=\\\"-1\\\">chartBoard</h1>\\n<h2 id=\\\"%E6%95%88%E6%9E%9C\\\" tabindex=\\\"-1\\\">效果</h2>\\n<p><img src=\\\"C:%5CUsers%5CASUS%5CDesktop%5Cproject%5Cboard.png\\\" alt=\\\"board\\\"></p>\\n<h2 id=\\\"%E7%BB%93%E6%9E%84\\\" tabindex=\\\"-1\\\">结构</h2>\\n<h3 id=\\\"vue\\\" tabindex=\\\"-1\\\">vue</h3>\\n<pre><code class=\\\"language-vue\\\">//index.vue\\n//整体分为三个hook，一目了然\\n&lt;script lang=&quot;ts&quot; setup&gt;\\n\\nimport EditableTable from \'@/components/common/tables/editableTable/index.vue\'\\nimport { onBeforeUnmount } from \'vue\';\\nimport { plainToClass } from \'class-transformer\'\\nimport useBoardTable from \'./useBoardTable\'\\nimport useWarningList from \'./useWarningList\'\\nimport usePie from \'./usePie\'\\n\\nlet intervalTime = 30 * 1000\\n\\nusePie(intervalTime)\\n\\nconst { tableData, getTableData } = useBoardTable()\\n\\nlet getTableDataTimer = setInterval(() =&gt; {\\n\\tgetTableData()\\n}, intervalTime)\\nonBeforeUnmount(() =&gt; {\\n\\tgetTableDataTimer &amp;&amp; clearInterval(getTableDataTimer)\\n})\\n\\nconst { warningList, getWarningList } = useWarningList()\\nconst getWarningListTimer = setTimeout(() =&gt; {\\n\\tgetWarningList()\\n}, intervalTime);\\nonBeforeUnmount(() =&gt; {\\n\\tgetWarningListTimer &amp;&amp; clearInterval(getWarningListTimer)\\n})\\n\\n\\n&lt;/script&gt;\\n</code></pre>\\n<h3 id=\\\"hooks\\\" tabindex=\\\"-1\\\">hooks</h3>\\n<pre><code class=\\\"language-ts\\\">//usePie.ts\\nimport EchartsHelper from &quot;@/utils/echartsHelper&quot;\\nimport * as API from &quot;@/api/board&quot;\\nimport { onBeforeUnmount, onMounted } from &quot;vue&quot;\\nimport { option } from &quot;./echarts&quot;\\n\\nexport default function (intervalTime: number) {\\n\\n  let echartsInstance: EchartsHelper = null\\n  const getPieDataTimer = setInterval(() =&gt; {\\n    getPieData()\\n  }, intervalTime)\\n  function getPieData() {\\n    API.getPieData().then((v) =&gt; {\\n      echartsInstance?.updateChart({\\n        option: {\\n          dataset: {\\n            source: v\\n          }\\n        }\\n      })\\n    })\\n  }\\n  onMounted(() =&gt; {\\n    const dom = document.querySelector(&quot;#dq9boardContainerPie&quot;) as HTMLElement\\n    echartsInstance = dom &amp;&amp; EchartsHelper.init({ dom })\\n    echartsInstance?.updateChart({ option })\\n    getPieData()\\n  })\\n  onBeforeUnmount(() =&gt; {\\n    echartsInstance?.destroy()\\n    echartsInstance = null\\n    getPieDataTimer &amp;&amp; clearInterval(getPieDataTimer)\\n  })\\n}\\n\\n</code></pre>\\n<pre><code class=\\\"language-ts\\\">// useBoardTable.ts\\nimport { IPaginationTable } from \'@/components/common/tables/editableTable\'\\nimport { reactive } from \'vue\'\\nimport { EventEmitter } from \'@/utils/eventEmitter\';\\nimport * as API from \'@/api/board\'\\n\\n\\n export default function (){\\n\\tconst tableData: Partial&lt;IPaginationTable&lt;Record&lt;string, any&gt;&gt;&gt; = {\\n\\t\\ttableConfig: reactive({\\n\\t\\t\\ttableData: [],\\n\\t\\t\\ttableTemplate: []\\n\\t\\t}),\\n\\t\\tminWidth:{\\n\\t\\t\\tpartNumber:130,lastProdPartNumber:130,\\n\\t\\t\\tworkOrderNumber:130\\n\\t\\n\\t\\t}\\n\\t}\\n\\tfunction getTableData(){\\n\\t\\tAPI.getBoardTableData().then(v =&gt; {\\n\\t\\t\\ttableData.tableConfig.tableData = v\\n\\t\\t})\\n\\t}\\n\\tfunction getTableTemplate(){\\n\\t\\tAPI.getTableTemplate().then(v =&gt; {\\n\\t\\t\\ttableData.tableConfig.tableTemplate = v\\n\\t\\t})\\n\\t}\\n\\tgetTableData();\\n\\tgetTableTemplate()\\n\\treturn {\\n\\t\\ttableData,\\n\\t\\tgetTableData\\n\\t}\\n }\\n</code></pre>\\n<pre><code class=\\\"language-ts\\\">//useWarningList\\nimport { ref } from \'vue\'\\nimport * as API from \'@/api/board\'\\n\\nexport default function(){\\n\\tconst warningList = ref&lt;string[]&gt;([])\\n\\n\\tfunction getWarningList(){\\n\\t\\tAPI.getWarningList().then(v =&gt; {\\n\\t\\t\\twarningList.value = v\\n\\t\\t})\\n\\t}\\n\\tgetWarningList()\\n    return {\\n\\t\\twarningList,getWarningList\\n\\t}\\n\\n}\\n</code></pre>\\n\"','Y','/img/board.png','1','0','2024-09-23','2024-09-22 16:45:17','2024-09-23 16:37:03');
/*!40000 ALTER TABLE `project` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `project_jp`
--

DROP TABLE IF EXISTS `project_jp`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `project_jp` (
  `id` int NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `description` varchar(255) DEFAULT '0',
  `toc` text NOT NULL,
  `htmlContent` text NOT NULL,
  `isValid` varchar(1) NOT NULL DEFAULT 'Y',
  `thumb` varchar(255) NOT NULL,
  `scanNumber` varchar(255) NOT NULL,
  `commentNumber` varchar(255) NOT NULL,
  `createDate` varchar(255) NOT NULL,
  `createdAt` datetime NOT NULL,
  `updatedAt` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `project_jp`
--

LOCK TABLES `project_jp` WRITE;
/*!40000 ALTER TABLE `project_jp` DISABLE KEYS */;
INSERT INTO `project_jp` VALUES (1,'初めてのVueページ','Vue を使用して作成された最初のかんばんボード','[{\"anchor\":\"%E5%88%9D%E3%82%81%E3%81%A6%E3%81%AEvue%E3%83%9A%E3%83%BC%E3%82%B8\",\"name\":\"初めてのVueページ\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E6%95%88%E6%9E%9C\",\"name\":\"效果\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"template\",\"name\":\"template\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"options\",\"name\":\"options\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"data\",\"name\":\"data\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"method\",\"name\":\"method\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"computed\",\"name\":\"computed\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"%E3%81%BE%E3%81%A8%E3%82%81\",\"name\":\"まとめ\",\"tag\":\"h2\",\"children\":[]}]}]','\"<h1 id=\\\"%E5%88%9D%E3%82%81%E3%81%A6%E3%81%AEvue%E3%83%9A%E3%83%BC%E3%82%B8\\\" tabindex=\\\"-1\\\">初めてのVueページ</h1>\\n<h2 id=\\\"%E6%95%88%E6%9E%9C\\\" tabindex=\\\"-1\\\">效果</h2>\\n<p><img src=\\\"C:%5CUsers%5CASUS%5CDesktop%5Cproject%5CfirstVue.gif\\\" alt=\\\"firstVue\\\"></p>\\n<h2 id=\\\"template\\\" tabindex=\\\"-1\\\">template</h2>\\n<p>hard codeで書かれたことが多すぎて、computed にパラメータを渡すのもあまり良くなくて、 styleじゃなくてclassに切り替えた方が快適かも、table-columnの中のv-if多すぎ……</p>\\n<pre><code class=\\\"language-ts\\\"> &lt;el-table\\n      ref=&quot;lightTable&quot;\\n      tooltip-effect=&quot;dark&quot;\\n      style=&quot;width: 100%&quot;\\n      :height=&quot;tableHeight&quot;\\n      border\\n      :data=&quot;tableData&quot;\\n      @select=&quot;hide&quot;\\n      @cell-mouse-enter=&quot;getMSG&quot;\\n      :header-cell-class-name=&quot;cellClass&quot;\\n    &gt;\\n      &lt;el-table-column type=&quot;selection&quot; align=&quot;center&quot;&gt; &lt;/el-table-column&gt;\\n\\n      &lt;el-table-column label=&quot;线体&quot; align=&quot;center&quot; prop=&quot;line&quot;&gt;\\n      &lt;/el-table-column&gt;\\n      &lt;el-table-column\\n        v-for=&quot;i in stations&quot;\\n        :key=&quot;i&quot;\\n        :label=&quot;i&quot;\\n        align=&quot;center&quot;\\n        :prop=&quot;i&quot;\\n      &gt;\\n        &lt;template slot-scope=&quot;scope&quot;&gt;\\n          &lt;div\\n            v-if=&quot;scope.row[scope.column.property] === \'bgcRunning\'&quot;\\n            @click=&quot;turnTOWeb&quot;\\n            :style=&quot;bgcComputed(\'bgcRunning\')&quot;\\n          &gt;\\n            &amp;emsp;\\n          &lt;/div&gt;\\n          &lt;div\\n            v-else-if=&quot;scope.row[scope.column.property] == \'bgcWaitRepair\'&quot;\\n            :style=&quot;bgcComputed(\'bgcWaitRepair\')&quot;\\n            @click=&quot;turnTOWeb&quot;\\n          &gt;\\n            &amp;emsp;\\n          &lt;/div&gt;\\n\\t\\t//   ...\\n\\n        &lt;/template&gt;\\n      &lt;/el-table-column&gt;\\n    &lt;/el-table&gt;\\n</code></pre>\\n<h2 id=\\\"options\\\" tabindex=\\\"-1\\\">options</h2>\\n<h3 id=\\\"data\\\" tabindex=\\\"-1\\\">data</h3>\\n<p>物が多すぎてごちゃごちゃしてます。データにスタイル設定を含める必要はありません。</p>\\n<pre><code class=\\\"language-ts\\\">  data(){\\n\\treturn {\\n\\t\\t    tableData: [],\\n\\t\\t\\tstations: [], //列\\n\\t\\t\\tlines: [],    //行\\n\\t\\t\\tdisLine: [],  //只显示被勾选的行\\n\\t\\t\\ttableHeight: &quot;1000px&quot;,\\n\\t\\t\\ttimer1: null,  //短轮训timer\\n\\t\\t\\ttimer2: null,\\n\\t\\t\\t/**\\n\\t\\t\\t * @type {\\n\\t\\t\\t *     {\\n\\t\\t\\t *        [line,statin]: value\\n\\t\\t\\t *     }\\n\\t\\t\\t * }\\n\\t\\t\\t */\\n\\t\\t\\tBoardInfo: &quot;&quot;,  //存放灯号信息,明明是个对象 \\n\\t\\t\\tbgcRunning: [{ &quot;background-color&quot;: &quot;#00B050&quot; }], //正常运行的特殊颜色，下同\\n\\t\\t\\tbgc: [\\n\\t\\t\\t\\t//通用属性\\n\\t\\t\\t\\t{ &quot;border-radius&quot;: &quot;50%&quot; },\\n\\t\\t\\t\\t{ width: &quot;20px&quot; },\\n\\t\\t\\t\\t{ height: &quot;20px&quot; },\\n\\t\\t\\t\\t{ &quot;margin-left&quot;: &quot;50%&quot; },\\n\\t\\t\\t\\t{ transform: &quot;translateX(-50%)&quot; },\\n\\t\\t\\t],\\n\\t\\t\\tbgc5MinsUnRepair: [{ &quot;background-color&quot;: &quot;red&quot; }],\\n\\t\\t\\tbgc5MinsRepairing: [{ &quot;background-color&quot;: &quot;#FF9900&quot; }],\\n\\t\\t\\tbgcGrayFlash: [{ &quot;background-color&quot;: &quot;gray&quot; }],\\n\\t\\t\\tbgcBlueFlash: [{ &quot;background-color&quot;: &quot;#0000FF&quot; }],\\n\\t\\t\\tbgcWaitRepair: [{ &quot;background-color&quot;: &quot;red&quot; }],\\n\\t\\t\\tbgcNoEquipment: [{ &quot;background-color&quot;: &quot;white&quot; }],\\n\\t\\t\\tbgcUnUse: [{ &quot;background-color&quot;: &quot;#A6A6A6&quot; }],\\n\\t\\t\\tbgcBlue: [{ &quot;background-color&quot;: &quot;#0000FF&quot; }],\\n\\t\\t\\tbgcRepairing: [{ &quot;background-color&quot;: &quot;#FF9900&quot; }],\\n\\n\\t\\t\\tbgcContrl: true, //控制闪烁\\n\\t}\\n  }\\n</code></pre>\\n<h3 id=\\\"method\\\" tabindex=\\\"-1\\\">method</h3>\\n<pre><code class=\\\"language-ts\\\">//Boardinfo=&gt;tableData\\n\\nmethods:{\\n\\t//太可怕了，居然会操作字符串,而且需要分if else吗\\nDisplay() {\\n      //显示控制，生成表格对应的json\\n      if (this.disLine.length === 0) {\\n        //全部显示\\n        var Lines = this.lines;\\n        var tboby = &quot;&quot;;\\n        var Boardinfo = this.BoardInfo;\\n        var Station = this.stations;\\n        for (var i = 0; i &lt; Lines.length; i++) {\\n          if (i != 0) {\\n            tboby += \'{&quot;line&quot;:&quot;\' + Lines[i] + \'&quot;,\';\\n          } else {\\n            tboby += \'[{&quot;line&quot;:&quot;\' + Lines[i] + \'&quot;,\';\\n          }\\n\\n          for (var j = 0; j &lt; Station.length; j++) {\\n            var station = Station[j];\\n            var bgc = &quot;&quot;;\\n            //判断JSON Array中是否包含value2=line value3=station。如果有的话，那么就取当前JSON中的值\\n            var JsonKey = Lines[i] + &quot;,&quot; + station;\\n            if (this.isHasAttr(Boardinfo, JsonKey)) {\\n              switch (Boardinfo[JsonKey]) {\\n                case &quot;1&quot;:\\n                  bgc = &quot;bgcRunning&quot;;\\n                  break;\\n                case &quot;2&quot;:\\n                  bgc = &quot;bgcWaitRepair&quot;;\\n                  break;\\n                case &quot;3&quot;:\\n                  bgc = &quot;bgc5MinsUnRepair&quot;;\\n                  break;\\n                case &quot;4&quot;:\\n                  bgc = &quot;bgcRepairing&quot;;\\n                  break;\\n                case &quot;5&quot;:\\n                  bgc = &quot;bgc5MinsRepairing&quot;;\\n                  break;\\n                case &quot;6&quot;:\\n                  bgc = &quot;bgcUnUse&quot;; //bgcNoEquipment\\n                  break;\\n                case &quot;7&quot;:\\n                  bgc = &quot;bgcGrayFlash&quot;;\\n                  break;\\n                case &quot;8&quot;:\\n                  bgc = &quot;bgcBlue&quot;;\\n                  break;\\n                case &quot;9&quot;:\\n                  bgc = &quot;bgcBlueFlash&quot;;\\n                  break;\\n              }\\n            }\\n            if (j != Station.length - 1) {\\n              tboby += \'&quot;\' + station + \'&quot;:\' + \'&quot;\' + bgc + \'&quot;,\';\\n            } else {\\n              tboby += \'&quot;\' + station + \'&quot;:\' + \'&quot;\' + bgc + \'&quot;\';\\n            }\\n          }\\n          if (i != Lines.length - 1) {\\n            tboby += &quot;},&quot;;\\n          } else {\\n            tboby += &quot;}]&quot;;\\n          }\\n        }\\n        this.tableData = JSON.parse(tboby);\\n      } else {\\n        var Lines = this.disLine;\\n        var tboby = &quot;&quot;;\\n        var Boardinfo = this.BoardInfo;\\n        var Station = this.stations;\\n        for (var i = 0; i &lt; Lines.length; i++) {\\n          if (i != 0) {\\n            tboby += \'{&quot;line&quot;:&quot;\' + Lines[i] + \'&quot;,\';\\n          } else {\\n            tboby += \'[{&quot;line&quot;:&quot;\' + Lines[i] + \'&quot;,\';\\n          }\\n        //   ……\\n        this.tableData = JSON.parse(tboby);\\n      }\\n    },\\n\\t //通过时间间隔改变控制属性，结合computed中 bgcComputed达到闪烁目的\\n\\t bgcControl() {\\n      this.bgcContrl = !this.bgcContrl;\\n    },\\n}\\n</code></pre>\\n<h3 id=\\\"computed\\\" tabindex=\\\"-1\\\">computed</h3>\\n<pre><code class=\\\"language-ts\\\">  computed: {\\n    bgcComputed() {\\n      return function (x) {\\n        var BGC = [];\\n        switch (x) {\\n          case &quot;bgcRunning&quot;:\\n            BGC = this.bgcRunning;\\n            return this.bgc.concat(BGC);\\n          // break;\\n          case &quot;bgcWaitRepair&quot;:\\n            BGC = this.bgcWaitRepair;\\n            return this.bgc.concat(BGC);\\n          // break;\\n          case &quot;bgc5MinsUnRepair&quot;:\\n            BGC = this.bgc5MinsUnRepair;\\n            break;\\n          case &quot;bgcRepairing&quot;:\\n            BGC = this.bgcRepairing;\\n            // break;\\n            return this.bgc.concat(BGC);\\n          case &quot;bgc5MinsRepairing&quot;:\\n            BGC = this.bgc5MinsRepairing;\\n            break;\\n          case &quot;bgcUnUse&quot;:\\n            BGC = this.bgcUnUse;\\n            // break;\\n            return this.bgc.concat(BGC);\\n          case &quot;bgcGrayFlash&quot;:\\n            BGC = this.bgcGrayFlash;\\n            break;\\n          case &quot;bgcBlue&quot;:\\n            BGC = this.bgcBlue;\\n            return this.bgc.concat(BGC);\\n          // break;\\n          case &quot;bgcBlueFlash&quot;:\\n            BGC = this.bgcBlueFlash;\\n            break;\\n        }\\n        var res = this.bgcContrl ? this.bgc.concat(BGC) : this.bgc;\\n        return res;\\n      };\\n    },\\n  },\\n</code></pre>\\n<h2 id=\\\"%E3%81%BE%E3%81%A8%E3%82%81\\\" tabindex=\\\"-1\\\">まとめ</h2>\\n<p>今からして見れば、このページは難しくないようです。しかし、初心者、特に ES6 や CSS に慣れていない人にとっては、まだ少し難しいです。</p>\\n<p>今これを書くとしたら、すべてのtableのデータはcomputedで制御することになります。</p>\\n<pre><code class=\\\"language-ts\\\">  data(){\\n\\treturn {\\n\\t\\t//获取行列直接计算出全部的数据\\n\\t\\ttableData:[],\\n\\t\\tdisplayLines:[]\\n\\t}\\n  },\\n  methods:{\\n\\t setTableData(){\\n\\t\\t const res = [] \\n\\t\\t for(let i of Object.keys(BoardInfo)){\\n\\t\\t\\tconst [line,station] = i.split(&quot;,&quot;)\\n\\t\\t\\tres.push({line,station,value:BoardInfo[i]})\\n\\t\\t }\\n\\t\\t this.tableData = res\\n\\t }\\n  },\\n  computed:{\\n\\tdisplayTableData(){\\n        return this.tableData.filter(x=&gt;displayLines.includes(x.line))\\n\\t}\\n  }\\n\\n</code></pre>\\n<p>ちらつき効果は明白で、単純なアニメーションを使用して完成させることができます。これを制御するために js を使用する必要はありません。</p>\\n<pre><code class=\\\"language-less\\\">@bgcWaitRepair: red;\\n.bgc{\\n\\t&amp;.bgcWaitRepair{\\n\\t\\tbackground:@bgcWaitRepair;\\n\\t\\tanimation: flicker .3s infinite;\\n\\t}\\n}\\n@keyframes flicker {\\n\\t0%{\\n\\t\\topacity:1;\\n\\t}\\n\\t50%{\\n\\t\\topacity:0;\\n\\t}\\n\\t100%{\\n\\t\\topacity:1;\\n\\t}\\n};\\n</code></pre>\\n\"','Y','/img/firstVue.gif','4','0','2024-09-23','2024-09-23 14:38:58','2025-04-30 15:13:42'),(2,'human management','簡単な人员管理システム','[{\"anchor\":\"%E4%BA%BA%E5%91%98%E7%AE%A1%E7%90%86\",\"name\":\"人员管理\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E6%95%88%E6%9E%9C\",\"name\":\"效果\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89\",\"name\":\"バックエンド\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89\",\"name\":\"フロントエンド\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E3%81%BE%E3%81%A8%E3%82%81\",\"name\":\"まとめ\",\"tag\":\"h2\",\"children\":[]}]}]','\"<h1 id=\\\"%E4%BA%BA%E5%91%98%E7%AE%A1%E7%90%86\\\" tabindex=\\\"-1\\\">人员管理</h1>\\n<h2 id=\\\"%E6%95%88%E6%9E%9C\\\" tabindex=\\\"-1\\\">效果</h2>\\n<p><img src=\\\"C:%5CUsers%5CASUS%5CDesktop%5Cproject%5Chuman.gif\\\" alt=\\\"human\\\"></p>\\n<h2 id=\\\"%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89\\\" tabindex=\\\"-1\\\">バックエンド</h2>\\n<p>社内は.Net Framework4.0を使ってる人が多い\\nRoute</p>\\n<pre><code class=\\\"language-C#\\\">//  Route 对应 handler  xxx.ashx\\n public class basicInfo : IHttpHandler{\\n basicInfo_BLL bInfo = new basicInfo_BLL();\\n public void ProcessRequest(HttpContext context)\\n        {\\n\\t\\t\\t//CORS\\n            context.Response.ContentType = &quot;text/plain&quot;;\\n            context.Response.AddHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);\\n            context.Response.AddHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;GET, POST, PUT, DELETE, OPTIONS&quot;);\\n            context.Response.AddHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Content-Type&quot;);\\n            string action = context.Request[&quot;action&quot;];\\n\\t\\t\\t//路由还不是Rest风格\\n            switch (action)\\n            {\\n                case &quot;getTable&quot;:\\n                    getTable(context);\\n                    break;\\n                // ...\\n\\n            }\\n}\\nprivate void getTable(HttpContext context){\\n            //自己写的Action,统一处理错误\\n            Try(() =&gt;\\n            {\\n                context.Response.Write(bInfo.search(context.Request[&quot;dept&quot;], context.Request[&quot;id&quot;],...);\\n            });\\n}\\n\\n}\\n\\n\\n</code></pre>\\n<p>BLL 略</p>\\n<pre><code class=\\\"language-C#\\\">    public class basicInfo_BLL\\n    {\\n        basicInfo_DAL bInfo = new basicInfo_DAL();\\n        public string search(string dept,string id,string name,string line,string position)\\n        {\\n            string condition = getCondition(dept, &quot;dept&quot;) + getCondition(id, &quot;id&quot;) + getCondition(name, &quot;cName&quot;) + getCondition(line, &quot;line&quot;) + getCondition(position,&quot;position&quot;);\\n            return bInfo.search(condition);\\n \\n        }\\n\\t\\t...\\n\\t}\\n</code></pre>\\n<p>DAL は主に直接 SQL Sentence + Linq</p>\\n<pre><code class=\\\"language-ts\\\">  public List&lt;basicData_Model&gt; SearchList(string condition){\\n\\n     string factory = &quot;MSM0&quot;;\\n            string cmd2 = string.Format(@&quot;select * from\\n(\\n     select company,dept,id,cName,eName,line,position,gender,enterDate,leaveDate,homeAddress,telephone,wechat,email,emergencyContact,station,responseRegion,factory,region,rownumber,EMSIdentity \\n\\t from HM_BasicInfo where isValid =\'Y\' and factory=\'{1}\' {0}\\n) A\\nleft join\\n(\\n\\t select value2 ,value6 shiftAB,term hmProperty,rowNum EMSRowNum,value1,value4 from EMS_Maintain \\n\\t\\twhere system_type=\'打卡看板\' and value4 = \'MSM0\'  and term in (\'领班\',\'出席信息\',\'组长\',\'工程师\') and validYN = \'Y\'\\n) B on id = value2 and  factory = value4 and region = value1 and EMSIdentity=hmProperty order by rownumber desc&quot;, condition, factory);\\n\\n            List&lt;basicData_Model&gt; list = SqlHelper.GetList&lt;basicData_Model&gt;(cmd2).Select(x =&gt;\\n            {\\n                x.emergencyContact = x.emergencyContact.Trim();\\n                x.leaveDate = System.Text.RegularExpressions.Regex.IsMatch(x.leaveDate, @&quot;1900.*&quot;) ? &quot;&quot; : DateTime.Parse(x.leaveDate).ToString(&quot;yyyy-MM-dd&quot;);\\n\\n                x.enterDate = DateTime.Parse(x.enterDate).ToString(&quot;yyyy-MM-dd&quot;);\\n                return x;\\n            }).ToList();\\n            return list;\\n        }\\n</code></pre>\\n<h2 id=\\\"%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89\\\" tabindex=\\\"-1\\\">フロントエンド</h2>\\n<p>徐々に現在のスタイルに近づきつつありますが、まだまだです。この初期化は jQuery に戻ったような感じで、モジュール性のメリットがまったく理解できません。</p>\\n<pre><code class=\\\"language-ts\\\">     init(){\\n           let labels =[\'公司别\',\'部门\',\'工号\',\'姓名\',\'英文名\',\'线别\',\'职务\',\'性别\',\\n           \'入职日\',\'离职日期\',\'户籍地址\',\'电话\',\'微信\',\'邮箱\',\'紧急联络人\',\'班别\',\'人员属性\',\'设备别\',\'负责区域(线体)\',\'厂别\',\'车间\']\\n           let prop = [\'company\',\'dept\',\'id\',\'cName\',\'eName\',\'line\',\'position\',\'gender\',\'enterDate\',\\n           \'leaveDate\',\'homeAddress\',\'telephone\',\'wechat\',\'email\',\'emergencyContact\',\'shiftAB\',\'hmProperty\',\'station\',\'responseRegion\',\'factory\',\'region\']\\n           let table = {\\n                label:[],\\n                height:window.innerHeight*0.75,\\n                data:[]\\n           }\\n           let widthArr = {\\n               \'company\':\'70px\',\\n               \'line\':\'70px\',\\n               \'gender\':\'50px\',\\n               \'shiftAB\':\'50px\',\\n               \'station\':\'200px\',\\n               \'responseRegion\':\'200px\',\\n               \'homeAddress\':\'180px\'\\n           }\\n           for(let i = 0;i&lt;labels.length;i++){\\n              table.label.push({label:labels[i],prop:prop[i],width:widthArr[prop[i]]})\\n           }\\n           this.tableData = table   \\n           this.paginationData = {\\n               sizes : [10,15,20,30],\\n               size:20,\\n               total:null,\\n               currentPage:1\\n           }\\n           Promise.resolve().then(()=&gt;{\\n               let array = [\'homeAddress\',\'telephone\',\'wechat\',\'email\',\'emergencyContact\',\'station\',\'responseRegion\']\\n               this.editableData = array\\n               this.testInput = {\\n                    email:x=&gt; /^([a-zA-Z]|[0-9])(\\\\w|\\\\-)+@[a-zA-Z0-9]+\\\\.([a-zA-Z]{2,4})$/.test(x),\\n                    telephone:x=&gt;/^1\\\\d{10}$/.test(x),\\n                    wechat:x=&gt;/^1\\\\d{10}$/.test(x),\\n                    emergencyContact:x=&gt;/^1[3|4|5|8][0-9]\\\\d{4,8}$/.test(x),\\n                    homeAddress:x=&gt;/[\\\\u4e00-\\\\u9fa5]+/.test(x),\\n               }\\n\\n           }).then(()=&gt;{\\n               this.getSelectInfo()\\n           })\\n           \\n\\n        },\\n</code></pre>\\n<p>もちろん、私はいくつかの共有メソッドを作成しようと試み始めましたが、でもまだまだです。それに依然として CommonJ のようにインポートされています。もちろん、webpack は気にしませんけど。</p>\\n<pre><code class=\\\"language-ts\\\">async function getData(url,param={},type=\'post\'){\\n    let axios = require(\'axios\')\\n    function PostData(){\\n        let qs = require(\'qs\')\\n        return  qs.stringify(param,{ indices: false })\\n    }\\n   return axios[type](url,type===&quot;post&quot;?PostData():{params:param}).then(value=&gt;value.data,reason=&gt;{console.error(reason); throw reason}).catch((e)=&gt;{})\\n}\\n\\nasync function excelOut(name=\'excel\',header=[],series=[]){\\n    const ExportJsonExcel = require(&quot;js-export-excel&quot;);\\n    let option = {\\n        fileName:name,\\n        datas:[{\\n            sheetHeader:header,\\n            // sheetName: &quot;sheet&quot;,\\n            sheetData:series\\n         }]\\n    }\\n    setTimeout(() =&gt; {\\n        let toExcel = new ExportJsonExcel(option); //new\\n        toExcel.saveExcel();\\n    }, 0); \\n}\\n</code></pre>\\n<p>データ管理は混んでて、明らかにデータは親コンポーネントにある方がいいですね。 formData か tableData かは簡単に貰えない。</p>\\n<pre><code class=\\\"language-ts\\\">&lt;template&gt;\\n    &lt;div&gt;\\n        &lt;Selects ref=&quot;Inputs&quot; @updateTable=&quot;updateTable&quot; @saveData=&quot;saveData&quot; @excelOut=&quot;excelOut&quot; @addItem=&quot;addItem&quot; /&gt;\\n        &lt;Table ref=&quot;Table&quot; @rowClick=&quot;updateInputs&quot; style=&quot;margin:1.5% 0&quot;/&gt;     \\n    &lt;/div&gt;\\n&lt;/template&gt;\\n&lt;script&gt;\\nexport default {\\n    components:{\\n        Selects:()=&gt;import(\'@/components/basicInfo/selects\'),\\n        Table:()=&gt;import(\'@/components/basicInfo/basicInfoTB\')\\n    },\\n    methods:{\\n        \\n        updateTable(value){},\\n        updateInputs(row){\\n             this.$refs.Inputs.setInputValue(row)\\n        },\\n        saveData(){\\n            this.$refs.Table.saveData()\\n        },\\n        excelOut(){\\n            this.$refs.Table.excelOut()\\n        },\\n        addItem(row){\\n            this.$refs.Table.addItem(row)\\n        },\\n    }\\n}\\n</code></pre>\\n<h2 id=\\\"%E3%81%BE%E3%81%A8%E3%82%81\\\" tabindex=\\\"-1\\\">まとめ</h2>\\n<p>現時点では、Vue についてある程度の理解があり、特定の機能を実装することもできるはずですが、モジュールの考え方とコンポーネント間の関係がまだ非常に不足しています。全体として、非常に混乱しており、美しさに欠けています。</p>\\n\"','Y','/img/human.gif','3','0','2024-09-23','2024-09-23 14:38:58','2025-04-30 15:14:01'),(3,'wechat mini app','微信小程序レコード','[{\"anchor\":\"wechat\",\"name\":\"wechat\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E8%AA%8D%E8%A8%BC\",\"name\":\"認証\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"mvvm%E6%93%8D%E4%BD%9C\",\"name\":\"MVVM操作\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\",\"name\":\"基本使用\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"%E9%80%9A%E4%BF%A1\",\"name\":\"通信\",\"tag\":\"h3\",\"children\":[]}]}]}]','\"<h1 id=\\\"wechat\\\" tabindex=\\\"-1\\\">wechat</h1>\\n<h2 id=\\\"%E8%AA%8D%E8%A8%BC\\\" tabindex=\\\"-1\\\">認証</h2>\\n<p>フロントエンド</p>\\n<pre><code class=\\\"language-ts\\\">// app.ts\\n enum LoginStatus{\\n\\tlogining = \'logining\',\\n\\tlogined = \'logined\',\\n\\tunlogin = \'unlogin\'\\n }\\n\\n async onShow(){\\n   let pages = getCurrentPages();\\n   //进入小程序\\n   if(pages.length == 0) {\\n\\t   wx.setStorageSync(\'loginStatus\',LoginStatus.logining)\\n       const res = await checkIdentity()\\n       if(!res){\\n         wx.showToast({\\n           title: \'身份认证失败\',\\n         })\\n\\t\\t  wx.setStorageSync(\'loginStatus\',LoginStatus.unlogin)\\n       }else{ \\n\\t\\t wx.setStorageSync(\'loginStatus\',LoginStatus.logined)\\n         wx.setStorageSync(\'userInfo\',{userid:res.id,token:res.token,factory:res.factory,access:res.access})\\n         wx.showToast({\\n           title: `${res.id}\\n              \\\\r\\\\nversion:${wx.getAccountInfoSync().miniProgram.version}` ,\\n         })\\n       }\\n    }\\n}\\n\\n//utils.ts\\n/**\\n * 返回工号token,根据企业微信还是手机微信统一返回固定格式\\n */\\nasync function checkIdentity(){\\n  const {environment} = await getEnvironment() as {environment:string}  \\n  if(environment &amp;&amp; environment==\'wxwork\'){\\n      return qyLogin() \\n  }else{\\n      return wxLogin()\\n  }\\n}\\n\\n/**\\n * 微信认证,就是拿code换id\\n */\\nasync function wxLogin(){\\n  const code = await new Promise(resolve=&gt;{\\n      wx.login({\\n        success:res=&gt;{\\n          resolve(res.code)\\n        },\\n      })\\n  })\\n  //自己封装了一下wx.request(),以前写的，感觉写的不是很好\\n  return requestData(`${loginUrl}login`,{code},&quot;POST&quot;,{\\n    \'content-type\': \'application/x-www-form-urlencoded\'\\n  },setSessionId) as Promise&lt;IUserInfo&gt;\\n}\\n</code></pre>\\n<p>バックエンドもコードに基づいて ID をもらいます。トークンを生成して返す。</p>\\n<pre><code class=\\\"language-c#\\\">        /// &lt;summary&gt;\\n        /// 通过openid认证\\n        /// &lt;/summary&gt;\\n        /// &lt;returns&gt;&lt;/returns&gt;\\n        public static string auth2(string code)\\n        {\\n            string res = string.Empty;\\n            string openid = GetOpenid(code);\\n            string url = string.Format(@&quot;https://qyapi.weixin.qq.com/cgi-bin/user/convert_to_userid?access_token={0}&quot;, GetAccessToken());\\n            string responseText = HttpHelper.Instance.post(url, &quot;{\\\\&quot;openid\\\\&quot;:\\\\&quot;&quot; + openid + &quot;\\\\&quot;}&quot;);\\n            WeChatUserInfoFromOpenId codeEn = JsonHelper.GetEntity&lt;WeChatUserInfoFromOpenId&gt;(responseText);\\n            if (!string.IsNullOrEmpty(codeEn.errmsg) &amp;&amp; codeEn.errmsg.Equals(&quot;ok&quot;))\\n            {\\n                res = codeEn.userid;\\n            }\\n            return res;\\n        }\\n</code></pre>\\n<p>その時に書いたのは、40秒以内に検証が通るかどうかを判定するというものでしたが、今はこの無限ループよりもイベントバスなどを使ったほうがずっと良いのではないかと感じています。</p>\\n<pre><code class=\\\"language-ts\\\">  async onShow(){\\n      wx.showLoading({title:\'加载中\'})\\n      const result = await isIdentityCheckFinished()\\n      if(!result){\\n        wx.redirectTo({\\n          \'url\':\'../errorPage/index\',\\n        })\\n        return\\n      }\\n      wx.hideLoading()\\n      this.init()\\n  }\\n\\n\\n/**\\n * 认证是否执行完成\\n */\\nconst isIdentityCheckFinished= async (count = 20)=&gt;{\\n  while(count--){\\n\\tconst status = wx.getStorageSync(\'loginStatus\')\\n\\tif(status===LoginStatus.logining){\\n       await sleep(2)\\n\\t}else{\\n\\t\\treturn wx.getStorageSync(\'loginStatus\') === LoginStatus.logined\\n\\t}\\n  }\\n  return false\\n}\\n</code></pre>\\n<h2 id=\\\"mvvm%E6%93%8D%E4%BD%9C\\\" tabindex=\\\"-1\\\">MVVM操作</h2>\\n<h3 id=\\\"%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\\\" tabindex=\\\"-1\\\">基本使用</h3>\\n<p>これは vue と比較できますが、composition api はありません。\\n以前書いたVue のテンプレートとデータを生成する方法を直接使用でき、テンプレートの構文も非常に似ていました。ラベルはちょっと違いだけ。</p>\\n<pre><code class=\\\"language-html\\\">   &lt;view class=&quot;inspectionItem&quot; wx:for=&quot;{{templateData}}&quot; wx:key=&quot;prop&quot;&gt; \\n      &lt;block wx:if=&quot;{{item.prop==\'remark\'}}&quot;&gt;\\n        &lt;wux-cell wx:if=&quot;{{showRemark}}&quot;&gt;\\n          &lt;view  class=&quot;InspectionItemLabel&quot; &gt;\\n              {{item.label}}\\n          &lt;/view&gt;  \\n          &lt;wux-textarea  bind:change=\'onChange\' data-prop=&quot;{{item.prop}}&quot; rows=\'3\' placeholder=\'请输入\' placeholder-style=\'font-weight:10\'&gt;&lt;/wux-textarea&gt;\\n        &lt;/wux-cell&gt; \\n      &lt;/block&gt;\\n      &lt;block wx:elif=&quot;{{item.prop==\'haveProblem\'}}&quot;&gt;\\n        &lt;wux-picker options=&quot;{{[\'是\',\'否\']}}&quot; value=&quot;{{ formData[item.prop] }}&quot;  bind:confirm=&quot;onConfirm&quot;\\n        data-prop=&quot;{{item.prop}}&quot;\\n      &gt;\\n        &lt;wux-cell  is-link extra=&quot;{{ formData[item.prop][0] }}&quot;&gt;\\n          &lt;view class=&quot;InspectionItemLabel&quot; &gt;\\n              {{item.label}}\\n          &lt;/view&gt;  \\n        &lt;/wux-cell&gt;\\n      &lt;/wux-picker&gt;\\n      &lt;/block&gt; \\n   &lt;/view&gt;\\n   ……\\n   &lt;wux-button block type=&quot;balanced&quot; wux-class=\'myButton\' bind:click=\'submit\'\\n      &gt;&lt;wux-icon type=&quot;ios-save&quot; size=&quot;16&quot; /&gt; 提交&lt;/wux-button\\n    &gt;\\n</code></pre>\\n<p>唯一の違いは、reactivityがなく、React のように手動で設定する必要があることです。</p>\\n<pre><code class=\\\"language-ts\\\">Page({\\n   data:{\\n     formData,\\n     templateData,\\n     ……\\n   },\\n   onLoad(){\\n\\t  //调用一些后台api\\n   },\\n   //监听input的change事件\\n   onChange(){\\n\\t  ···\\n      setFormValue()\\n   },\\n    setFormValue(prop: Insection,value: any){\\n      this.setData({\\n        [`formData.${prop}`]:value\\n      })\\n   },\\n   submit(){\\n\\t  validate(this.data.formData) &amp;&amp; submitApi(this.data.formData)\\n   }\\n\\n})\\n</code></pre>\\n<h3 id=\\\"%E9%80%9A%E4%BF%A1\\\" tabindex=\\\"-1\\\">通信</h3>\\n<p>親子コンポーネントはイベントを通じて使用できます。開いているページにも表示されるコミュニケーションを開くには、通常 <code>eventChannel</code> を使用します。 Vue を使用した経験があって、これは Vue オブザーバー モードに似たパブリッシュ/サブスクライブ モードである<code>event bus</code>であることがわかります。</p>\\n<pre><code class=\\\"language-ts\\\"> wx.navigateTo({\\n             url:\'../resolve/index\',\\n             events:{\\n               research:()=&gt;{\\n                this.getList()\\n              },\\n             },\\n            success:(res)=&gt;{\\n                res.eventChannel.emit(\'navSuccess\',item,this.data.searchCondition)\\n            }\\n})\\n\\nonLoad(){\\n\\tconst eventChannel = this.getOpenerEventChannel();\\n\\tthis.eventChannel.on(\'navSuccess\',(condition:Record&lt;string,string&gt;)=&gt;{\\n\\t\\t\\t\\tthis.setData({\\n\\t\\t\\t\\t\\tcondition\\n\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\n\\t})\\n}\\n\\n</code></pre>\\n\"','Y','/img/JS.png','2','0','2024-09-23','2024-09-23 14:38:58','2024-09-23 16:38:30'),(4,'Big Data Board','Big Data Board can see different chart about production','[{\"anchor\":\"%E7%94%9F%E7%94%A3%E8%A8%AD%E5%82%99%E7%8A%B6%E6%85%8B%E7%AE%A1%E7%90%86%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0\",\"name\":\"生産設備状態管理システム\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E6%95%88%E6%9E%9C\",\"name\":\"效果\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E9%80%A0\",\"name\":\"プロジェクト構造\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"prototype-extend\",\"name\":\"prototype　extend\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89\",\"name\":\"カスタムメソッド\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"%E6%94%B9%E8%89%AF%E3%81%95%E3%82%8C%E3%81%9F%E3%82%AB%E3%83%AB%E3%83%BC%E3%82%BB%E3%83%AB\",\"name\":\"改良されたカルーセル\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"%E5%85%B1%E9%80%9A%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88\",\"name\":\"共通コンポーネント\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"echarts%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88\",\"name\":\"echartsコンポーネント\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"upload-excel%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88\",\"name\":\"upload excelンポーネント\",\"tag\":\"h3\",\"children\":[]}]},{\"anchor\":\"store\",\"name\":\"Store\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"route\",\"name\":\"Route\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E3%81%BE%E3%81%A8%E3%82%81\",\"name\":\"まとめ\",\"tag\":\"h2\",\"children\":[]}]}]','\"<h1 id=\\\"%E7%94%9F%E7%94%A3%E8%A8%AD%E5%82%99%E7%8A%B6%E6%85%8B%E7%AE%A1%E7%90%86%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0\\\" tabindex=\\\"-1\\\">生産設備状態管理システム</h1>\\n<p>この時に、私の Vue の動作には問題はありませんが、いくつかのモジュールのアイデアやロジックが非常に変に感じられ、また、私の Vue がエレガントに書かれていないように感じます。その際、比較的高品質なコードをいくつか参考し、これをベースに新しく学習した typescript を加えてこのプロジェクトを開始しました。</p>\\n<h2 id=\\\"%E6%95%88%E6%9E%9C\\\" tabindex=\\\"-1\\\">效果</h2>\\n<p><img src=\\\"C:%5CUsers%5CASUS%5CDesktop%5Cproject%5Cmsp0.gif\\\" alt=\\\"msp0\\\"></p>\\n<h2 id=\\\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E9%80%A0\\\" tabindex=\\\"-1\\\">プロジェクト構造</h2>\\n<p>プロジェクト構造は現在のプロジェクトにほぼ似ていますが、Utils ディレクトリがなく、一部のツールは外部に記述されています。 typescript に詳しくないため、types ディレクトリは存在しません。</p>\\n<p><img src=\\\"C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240827200012949.png\\\" alt=\\\"image-20240827200012949\\\"></p>\\n<h2 id=\\\"prototype-extend\\\" tabindex=\\\"-1\\\">prototype　extend</h2>\\n<p>Typescript を使用すると、最終的にtypeを便利に使えます。</p>\\n<pre><code class=\\\"language-ts\\\">declare module &quot;vue/types/vue&quot; {\\n  interface Vue {\\n    $message:typeof Message;\\n    $axios: typeof Axios;\\n    $echarts: EChartsHelper;\\n    $MessageBox:ElMessageBox;\\n  }\\n}\\n//main.ts\\nVue.config.productionTip = false\\nVue.prototype.$axios = Axios\\nVue.prototype.$echarts = EChartsHelper\\nVue.prototype.$MessageBox = MessageBox\\nObject.prototype[Symbol.iterator] = function * &lt;T&gt;(this:T){\\n  for(let i in this){\\n    yield {key:i,value:this[i]}\\n  }\\n}\\n</code></pre>\\n<h2 id=\\\"%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89\\\" tabindex=\\\"-1\\\">カスタムメソッド</h2>\\n<p>現時点で作成されたHelperのほとんどは、馴染みさを増やすために使っております。</p>\\n<pre><code class=\\\"language-ts\\\">class EChartsHelper{\\n    private Mychart: EChartsType\\n    \\n    constructor(dom:HTMLElement|undefined|null,theme=\'lightGreen\'){\\n        if(dom){\\n            this.Mychart = echarts.init(dom,theme)\\n            this.Mychart.off(\'click\')\\n         }else{\\n            throw new Error(\'echarts init failed\')\\n         }  \\n    }\\n    /**\\n     * @type\\n     * 普通合并，永远不会删除组件 */\\n    updateMyChart(obj: object): void\\n    /**\\n     * @param notMerge 为true 则全部删除，默认false不写\\n     */\\n    updateMyChart(obj: object,notMerge:boolean): void\\n    /**\\n     * \\n     * @param notMerge 默认false不需要传 \\n     * @param replaceMerge 哪些组件需要替换更新——有就更新，没有就删除\\n     */\\n    updateMyChart(obj: object,{replaceMerge}: {replaceMerge: Array&lt;string&gt;|string}): void\\n    updateMyChart(obj:object,s?:any):void {\\n        if(s){\\n            if(typeof s == \'boolean\'){}\\n            else{\\n               if(s.replaceMerge &amp;&amp; (Array.isArray(s.replaceMerge)|| typeof s.replaceMerge==\'string\')){}\\n               else{\\n                   throw new Error(\'ECharts setOption params error\')\\n               }\\n            }\\n            this.Mychart.setOption(obj as echarts.EChartsCoreOption,s)\\n        }\\n        this.Mychart.setOption(obj as echarts.EChartsCoreOption)\\n    }\\n    // setOn(event: string,series=\'\',F: Function){\\n    //     this.Mychart.on(event,\'series\',()=&gt;{\\n    //         F()\\n    //     })\\n    // }\\n    setOn(event: string,F:Function): void\\n    setOn(event: string,F: Function,series: string): void\\n    setOn(event: string,F: Function,c?: any): void{\\n        if(!c){\\n            c = \'series\'\\n        }\\n        this.Mychart.on(event,c,(param: object)=&gt;{\\n                    F(param)\\n                })\\n    }\\n    setLoading(){\\n        this.Mychart.showLoading()\\n    }\\n    hideLoading(){\\n        this.Mychart.hideLoading()\\n    }\\n    triggerAction(action: string, name: string){\\n        this.Mychart.dispatchAction({type:action,name})\\n    }\\n    get chart(){\\n        return this.Mychart\\n    }\\n\\n    get width(){\\n       return this.Mychart.getWidth()*0.8\\n    }\\n    resize(){\\n        this.Mychart.resize()\\n    }\\n   dispose(){\\n       this.Mychart.dispose()\\n   }\\n   static of(dom: HTMLElement|undefined|null,theme=\'lightGreen\'){\\n        return new EChartsHelper(dom,theme)\\n    }\\n\\n}\\n</code></pre>\\n<pre><code class=\\\"language-ts\\\">class AxiosHelper{\\n     private static axios:AxiosStatic = axios\\n     static async getData(url: string): Promise&lt;any&gt;\\n     static async getData(url: string,type: string): Promise&lt;any&gt;\\n     static async getData(url: string,data:{[k: string]:any}): Promise&lt;any&gt;\\n     static async getData(url: string,data:{[k: string]:any},type: string): Promise&lt;any&gt;\\n     static async getData(url: string,b?:any,c?: string){\\n         if(b){\\n             if(typeof b == \'object\'){\\n                 if(c &amp;&amp; typeof c==\'string\'){\\n                     return this.request(url,b,c as Method)\\n                 }else{\\n                     return this.request(url,b)\\n                 }\\n             }else{\\n                 if(typeof b == \'string\'){\\n                     return this.requstUrl(url,b)\\n                 }else{\\n                    throw new Error(\'参数格式错误\')\\n                }        \\n             }\\n         }else{\\n            //  b=&quot;POST&quot; \\n             return  this.requstUrl(url)\\n         }\\n\\n     }\\n\\n     static async request(url: string,data:{} = {},type: Method =&quot;post&quot; ){\\n       return await this.axios({\\n            url: url,\\n            data: qs.stringify(data),\\n            method:type\\n         }).then(value=&gt;{\\n             if(value.data){\\n                 return value.data\\n             }else{\\n                 throw new Error(&quot;无数据&quot;+url);\\n             }\\n         },reason=&gt;{throw reason}).catch((e: Error)=&gt;{console.error(e)})\\n         \\n\\n     }\\n     static async requstUrl(url: string,b=\'POST\'){\\n        return await this.axios({\\n            url: url,\\n            method:b as Method\\n         }).then(value=&gt;{\\n             if(value.data){\\n                 return value.data\\n             }else{\\n                 throw new Error(&quot;无数据&quot;);\\n             }\\n         },reason=&gt;{throw reason}).catch((e: Error)=&gt;{console.error(e)})\\n     }\\n     static get Axios(){\\n         return this.axios\\n     }\\n\\n     \\n\\n} \\n</code></pre>\\n<p>カルーセルページツール。書く前に長い間考えました。今はとても低く見えます。</p>\\n<pre><code class=\\\"language-ts\\\">class Carousel{\\n    /**\\n     * 所有可选页面\\n     */\\n     private pageNames: string[]\\n     /**\\n      * 控制轮播开始与暂停\\n      */\\n     private canCarousel = true\\n     /**\\n      * 获取下一个轮播页面名\\n      */\\n     private nextPage: Generator&lt;string | void, void, unknown&gt; = this.getNextPage()\\n     /**\\n      * 每个页面停留时间\\n      */\\n     private interval:number;\\n     constructor(config: typeof carouselConfig){\\n        const {carouselInterval,loopIndex} = config\\n        this.interval = carouselInterval\\n        this.pageNames = loopIndex\\n     }\\n\\n    private *getNextPage(){\\n         const currentPage = getCookie(\'currentPageName\')\\n         /**\\n          * \\n          * 从循环的下一个页面开始\\n          * */\\n         let p =  this.pageNames\\n         if(p.includes(currentPage)){\\n            p = p.slice(p.indexOf(currentPage)+1)\\n            p = p.length?p:this.pageNames   \\n         }\\n        let t = this.pages(p)\\n        let res = t.next()\\n        while(true){\\n            if(res.done){\\n                t = this.pages()\\n                res = t.next()\\n            }\\n            yield res.value\\n            res = t.next()\\n        } \\n    }\\n     private *pages(pages = this.pageNames){\\n        if(!pages.length)\\n           yield \'\'\\n        \\n        for(let i of pages){\\n            yield i\\n        }\\n     }\\n     start(){\\n       this.canCarousel = true\\n       this.carousel() \\n     }\\n     // 主要逻辑其实只是这里\\n     async carousel(){\\n        const next = this.nextPage.next()\\n        if(next.value &amp;&amp; store.getters.getLoginIdentity){\\n            const path = getPathByPageName(next.value as string)\\n            this.canCarousel &amp;&amp; Router.push(path).catch(e=&gt;{\\n                Router.push({name:&quot;back&quot;})\\n                setTimeout(()=&gt;{\\n                    Router.replace(path)\\n                },500)\\n            })\\n        }\\n        await sleep(this.interval)\\n        this.canCarousel &amp;&amp; this.carousel()\\n     }\\n\\n     stopCarousel(){\\n         this.canCarousel = false\\n     }\\n     static of(){\\n         return new Carousel(carouselConfig)\\n     }\\n     setNextPage(){\\n        this.nextPage = this.getNextPage()\\n     }\\n}\\n</code></pre>\\n<p>主に 2 つの問題があるようです。</p>\\n<ol>\\n<li>単機能の原則に違反します。</li>\\n</ol>\\n<p>​    これは明らかにカルーセルをルーティングするためのツールですが、そのほとんどは無限ループを実行しています。実際、主なロジックは再生と停止を制御することです。次のものに無制限にアクセスでき、個別に上げることができます。</p>\\n<ol start=\\\"2\\\">\\n<li>\\n<p>きちんと止められない</p>\\n<p>極端な場合、停止が呼び出されたとき、その時点ではスリープ状態であり、スリープが終了する前に再開しても実際には意味がありません。</p>\\n</li>\\n</ol>\\n<h3 id=\\\"%E6%94%B9%E8%89%AF%E3%81%95%E3%82%8C%E3%81%9F%E3%82%AB%E3%83%AB%E3%83%BC%E3%82%BB%E3%83%AB\\\" tabindex=\\\"-1\\\">改良されたカルーセル</h3>\\n<p>無限Loop</p>\\n<pre><code class=\\\"language-ts\\\">type Item&lt;T&gt; = T extends Iterable&lt;infer R&gt;?R:never\\nclass LoopIteratorData&lt;T extends Iterable&lt;TItem&gt;,TItem = Item&lt;T&gt;&gt;{\\n\\tprivate _generator: Generator&lt;TItem,TItem,any&gt;\\n\\tprivate _index = 0\\n\\tprivate _destroyed = false\\n\\tconstructor(private _data:T){\\n\\t\\tthis.createGenerator()\\n\\t}\\n\\tprivate createGenerator(){\\n\\t\\tthis._generator = LoopIteratorData.createGenerator(this._data)\\n\\t\\tthis._index = 0\\n\\t}\\n\\tnext():{value:TItem,index:number}{\\n\\t\\tif(this._destroyed){\\n\\t\\t\\tthrow new Error(\'loop is over\')\\n\\t\\t}\\n\\t\\tconst value = this._generator.next()\\n\\t\\tif(!value.done){\\n\\t\\t\\treturn {value:value.value,index:this._index++}\\n\\t\\t}else{\\n\\t\\t\\tthis.createGenerator()\\n            return this.next()\\n\\t\\t}\\n\\t}\\n\\tdestory(){\\n\\t\\ttry{\\n\\t\\t\\tthis._destroyed = true\\n\\t\\t\\tthis._generator.throw(\'手动停止\')\\n\\t\\t}catch(e){\\n\\t\\t}\\n\\t}\\n    //创建生成器直接挂在了类构造器上了\\n    static createGenerator&lt;T extends Iterable&lt;TItem&gt;,TItem = Item&lt;T&gt;&gt;(data:T){\\n\\t\\tfunction *g(){\\n            for(let i of data){\\n\\t\\t\\t\\tyield i\\n\\t\\t\\t}\\n\\t\\t} \\n\\t\\treturn g() as Generator&lt;TItem,TItem,any&gt;\\n        \\n\\t}\\n}\\n</code></pre>\\n<p>カルーセルメソッド。実は<code>_loopInstance</code>は  <code>interface ILoopInstance{ next():{value:TItem,index:number}}</code>をimplementさえすればいい</p>\\n<pre><code class=\\\"language-ts\\\">interface ICarouselExecuteObject&lt;T extends Iterable&lt;TItem&gt;&gt;{\\n    exec(value: {value:TItem,index:number}):void\\n}\\n\\nclass Carousel&lt;T extends Iterable&lt;TItem&gt;&gt;{\\n    private _timer: number\\n    constructor(private _loopInstance: LoopIteratorData&lt;T&gt;,\\n                private _executeInstance: ICarouselExecuteObject&lt;T&gt;,\\n                private _interval = 5000\\n                ){}\\n    start(){\\n        if(this.isLooping){\\n            console.warn(&quot;is looping&quot;)\\n            return\\n        }\\n        this.carouselIt()\\n    }\\n    stop(){\\n        this._timer &amp;&amp; clearInterval(this._timer)\\n        this._timer = null\\n    }\\n    private carouselIt(){\\n        this._timer = setTimeout(()=&gt;{\\n            this._executeInstance.exec(_loopInstance.next())\\n            this.carouselIt()\\n        },this._interval)\\n    }\\n    get isLooping(){\\n        return !!this._timer\\n    }\\n    \\n}\\n</code></pre>\\n<p>これは、単一関数の原則に準拠しているだけでなく、<code>implements ICarouselExecuteObject </code>を満足している限り、カルーセルで何をしたいかは関係ありません。こんな感じで、少なくとも今はまだかなり優雅な気分です。</p>\\n<h2 id=\\\"%E5%85%B1%E9%80%9A%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88\\\" tabindex=\\\"-1\\\">共通コンポーネント</h2>\\n<h3 id=\\\"echarts%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88\\\" tabindex=\\\"-1\\\">echartsコンポーネント</h3>\\n<p>粒度が大きすぎる気がします。プロップにはタイプがなく、明らかに ts です。</p>\\n<pre><code class=\\\"language-ts\\\">export default Vue.extend({\\n    data(){\\n        return {\\n            myChart:null as null|EChartsHelper,\\n        }\\n    },\\n    props:[&quot;custom&quot;,\'dataset\'],\\n    created(){\\n       this.initPie() \\n    },\\n    beforeDestroy(){\\n        this.myChart?.dispose()\\n        this.myChart = null\\n    }\\n    ,methods:{\\n       initPie(){\\n           if(!this.custom || !this.custom.title){\\n               return\\n           }\\n           const div = document.getElementById(`${this.custom.title}`)\\n          \\n           if(!div){\\n               return      \\n           }\\n            this.myChart = EChartsHelper.of(div)\\n            this.dataset &amp;&amp; this.myChart.updateMyChart(this.dataset)\\n            this.myChart.setOn(\'click\',(params: {[k:string]:any})=&gt;{\\n                 let index = params.seriesIndex as number|undefined     \\n                 this.$emit(\'clickPie\',this.custom.title,getType(index))\\n               })\\n           }\\n           \\n       }\\n\\n    },\\n  \\n    watch:{\\n        dataset:{\\n            handler(){         \\n                this.myChart?.updateMyChart({dataset:{source:this.dataset},title})\\n            }\\n          }\\n        },\\n       async menuOpen(){ \\n           const timer = setInterval(()=&gt;{\\n               this.myChart?.resize()  \\n            },1000)\\n            setTimeout(() =&gt; {\\n                clearInterval(timer)\\n            }, 1000);      \\n        }, \\n    },\\n    \\n      computed:{\\n        ...mapGetters({\\n            menuOpen:&quot;menuOpen&quot;,\\n        }),\\n    \\n    },\\n})\\n\\n</code></pre>\\n<h3 id=\\\"upload-excel%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88\\\" tabindex=\\\"-1\\\">upload excelンポーネント</h3>\\n<p>ファイルの中身を読み込むのかはHooksなどを使うとコード量が減って読みやすくなるような気がします。</p>\\n<pre><code class=\\\"language-ts\\\">&lt;template&gt;\\n  &lt;div&gt;\\n    &lt;input ref=&quot;excel-upload-input&quot; class=&quot;excel-upload-input&quot; type=&quot;file&quot; accept=&quot;.xlsx, .xls&quot; @change=&quot;handleClick&quot;&gt;\\n     &lt;el-button :loading=&quot;loading&quot;  size=&quot;mini&quot; type=&quot;primary&quot; @click=&quot;handleUpload&quot;&gt;\\n        选择\\n      &lt;/el-button&gt;\\n      &lt;el-button size=&quot;mini&quot; type=&quot;primary&quot; @click=&quot;uploadExcel&quot;&gt;上传&lt;/el-button&gt;\\n      &lt;div class=&quot;myFile&quot;&gt;\\n            &lt;div v-if=&quot;excelData.fileName&quot; class=&quot;fileName&quot;&gt;\\n                {{excelData.fileName}} \\n                &lt;span&gt;(数据无误,请点击上传)&lt;/span&gt;\\n            &lt;/div&gt;\\n            &lt;div v-else&gt;\\n                未选择文件&lt;span&gt;(请选择上传文件)&lt;/span&gt;\\n            &lt;/div&gt;\\n      &lt;/div&gt;\\n  &lt;/div&gt;\\n&lt;/template&gt;\\n\\n&lt;script&gt;\\nimport XLSX from \'xlsx\'\\nexport default {\\n  props: {\\n     onUpload:Function\\n    ,dataFormat:{\\n        required:true,\\n        default:[],\\n        type:Array\\n    }\\n  },\\n  data() {\\n    return {\\n      loading: false,\\n      excelData: {\\n        header: null,\\n        results: null,\\n        fileName:null\\n      },\\n      \\n    }\\n  },\\n  methods: {\\n    uploadExcel(){\\n       this.onUpload &amp;&amp; this.onUpload(JSON.stringify(this.excelData.results))\\n    },\\n    generateData({ header, results }) {\\n      this.excelData.header = header\\n      results?.shift()\\n      this.excelData.results = results\\n    },\\n    handleUpload() {\\n      this.$refs[\'excel-upload-input\'].click()\\n    },\\n    handleClick(e) {\\n      const files = e.target.files\\n      const rawFile = files[0] // only use files[0]\\n      if (!rawFile) return\\n      this.readerData(rawFile)\\n    },\\n    readerData(rawFile) {\\n      const name = rawFile.name\\n      this.loading = true\\n      return new Promise((resolve, reject) =&gt; {\\n        const reader = new FileReader()  \\n        reader.onload = e =&gt; {  \\n          const data = e.target.result\\n          const workbook = XLSX.read(data, { type: \'array\' })\\n          const firstSheetName = workbook.SheetNames[0]\\n          const worksheet = workbook.Sheets[firstSheetName]\\n          const header = this.getHeaderRow(worksheet)\\n          if(this.dataFormat &amp;&amp; this.dataFormat.length){\\n              /*\\n              *@param {[{prop:string,label: string}]} ar1\\n               * @param {string[]} ar2\\n               */\\n              const checkFormat = (ar1 ,ar2)=&gt;{\\n                  if(ar1.length!=ar2.length)\\n                     return false\\n                  for(let i of ar1){\\n                      if(!ar2.includes(i.label)){\\n                          return false\\n                      }\\n                  }\\n                  return true\\n              }\\n              if(!checkFormat(this.dataFormat,header)){\\n                  this.loading = false\\n                  reject(\'上传格式有误\')\\n                  return\\n              }\\n\\n          }\\n          const results = XLSX.utils.sheet_to_json(worksheet,{header:this.dataFormat.map(v=&gt;v.prop)})\\n          this.generateData({ header, results })\\n          this.excelData.fileName = name\\n          this.loading = false\\n          resolve()\\n        }\\n        reader.readAsArrayBuffer(rawFile)\\n      }).catch(e=&gt;{\\n           this.$message({\\n                      type:\'warning\',\\n                      message:e\\n           })\\n      })\\n    },\\n    getHeaderRow(sheet) {\\n      const headers = []\\n      const range = XLSX.utils.decode_range(sheet[\'!ref\'])\\n      let C\\n      const R = range.s.r\\n      /* start in the first row */\\n      for (C = range.s.c; C &lt;= range.e.c; ++C) { /* walk every column in the range */\\n        const cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })]\\n        /* find the cell in the first row */\\n        let hdr = \'UNKNOWN \' + C // &lt;-- replace with your desired default\\n        if (cell &amp;&amp; cell.t) hdr = XLSX.utils.format_cell(cell)\\n        headers.push(hdr)\\n      }\\n      return headers\\n    },\\n    isExcel(file) {\\n      return /\\\\.(xlsx|xls|csv)$/.test(file.name)\\n    }\\n  }\\n}\\n&lt;/script&gt;\\n</code></pre>\\n<h2 id=\\\"store\\\" tabindex=\\\"-1\\\">Store</h2>\\n<p>モジュールがないとまだ非常に混んでて、URLみたいな一部は環境変数で処理できますので、Storeにある必要はないと思います。主な機能はユーザー情報を保存し、メニューが展開されたかどうかを記録することでechart のサイズを変更する。</p>\\n<pre><code class=\\\"language-ts\\\">export default new Vuex.Store({\\n  state: {\\n    userName:null as null|string,\\n    login:false,\\n    frameLabels:null as null|Iterable&lt;{key:string,value:string|null|number}&gt;,\\n    pageName:\'S4大数据\',\\n    url:isOnline?onlineUrl:testUrl,\\n\\n    continue:true,\\n    frameLabelsTimer:null as null|number,\\n    countDownTimer:null as null|number,\\n    menuOpen:true,\\n    imgSrc:&quot;&quot;,\\n    ...\\n  },\\n   getters:{...},\\n   mutations:{...},\\n   actions:{...}\\n}\\n</code></pre>\\n<h2 id=\\\"route\\\" tabindex=\\\"-1\\\">Route</h2>\\n<p>個人的にこのプロジェクトの最大の欠点は、ルートは設定されているが、メニューの内容は手動で設定する必要があること、それにハードコードだと思われています。当時、私はルートにmetaを付けてもいいのを知りませんでした。</p>\\n<pre><code class=\\\"language-ts\\\">const menuName = [\'一阶\',\'二阶\',...]\\nconst menuRouter:{[k in number]:RawLocation} = {\\n    0:{\\n        name:\'step1\',params:{\\n            pageName:\'一阶\'\\n        }\\n    },\\n    1:{\\n        name:&quot;step2&quot;,\\n        params:{\\n            pageName:\'二阶\'\\n        }\\n    \\n    },\\n  ...    \\n]\\n\\n</code></pre>\\n<pre><code class=\\\"language-vue\\\">&lt;el-menu-item-group&gt;\\n      &lt;el-menu-item  v-for=&quot;(item,index) in menuName&quot; :key=&quot;index&quot; :index=&quot;getIndex(index)&quot; @click=&quot;turn2Page(index)&quot;\\n      class=&quot;S4Item&quot;&gt;{{item}}&lt;/el-menu-item&gt;\\n&lt;/el-menu-item-group&gt;\\n</code></pre>\\n<h2 id=\\\"%E3%81%BE%E3%81%A8%E3%82%81\\\" tabindex=\\\"-1\\\">まとめ</h2>\\n<p>この期間に、複雑な問題を解決する能力を身につけてきたように感じますが、いくつかの基本的なプログラミングの考え方や原則については十分に学習していません。つまり、基礎思想とかが十分ではないため、出てくるコードはこのとおりです。あまりにも読みにくくて、保守しにくい。そのため、Vue の原則、設計原則、アルゴリズムについては後ほど補足していきます。</p>\\n\"','Y','/img/msp0.gif','1','0','2024-09-23','2024-09-23 14:38:58','2024-09-23 16:38:08'),(5,'キャビティー管理システム','キャビティー管理システム','[{\"anchor\":\"vsp0modules\",\"name\":\"VSP0Modules\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E6%95%88%E6%9E%9C\",\"name\":\"效果\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E6%A7%8B%E9%80%A0\",\"name\":\"プロジェクトの構造\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"layout\",\"name\":\"Layout\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"%E3%83%91%E3%83%96%E3%83%AA%E3%83%83%E3%82%AF%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%A8%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88\",\"name\":\"パブリックメソッドとコンポーネント\",\"tag\":\"h3\",\"children\":[]}]}]}]','\"<h1 id=\\\"vsp0modules\\\" tabindex=\\\"-1\\\">VSP0Modules</h1>\\n<p>やっと vue3 を始めました。とても忙しかったので vue2 を使ったほうが簡単ですが、勉強をやめたくなかったので vue3 を使いました。</p>\\n<h2 id=\\\"%E6%95%88%E6%9E%9C\\\" tabindex=\\\"-1\\\">效果</h2>\\n<p><img src=\\\"C:%5CUsers%5CASUS%5CDesktop%5Cproject%5Cvsp0all.png\\\" alt=\\\"vsp0all\\\"></p>\\n<p><img src=\\\"C:%5CUsers%5CASUS%5CDesktop%5Cproject%5Cvsp0.gif\\\" alt=\\\"vsp0\\\"></p>\\n<h2 id=\\\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E6%A7%8B%E9%80%A0\\\" tabindex=\\\"-1\\\">プロジェクトの構造</h2>\\n<p>構造は出来ていたと思います</p>\\n<p>![image-20240827222802818](C:\\\\Users\\\\ASUS\\\\Pictures\\\\Saved Pictures\\\\image-20240827222802818.png)</p>\\n<h2 id=\\\"layout\\\" tabindex=\\\"-1\\\">Layout</h2>\\n<p>現時点で私の目に写っている Web ページは、LayOut に Route-view を追加したものです。Layout にはあまり気を配らず、ストア内で使用したいものを保存するだけで、Route-view に重点を置いています。</p>\\n<h3 id=\\\"%E3%83%91%E3%83%96%E3%83%AA%E3%83%83%E3%82%AF%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%A8%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88\\\" tabindex=\\\"-1\\\">パブリックメソッドとコンポーネント</h3>\\n<p>おそらくフォーム（クエリ条件でもメンテナンス情報でも）＋ボタン（一部の操作）＋テーブル（結果）という構造が多く、無意識のうちに今のスタイルが形成されているのでしょう。</p>\\n<p>しかし、それは2つの時期に分けることができます。</p>\\n<h4>1.  typescript高度な学習を経て</h4>\\n<p>OOP に夢中になり、フロントエンドとバックエンドを統合したいと考えました。</p>\\n<h5>axios</h5>\\n<pre><code class=\\\"language-ts\\\">class AxiosHelper{\\n        public  request:&lt;T&gt;(config: AxiosRequestConfig) =&gt; Promise&lt;T&gt;\\n        private instance:AxiosInstance\\n        private constructor(){\\n            this.instance= this.createInstance()\\n            this.request = this.createRequset()\\n        }\\n        private createInstance(){\\n            const instance = axios.create()\\n            //设置拦截器\\n            instance.interceptors.request.use(config=&gt;{\\n              return  config\\n            },error=&gt;Promise.reject(error))\\n            instance.interceptors.response.use(\\n                response=&gt;{\\n                const apiData = response.data as IApiResponseData&lt;any&gt;                \\n                return apiData as any\\n\\n            },\\n            error=&gt;Promise.reject(error)\\n            \\n            )\\n            return instance\\n        }\\n        private createRequset(){\\n            return  &lt;T&gt;(config:AxiosRequestConfig):Promise&lt;T&gt;=&gt;{\\n                const defaultConfig:AxiosRequestConfig = {\\n                    headers:{\\n                        Authorization:\'\',\\n                        \'Content-Type\':config.headers?.[\'Content-Type\']||\'application/json\',\\n                       \\n                    },\\n                    timeout: 10000,\\n                    baseURL: import.meta.env.VITE_BASE_API\\n                    // process.env.VUE_APP_BASE_URL\\n                    ,\\n                    data: {}\\n                } \\n                return  this.instance({...defaultConfig,...config})\\n           }\\n        }\\n        static _instance:AxiosHelper\\n        static instance(){\\n              if(this._instance){\\n                  return this._instance\\n              }else{\\n                  this._instance = new AxiosHelper()\\n                  return this.instance()\\n              }\\n        }\\n  \\n}\\n\\n const axiosHelper = AxiosHelper.instance()\\n</code></pre>\\n<h5>自分で書いたPromise</h5>\\n<pre><code class=\\\"language-ts\\\">enum Status{\\n     /**\\n         * 等待/准备\\n         */\\n     pending = \'pending\',\\n     /**\\n      * 执行态\\n      */\\n     fulFilled = &quot;fulFilled&quot;,\\n     /**\\n      * 拒绝\\n      */\\n     rejected = \'rejected\'\\n}\\n\\nclass MyPromise&lt;T&gt; implements MyPromiseTypes.IMyPromise&lt;T&gt;{\\n    /**\\n     * 三种状态\\n     */\\n    private status:MyPromiseTypes.TStatus\\n    /**\\n     * fulfilled value\\n     * rejected err\\n     * pending null\\n     */\\n    private result:T = null\\n    /**\\n     * 存储在当前promise里，即p里面，不是then的新的promisem,因为那个时候还没有生成\\n     * 因为一个promise后面可以分开跟着无数then\\n     * p.then()\\n     * p.then()\\n     * 需要一个queue去挨个执行\\n     */\\n    private handler:Array&lt;MyPromiseTypes.handlerItem&lt;T&gt;&gt; = []\\n    constructor(executor: (resolve?:MyPromise&lt;T&gt;[\'resolve\'],reject?:MyPromise&lt;T&gt;[\'reject\'])=&gt;any){\\n         this.status = Status.pending\\n         try{\\n            /**\\n             * 注意点，resolve执行是在executor内部，this指向有问题\\n             */\\n            executor(this.resolve.bind(this),this.reject.bind(this)) \\n         }catch(err){ \\n            this.reject(err)\\n         }\\n         \\n    }\\n    resolve&lt;TResovle = T&gt;(value: TResovle){\\n        this.changeStatus(Status.fulFilled,value)\\n    }\\n    reject(err){\\n        this.changeStatus(Status.rejected,err) \\n    }\\n    private changeStatus(status:keyof MyPromiseTypes.Status,result:any){\\n         if(this.status!==Status.pending) return //promise 状态不可逆\\n         this.status = status\\n         this.result = result \\n         this.run()\\n    }\\n    private isPromiseLike&lt;R extends MyPromiseTypes.IMyPromiseLike&lt;T&gt;&gt;(callback: R){\\n        if(callback &amp;&amp; (typeof callback==\'function\' || typeof callback==\'object\')){\\n             return typeof callback.then == \'function\'\\n        }\\n        return false  \\n    }\\n    \\n    private add2MicroTask(func: MyPromise&lt;T&gt;[\'resolve\']|MyPromise&lt;T&gt;[\'reject\']){\\n        //node 环境\\n        if(process &amp;&amp; typeof process=== \'object\' &amp;&amp; typeof process.nextTick === \'function\'){\\n            process.nextTick(func)\\n        }else if(MutationObserver &amp;&amp; typeof MutationObserver === \'function\'){\\n            const ob = new MutationObserver(func)\\n            const node = document.createTextNode(&quot;1&quot;)\\n            ob.observe(node,{\\n                characterData:true\\n            })\\n            node.data = &quot;2&quot;\\n        }else{\\n             setTimeout(func,0)\\n        }\\n    }\\n   \\n    then&lt;TReturn1 = T,TReturn2 = never&gt;(onfulfilled?:(res:T)=&gt;TReturn1|MyPromiseTypes.IMyPromiseLike&lt;TReturn1&gt;,onrejected?:(res: any)=&gt;TReturn2|MyPromiseTypes.IMyPromiseLike&lt;TReturn2&gt;):MyPromise&lt;TReturn1|TReturn2&gt;{\\n        return new MyPromise&lt;TReturn1|TReturn2&gt;((resolve,reject)=&gt;{\\n            this.handler.push({\\n                onfulfilled,onrejected,resolve,reject\\n            })\\n            /**\\n             * 注意，如果new 的时候是同步代码，then的时候其实已经执行完了，需要手动调用一次。\\n             * 如果异步没有完成，这次会因为pending状态而什么都没做，等异步完成通过resolve，reject时候调用执行\\n             */\\n            this.run()\\n        })\\n        \\n        \\n    }\\n   \\n    \\n    private runOneItem&lt;R extends MyPromiseTypes.handlerItem&lt;T&gt;&gt;({onfulfilled,onrejected,reject,resolve}:R){\\n         this.add2MicroTask(()=&gt;{\\n            const callback = this.status===Status.fulFilled?onfulfilled:onrejected\\n            \\n            //如果不是函数，新promise resolve 之前的result\\n            if(typeof callback !== \'function\'){\\n                const settled = this.status === Status.fulFilled?resolve:reject\\n                settled(this.result)\\n                return\\n            }\\n            //是函数，如果执行成功就resolve,就算是onrejected里面的，也是resolve\\n            try{\\n                    const data = callback(this.result)\\n                    if(this.isPromiseLike(data)){\\n                        (data as MyPromise&lt;any&gt;).then(resolve,reject)\\n                    }else{\\n                        resolve(data)\\n                    }\\n                \\n            }catch(err){\\n                reject(err)\\n            }\\n            }\\n        )\\n\\n    }\\n\\n\\n \\n    private run(){\\n         if(this.status===Status.pending) return\\n         else{\\n            while(this.handler.length){\\n                this.runOneItem(this.handler.shift())\\n            }\\n         }\\n    }\\n}\\ndeclare namespace MyPromiseTypes{\\n\\n    declare enum Status{\\n        /**\\n         * 等待/准备\\n         */\\n        pending:\'pending\',\\n        /**\\n         * 执行态\\n         */\\n        fulFilled:&quot;fulFilled&quot;,\\n        /**\\n         * 拒绝\\n         */\\n        rejected:\'rejected\'\\n    }\\n    interface IMyPromiseLike&lt;T&gt;{\\n         then:IMyPromise&lt;T&gt;[\'then\']\\n    }\\n    type TStatus = keyof Status\\n    interface handlerItem&lt;T&gt;{\\n        resolve: MyPromise&lt;T&gt;[\'resolve\']\\n        reject: MyPromise&lt;T&gt;[\'reject\']\\n        onfulfilled:Parameters&lt;IMyPromise&lt;T&gt;[\'then\']&gt;[0]\\n        onrejected(res: any):any\\n    } \\n\\n    interface IMyPromise&lt;T&gt;{\\n        // status:keyof Status\\n        /**\\n         * pending-&gt;fulfilled\\n         */\\n        resolve&lt;R = T&gt;(value:R):void\\n        /**\\n         * pending=&gt;rejected\\n         */\\n        reject(value: any):void\\n        /**\\n         * \\n         * @param onfulfilled \\n         * @param onrejected \\n         * @description 需要执行的回调,全部存在handler数组里面了，执行当状态改变会执行回调函数\\n         * 回调分为三种 \\n         * 1.函数，执行成功resolve，失败reject\\n         * 2.promiseLike即有then回调的\\n         * 3.非上面两种，直接将继承之前的promise状态与值\\n         */\\n        then&lt;TReturn1 = T,TReturn2 = never&gt;(onfulfilled:(res:T)=&gt;TReturn1|IMyPromiseLike&lt;TReturn1&gt;,onrejected?:(res: any)=&gt;TReturn2|IMyPromiseLike&lt;TReturn2&gt;):MyPromise&lt;TReturn1|TReturn2&gt;\\n        \\n    }\\n    \\n\\n}\\n</code></pre>\\n<h5>Form</h5>\\n<pre><code class=\\\"language-ts\\\">// form.d.ts\\n\\n/**\\n * all formitem type enum\\n */\\ndeclare  enum EFormItemType{\\n   input = \'input\',\\n   date = \'date\',\\n   select = \'select\'\\n}\\n/**\\n * all formitem type\\n */\\ntype TSearchItem = keyof typeof EFormItemType\\n/**\\n * if formitem is select,then it can has some options\\n * option type\\n */\\ntype TSelectOption&lt;T extends string = string&gt; = T | {value:T,label: string} \\n\\n/**\\n * getFormTemplate params.\\n * can auto fill content\\n */\\ninterface IFormTemplateOption&lt;T extends (string[]|readonly string[]),TType extends Partial&lt;Record&lt;ArrayKey&lt;T&gt;,EFormItemType&gt;&gt;&gt;{\\n\\tlabels:string[],\\n\\tprops:T, \\n\\ttypes?:TType,\\n\\toptions?:{\\n\\t\\t [k in keyof TType as TType[k] extends EFormItemType.select?k :never]?: TSelectOption[]\\n\\t},\\n\\treadonlys?:{[k in ArrayKey&lt;T&gt;]?:boolean}\\n }\\n /**\\n  * getFormTemplate Return data\\n  */\\n interface IFormItem&lt;T extends string&gt;{\\n\\t label: string,\\n\\t prop: T\\n\\t type?:EFormItemType\\n\\t options?:IFormItem&lt;T&gt;[\'type\'] extends EFormItemType.select?TSelectOption[]:never\\n\\t readonly?:boolean\\n }\\n\\n\\n\\n/**\\n * getFormData param\\n */\\ninterface IFormDataOption&lt;T extends string[]|readonly string[]&gt;{\\n\\tprops:T,\\n\\tdefaultData?:Partial&lt;Record&lt;ArrayKey&lt;T&gt;,string&gt;&gt;\\n}\\n\\n\\n /**\\n  * formitem type\\n  */\\n type ICondition&lt;T extends string&gt; = {\\n\\t[k in  T]: string\\n }\\n\\n\\n interface IFormComponent&lt;T extends string = any&gt;{\\n    template: IFormItem&lt;T&gt;[]\\n\\tformdata: ICondition&lt;T&gt;\\n }\\n\\n//form.ts\\n\\nexport enum EFormItemType  {\\n\\tinput = \'input\',\\n\\tdate = \'date\',\\n\\tselect = \'select\'\\n}\\n\\nexport function getFormTemplate&lt;\\n        T extends string[]|readonly string[],\\n\\t\\tR extends Partial&lt;Record&lt;ArrayKey&lt;T&gt;,EFormItemType&gt;&gt;\\n&gt;({labels,props,types,options,readonlys}:IFormTemplateOption&lt;T,R&gt;){\\n\\ttypes = types||{} as R\\n    options = options||{}\\n    readonlys = readonlys||{}\\n    if(labels.length !== props.length){\\n      throw new Error(\'label and prop are not corrent\')\\n    }\\n    return props.map((prop:ArrayKey&lt;T&gt;,i)=&gt;{\\n      const label = labels[i] \\n      const type = types[prop] \\n      const option = options[prop as any] as TSelectOption[]\\n      const readonly = readonlys[prop]\\n      return {\\n          label,prop,\\n          ...type?{type}:{},\\n          ...option?{option}:{},\\n          ...readonly?{readonly}:{}\\n      }\\n   })\\n}\\n\\nexport function getFormData&lt;T extends string[]|readonly string[]&gt;({props,defaultData={}}:IFormDataOption&lt;T&gt;){\\n    return Object.fromEntries(props.map(v=&gt;[v,defaultData[v]||null]))  as ICondition&lt;ArrayKey&lt;T&gt;&gt;\\n}\\n</code></pre>\\n<pre><code class=\\\"language-vue\\\">\\n&lt;script lang=&quot;ts&quot; setup&gt;\\nimport { EFormItemType } from \'@/utils/template/form\'\\nconst { formdata, template } = defineProps&lt;IFormComponent&gt;()\\n&lt;/script&gt;\\n\\n&lt;template&gt;\\n\\t&lt;div class=&quot;form-container&quot;&gt;\\n\\t\\t&lt;ElForm inline&gt;\\n\\t\\t\\t&lt;template v-for=&quot;item of template&quot; :key=&quot;item.prop&quot;&gt;\\n\\t\\t\\t\\t&lt;slot :name=&quot;item.prop&quot;&gt;\\n\\t\\t\\t\\t\\t&lt;ElFormItem class=&quot;form-item&quot; :label=&quot;item.label&quot;&gt;\\n\\t\\t\\t\\t\\t\\t&lt;template v-if=&quot;item.type === EFormItemType.select&quot;&gt;\\n\\t\\t\\t\\t\\t\\t\\t&lt;ElSelect v-model=&quot;formdata[item.prop]&quot;&gt;\\n\\t\\t\\t\\t\\t\\t\\t\\t&lt;template v-if=&quot;item.options&quot; v-for=&quot;(option, index) of &lt;TSelectOption[]&gt;item.options &quot;&gt;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t&lt;ElOption v-if=&quot;typeof option === \'object\'&quot; :label=&quot;option.label&quot;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t:value=&quot;option.value&quot; :key=&quot;index&quot;&gt;&lt;/ElOption&gt;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t&lt;ElOption v-else :label=&quot;option&quot; :value=&quot;option&quot;&gt;&lt;/ElOption&gt;\\n\\t\\t\\t\\t\\t\\t\\t\\t&lt;/template&gt;\\n\\t\\t\\t\\t\\t\\t\\t&lt;/ElSelect&gt;\\n\\t\\t\\t\\t\\t\\t&lt;/template&gt;\\n\\t\\t\\t\\t\\t\\t&lt;template v-if=&quot;item.type === EFormItemType.date&quot;&gt;\\n\\t\\t\\t\\t\\t\\t\\t&lt;ElDatePicker v-model=&quot;formdata[item.prop]&quot; format=&quot;YYYY-MM-DD&quot; value-format=\'YYYY-MM-DD\'\\n\\t\\t\\t\\t\\t\\t\\t\\tclearable&gt;&lt;/ElDatePicker&gt;\\n\\t\\t\\t\\t\\t\\t&lt;/template&gt;\\n\\t\\t\\t\\t\\t\\t&lt;template v-else&gt;\\n\\t\\t\\t\\t\\t\\t\\t&lt;ElInput v-model=&quot;formdata[item.prop]&quot;&gt;&lt;/ElInput&gt;\\n\\t\\t\\t\\t\\t\\t&lt;/template&gt;\\n\\n\\t\\t\\t\\t\\t&lt;/ElFormItem&gt;\\n\\t\\t\\t\\t&lt;/slot&gt;\\n\\t\\t\\t&lt;/template&gt;\\n\\t\\t\\t&lt;ElFormItem class=&quot;form-item&quot;&gt;\\n\\t\\t\\t\\t&lt;slot name=&quot;last&quot;&gt;&lt;/slot&gt;\\n\\t\\t\\t&lt;/ElFormItem&gt;\\n\\n\\t\\t&lt;/ElForm&gt;\\n\\t&lt;/div&gt;\\n&lt;/template&gt;\\n</code></pre>\\n<h5>buttons</h5>\\n<pre><code class=\\\"language-ts\\\">// buttons.d.ts\\nimport type { ButtonType } from &quot;element-plus&quot;\\nimport { DefineComponent } from &quot;vue&quot;\\n\\ndeclare global {\\n  type TButtonType = ButtonType\\n  type TIcon = DefineComponent\\n  \\n  interface IButtonOption&lt;T extends string[]| readonly string[]&gt; {\\n    labels: string[]\\n    props: T\\n    icons?: Partial&lt;Record&lt;ArrayKey&lt;T&gt;,TIcon&gt;&gt;\\n    types?: Partial&lt;Record&lt;ArrayKey&lt;T&gt;,TButtonType&gt;&gt;,\\n  }\\n\\n  interface IButtonItem&lt;T extends string&gt;{\\n     label: string\\n\\t prop: T\\n\\t icon?: TIcon\\n\\t type?:TButtonType\\n  }\\n\\n  interface IButtonProps&lt;T = any&gt;{\\n\\t  template: IButtonItem&lt;T&gt;[]\\n\\t//   events:Partial&lt;Record&lt;TEvent,(...any)=&gt;any&gt;&gt;\\n  }\\n}\\n//button.ts\\nexport function getButtonTemplate&lt;T extends string[]| readonly string[]&gt;({props,labels,icons={},types={}}:IButtonOption&lt;T&gt;){\\t\\n    if(labels.length !== props.length){\\n       throw new Error(\'length is diff between labels and props\')\\n\\t}\\n\\treturn props.map((prop:ArrayKey&lt;T&gt;,index)=&gt;{\\n\\t\\t const label = labels[index]\\n\\t\\t const res:IButtonItem&lt;ArrayKey&lt;T&gt;&gt; = {\\n\\t\\t\\tprop,\\n\\t\\t\\tlabel,\\n\\t\\t }\\n\\t\\t icons[prop] &amp;&amp; Reflect.set(res,\'icon\',icons[prop])\\n\\t\\t types[prop] &amp;&amp; Reflect.set(res,\'type\',types[prop])\\n\\t\\t return res\\n\\t})\\n\\n}\\n</code></pre>\\n<pre><code class=\\\"language-vue\\\">&lt;script lang=&quot;ts&quot; setup&gt;\\nconst {template,} = defineProps&lt;IButtonProps&gt;()\\nconst emit = defineEmits&lt;{\\n\\t(event: \'buttonClick\',item: IButtonItem&lt;any&gt;)\\n}&gt;()\\nfunction handleClick(e:MouseEvent,item: IButtonItem&lt;any&gt;){\\n\\te.stopPropagation()\\n    emit(\'buttonClick\',item)\\n\\t\\n}\\n&lt;/script&gt;\\n\\n&lt;template&gt;\\n\\t&lt;div class=&quot;buttons-container&quot;&gt;\\n\\t\\t&lt;ElButton v-for=&quot;item of template&quot; :key=&quot;item.prop&quot; :type=&quot;item.type&quot; :icon=&quot;item.icon&quot;\\n\\t\\t @click=&quot;e=&gt;handleClick(e,item)&quot;\\n\\t\\t&gt;{{ item.label }}&lt;/ElButton&gt;\\n\\t&lt;/div&gt;\\n&lt;/template&gt;\\n</code></pre>\\n<h5>table</h5>\\n<pre><code class=\\\"language-ts\\\">//table.d.ts\\nimport type { TableInstance } from &quot;element-plus&quot;\\nimport {UnwrapNestedRefs} from \'vue\'\\n\\ntype FuncFirstParam&lt;T extends (...arg: any) =&gt; any&gt; = T extends (\\n  ...arg: [infer R]\\n) =&gt; any\\n  ? R\\n  : any\\ntype TEvents = FuncFirstParam&lt;TableInstance[&quot;$emit&quot;]&gt;\\n\\ndeclare global {\\n  interface IPaginationTable&lt;T extends Record&lt;string, any&gt; = any&gt; {\\n    /**\\n     * 满足loading的querySelector用\\n     */\\n    class?: string\\n    tableConfig: UnwrapNestedRefs&lt;{\\n      tableData: T[]\\n      tableTemplate: Array&lt;\\n        Record&lt;&quot;label&quot; | &quot;prop&quot;, string&gt; &amp; { [k: string]: string }\\n      &gt;\\n    }&gt;\\n    columnConfig?: UnwrapNestedRefs&lt;TElTableColumnConfig&lt;string&gt;&gt;\\n    pagination?: UnwrapNestedRefs&lt;{\\n      currentPageNum: number\\n      pageSizes: number[]\\n      total: number\\n      pageSize: number\\n    }&gt;\\n    onClickRow?: (row: T) =&gt; any\\n    rowStyle?: (data: { row: T; rowIndex: number }) =&gt; Object\\n    events?: Partial&lt;Record&lt;TEvents, (...arg: any) =&gt; any&gt;&gt;\\n  }\\n  type TElTableColumnConfig&lt;T extends string&gt; = Partial&lt;\\n    Record&lt;\\n      T,\\n      {\\n        type?: &quot;input&quot; | &quot;select&quot; | &quot;color&quot;\\n        options?: { value: string; tip?: string; label: string }[] | string[]\\n        cannotedit?: true\\n        cannotshow?: true\\n      }\\n    &gt;\\n  &gt;\\n\\n  type TTableDataItem&lt;T extends string[]|readonly string[]&gt; = {\\n\\t   [k in ArrayKey&lt;T&gt;]: string\\n\\t  \\n  } &amp; { [k: string] : any}\\n\\n\\n  type TTableTemplateItem = Record&lt;\'label\'|\'prop\',string&gt;\\n}\\n//table.ts\\n\\nexport function getTableTemplate&lt;T extends string[]|readonly string[]&gt;({props,labels}:{props:T,labels: string[]}){\\n\\tif(props.length!==labels.length){\\n\\t\\tthrow new Error(\'length is diff between labels and props\')\\n\\t}\\n\\n\\treturn props.map((prop,i)=&gt;({prop,label:labels[i]}))\\n}\\n</code></pre>\\n<pre><code class=\\\"language-vue\\\">&lt;script lang=&quot;ts&quot; setup&gt;\\nimport { computed, toRefs,reactive } from \'vue\'\\nimport {paginationTable} from \'.\'\\n\\nconst props = withDefaults(defineProps&lt;paginationTable.IPaginationTable&gt;(),{\\n    pagination:()=&gt;reactive({  currentPageNum:1, pageSizes:[2,5,10], total:0, pageSize:5 }),\\n    columnConfig:()=&gt;reactive({}),\\n\\tevents:()=&gt;reactive({})\\n\\t\\n})\\nconst displayData = computed(()=&gt;{\\n    const {pageSize: size,currentPageNum: page,total} = toRefs(props.pagination)\\n    total.value = props.tableConfig.tableData.length\\n     const res = props.tableConfig.tableData.filter((x,i)=&gt;i&lt;size.value*page.value&amp;&amp;i&gt;=size.value*(page.value-1))\\n     return res\\n})\\n\\n&lt;/script&gt;\\n\\n\\n&lt;template&gt;\\n\\t&lt;div class=&quot;paginationTableContainer&quot;&gt;\\n    &lt;div class=&quot;paginationTable&quot; &gt;\\n        &lt;ElTable border stripe :class=&quot;class&quot; :data=&quot;displayData&quot; fit flexible highlight-current-row \\n\\t\\t height=&quot;100%&quot; :row-style=&quot;(rowStyle as any)&quot;\\n\\t      v-on=&quot;events&quot;\\n\\t\\t  &gt;\\n            &lt;template v-for=&quot;item of props.tableConfig.tableTemplate&quot; &gt;\\n                &lt;ElTableColumn min-width=&quot;150px&quot; v-if=&quot;!columnConfig[item.prop] || !columnConfig[item.prop].cannotshow&quot;  :label=&quot;item.label&quot; :prop=&quot;item.prop&quot; :key=&quot;item.prop&quot;\\n                   align=&quot;center&quot; resizable show-overflow-tooltip&gt;\\n                    &lt;template v-if=&quot;columnConfig[item.prop] &amp;&amp; columnConfig[item.prop].type==\'color\'&quot; #default=&quot;scope&quot;&gt;\\n                        &lt;ElColorPicker :model-value=&quot;scope.row[item.prop]&quot;  disabled&gt;&lt;/ElColorPicker&gt;\\n                    &lt;/template&gt;\\n                &lt;/ElTableColumn&gt;\\n           &lt;/template&gt;\\n        &lt;/ElTable&gt;\\n    &lt;/div&gt;\\n    &lt;ElPagination  v-model:page-size=&quot;pagination.pageSize&quot; v-model:current-page=&quot;pagination.currentPageNum&quot;\\n               :total=&quot;pagination.total&quot; :page-sizes=&quot;pagination.pageSizes&quot; layout=&quot;total, sizes, prev, pager, next, jumper&quot;\\n            &gt;&lt;/ElPagination&gt;\\n\\t\\t&lt;/div&gt;\\n&lt;/template&gt;\\n</code></pre>\\n<p>使用</p>\\n<pre><code class=\\\"language-vue\\\">&lt;script lang=&quot;ts&quot; setup&gt;\\nimport { reactive, ref,onBeforeMount } from \'vue\';\\nimport {formTemplate,conditions,buttonTemplate} from \'.\'\\nimport {TButtonProp,TTableItem} from \'backupModel\'\\nimport {backupModelList as backupModelListApi} from \'@/api/backupModel\'\\nimport { ElMessage, ElNotification} from \'element-plus\';\\nimport PaginationTable from \'@/components/publicComponents/paginationTable/index.vue\'\\nimport { paginationTable } from \'customComponent\'\\nimport { excelOut } from \'@/utils/excelHelper\';\\nimport { getExcelData, sleep } from \'@/utils/common\';\\nimport {TFormDataProp} from \'backupModel\'\\n\\nonBeforeMount(()=&gt;{\\n     backupModelListApi.getTableTemplate().then(v=&gt;{\\n         if(v.status){\\n             tableTemplate.value = v.data\\n         }\\n     })\\n})\\n\\nconst formData = ref(conditions)\\nconst tableData = ref&lt;TTableItem[]&gt;([])\\nconst tableTemplate = ref&lt;Array&lt;{prop:keyof TTableItem,label: string}&gt;&gt;([])\\nlet currentRow:TTableItem = null\\nconst tableConfig:Partial&lt;paginationTable.IPaginationTable&lt;TTableItem&gt;&gt; = {\\n    pagination:reactive({\\n        currentPageNum:1,\\n        pageSizes:[10,15,20],\\n        total:0,\\n        pageSize:15\\n      }),\\n\\t  events:{\\n\\t\\t\'row-click\':(row:TTableItem)=&gt;{\\t\\t\\t\\n            currentRow = row\\n\\t\\t},\\n\\t\\t\'row-dblclick\':(row:TTableItem)=&gt;{\\n\\t\\t\\t// console.log(row);\\n\\t\\t    formData.value.workOrderNumber = row.workOrderNumber\\n\\t\\t}\\n\\t  }\\n}\\n\\nconst buttonClick = &lt;T extends TButtonProp&gt;(type: T)=&gt;{\\n    const strategy:Record&lt;TButtonProp,()=&gt;any&gt; = {\\n         search(){\\n            // if(!formData.value.mouldSteelGrade){\\n            //     ElMessage.info(\'模具钢号为空\')\\n            //     return\\n            // }\\n            backupModelListApi.search({...formData.value,dom:\'.tableContainer\'}).then(v=&gt;{\\n                 if(v.status &amp;&amp; v.data){\\n                    //  ElMessage.success(\'查询成功\')\\n                     tableData.value = v.data\\n                 }else{\\n                     ElMessage.info(\'查询失败\')\\n                     tableData.value = []\\n                 }\\n            })\\n         },\\n         backupFinish(){\\n            if(!currentRow){\\n                 ElMessage.info(\'请选择要备模行\')\\n                 return\\n            }\\n\\t\\t\\tif(currentRow.workOrderNumber!==formData.value.workOrderNumber){\\n\\t\\t\\t\\tElMessage.info(\'请选择要备模行\')\\n\\t\\t\\t\\treturn\\n\\t\\t\\t}\\n\\n\\n\\n            backupModelListApi.backupFinish({...currentRow,dom:\'.tableContainer\',mouldSteelGrade:formData.value.mouldSteelGrade}).then(v=&gt;{\\n                if(v.status &amp;&amp; v.data){\\n                     ElMessage.success(\'备模成功\')\\n                     strategy.search()\\n                }else{\\n                    ElMessage.error(\'备模失败\')\\n                }\\n                \\n            })\\n         },\\n         excelOut(){\\n            if(!tableData.value.length){\\n                 ElMessage({type:\'info\',message:&quot;无数据可以导出&quot;})\\n                 return\\n            }\\n            const excelData = getExcelData({name:&quot;备模清单&quot;,tableTemplate: tableTemplate.value,tableData:tableData.value})\\n            excelOut(excelData.name,excelData.headers as any,excelData.series)\\n         }\\n    }\\n    strategy[type]()\\n}\\n\\nconst visibleChange = (prop:TFormDataProp,visible:boolean)=&gt;{\\n\\tconst strategy:Partial&lt;Record&lt;TFormDataProp,()=&gt;any&gt;&gt; = {\\n\\t\\t mouldSteelGrade:()=&gt;{\\n\\t\\t\\tif(visible){\\n\\t\\t\\t\\tconst mouldSteelGrade = ref()\\n\\t\\t\\t\\tconst templateRow = formTemplate.find(x=&gt;x.prop===prop);\\n\\t\\t\\t\\t(templateRow as any).loading = true\\n                backupModelListApi.getMouldSteelGradeFromMSch(formData.value).then(v=&gt;{\\n\\t\\t\\t\\t\\tif(v.status){\\n\\t\\t\\t\\t\\t\\ttemplateRow.option = v.data\\n\\t\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\t\\tElNotification({\\n\\t\\t\\t\\t\\t\\t\\ttitle:`getMouldSteelGradeFromMSch error`,\\n\\t\\t\\t\\t\\t\\t\\ttype:\'error\',\\n\\t\\t\\t\\t\\t\\t\\tmessage:v.data as any\\n\\t\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t}).finally(()=&gt;{\\n\\t\\t\\t\\t\\t(templateRow as any).loading = false\\n\\t\\t\\t\\t})\\n\\t\\t\\n\\t\\t\\t}\\n\\t\\t }\\n\\t}\\n\\tstrategy[prop] &amp;&amp; strategy[prop]()\\n}\\n\\n\\n\\n// console.log(formTemplate);\\n\\n\\n&lt;/script&gt;\\n\\n\\n&lt;template&gt;\\n    &lt;div class=&quot;backupModelList&quot;&gt;\\n        &lt;div class=&quot;header&quot;&gt;\\n            &lt;ElForm class=&quot;myForm&quot;&gt;\\n                &lt;!-- 之前的display:inline-block;不想改,就在下面加了一个flex的div --&gt;\\n                &lt;div&gt;\\n                    &lt;ElFormItem v-for=&quot;item of formTemplate&quot; :label=&quot;item.label&quot; :key=&quot;item.prop&quot;&gt;\\n                        &lt;ElSelect v-model=&quot;formData[item.prop]&quot; clearable v-if=&quot;item.type &amp;&amp; item.type===\'select\'&quot; \\n\\t\\t\\t\\t\\t\\t @visible-change=&quot;visible=&gt;visibleChange(item.prop,visible)&quot;\\n\\t\\t\\t\\t\\t\\t :loading=&quot;(item as any).loading&quot;\\n\\t\\t\\t\\t\\t\\t &gt;\\n\\t\\t\\t\\t\\t\\t\\t&lt;template v-if=&quot;item.option&quot;&gt;\\n\\t\\t\\t\\t\\t\\t\\t\\t&lt;ElOption v-for=&quot;op of item.option&quot; :key=&quot;op&quot; :value=&quot;op&quot; :label=&quot;op&quot;&gt;&lt;/ElOption&gt;\\n\\t\\t\\t\\t\\t\\t\\t&lt;/template&gt;\\n                        &lt;/ElSelect&gt;\\n                        &lt;ElInput v-else v-model=&quot;formData[item.prop]&quot;&gt;&lt;/ElInput&gt;\\n                    &lt;/ElFormItem&gt;\\n                &lt;/div&gt;\\n                \\n            &lt;/ElForm&gt;\\n            &lt;div class=&quot;buttonContainer&quot;&gt;\\n                &lt;ElButton v-for=&quot;item of buttonTemplate&quot; :key=&quot;item.prop&quot; :icon=&quot;item.icon&quot; :type=&quot;item.type&quot; @click=&quot;buttonClick(item.prop)&quot;&gt;\\n                {{ item.label }}\\n                &lt;/ElButton&gt;\\n            &lt;/div&gt;\\n                              \\n        &lt;/div&gt;\\n        &lt;div class=&quot;tableContainer&quot;&gt;\\n            &lt;PaginationTable :table-config=&quot;{tableTemplate,tableData}&quot; :pagination=&quot;tableConfig.pagination&quot; \\n\\t\\t\\t:events=&quot;tableConfig.events&quot;&gt;&lt;/PaginationTable&gt;\\n        &lt;/div&gt;\\n    &lt;/div&gt;\\n&lt;/template&gt;\\n</code></pre>\\n<p>此时也还没有从vue2中完成出来，虽然确实写在了一起，但感觉莫名有点乱。</p>\\n<h4>2.  React勉強を経て</h4>\\n<p>クラスや OOP には何の問題もありませんが、ts のクラスは少し奇妙です。バックエンドのようにプロパティをプライベートにしたい場合、get と set を介してのみアクセスできます。書く分には問題ないのですが、LoopしたいときやObject.keysやReflect.ownKeysなどを持ちたいときはprivateプロパティを持ち出すことになります。だってtsがコンパイルされると消えてしまいます。 もちろん、新しい Proxy を介して ownKeys を設定することもできますが、これは複雑すぎると感じ、将来的に他の操作があるかどうかもわかりません。 #prop を使うと互換性が悪く、見ていて不快になります。だから非常に混乱しています。</p>\\n<p>Reactをクラスコンポーネントから関数コンポーネントまで学んでから、忘れていた関数が本当に素晴らしいってに気づきました。突然、啓発されたような気分になり、hooksって神かも。</p>\\n<p>この時点で、スタイルが再び変更され、Composition API が採用され始めました。</p>\\n<pre><code class=\\\"language-ts\\\">// useForm.ts\\nexport function useForm(){\\n\\tconst formTemplate = getFormTemplate({\\n\\t\\tprops,\\n        //整个系统中某些数据库中列太常用，就设置成了enum\\n\\t\\tlabels:[EModuleLabels.makeMachine,EModuleLabels.mouldSteelGrade]\\n\\t})\\n\\t\\n\\tconst formData = reactive(getFormData({props})) \\n\\treturn {\\n       formData,\\n\\t   formTemplate\\n\\t}\\n}\\n</code></pre>\\n<pre><code class=\\\"language-ts\\\">// useButton.ts\\nconst strategy:Record&lt;TProps,(...arg: any)=&gt;any&gt; = {\\n\\tsearch({formData,getTableData}:IUseButtonProps&lt;TFormData&gt;){\\n\\t\\tgetTableData &amp;&amp; formData &amp;&amp; getTableData(formData)\\n\\t},\\n\\texport({exportExcel}:IUseButtonProps&lt;any&gt;){\\n\\t\\texportExcel &amp;&amp; exportExcel()\\n\\t}\\n}\\n\\nexport function useButton&lt;T extends Record&lt;string,any&gt;&gt;(options: IUseButtonProps&lt;T&gt;) {\\n  const buttonTemplate = getButtonTemplate({\\n    props: buttonProps,\\n    labels: buttonLabels,\\n    icons: {\\n      search: Search,\\n      export: Download,\\n    },\\n    types: {\\n      search: &quot;primary&quot;,\\n      export: &quot;success&quot;,\\n    },\\n  })\\n  \\n  function buttonClickHandler(item:IButtonItem&lt;TProps&gt;){\\n\\t  strategy[item.prop]? strategy[item.prop](options):\'\'\\n  }\\n  \\n  return {\\n    buttonTemplate,\\n\\tbuttonClickHandler\\n  }\\n}\\n</code></pre>\\n<pre><code class=\\\"language-ts\\\">// useTable.ts\\nexport function useTable(){\\n\\tconst tableData = ref&lt;TTableDataItem&lt;any&gt;[]&gt;([])\\n\\tconst tableTemplate = reactive&lt;Record&lt;\'label\'|\'prop\',string&gt;[]&gt;([])\\n    \\n    let loadingInstance:LoadingInstance\\n\\tfunction getTableTemplate(){\\n\\t\\tendTime.getTableTemplate().then(v=&gt;{\\n\\t\\t\\t// console.log(v);\\n\\t\\t\\tif(v.status){\\n\\t\\t\\t\\ttableTemplate.splice(0,tableTemplate.length,...v.data)\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t})\\n\\t}\\n\\tgetTableTemplate()\\n\\tfunction getTableData&lt;T extends TFormData&gt;(formData:T){\\n\\t\\tif(loadingInstance){\\n\\t\\t\\treturn\\n\\t\\t}\\n\\t\\t loadingInstance = ElLoadingService({\\n\\t\\t\\ttarget:\'.paginationTable\'\\n\\t\\t})\\n\\t\\t return  endTime.getTableData(formData).then(v=&gt;{\\n\\t\\t\\t if(v.status){\\n\\t\\t\\t\\t tableData.value = v.data\\n\\t\\t\\t\\t ElMessage.success(\'查询成功\')\\n\\t\\t\\t }else{\\n\\t\\t\\t\\tElMessage.error(\'查询失败\')\\n\\t\\t\\t }\\n\\t\\t  }).catch(e=&gt;{\\n\\t\\t\\tElNotification({\\n\\t\\t\\t\\tmessage:e instanceof Error?e.message:e,\\n\\t\\t\\t\\ttitle:\'error\'\\n\\t\\t\\t})\\n\\t\\t  }).finally(()=&gt;{\\n\\t\\t\\tloadingInstance?.close()\\n\\t\\t\\tloadingInstance = null\\n\\t\\t  })\\n\\t}\\n\\treturn {\\n\\t\\ttableTemplate,\\n\\t\\ttableData,\\n\\t\\tgetTableData\\n\\t}\\n}\\n</code></pre>\\n<p>これで、vue ファイルが非常に見やすくなりました。</p>\\n<pre><code class=\\\"language-vue\\\">&lt;script lang=&quot;ts&quot; setup&gt;\\nimport { useButton } from \'./useButton\';\\nimport { useForm } from \'./useForm\';\\nimport FormCondition from \'@/components/publicComponents/formCondition/index.vue\'\\nimport Buttons from &quot;@/components/publicComponents/buttons/index.vue&quot;\\nimport PaginationTable  from \'@/components/publicComponents/paginationTable/index.vue\'\\nimport { useTable } from \'./useTable\';\\nimport { useExportExcel } from \'@/hooks/useExportExcel\'\\nimport { onMounted, reactive } from \'vue\';\\n\\nconst {formData,formTemplate} = useForm()\\n\\nconst {tableData,tableTemplate,getTableData} = useTable()\\n\\nconst {exportExcel} = useExportExcel({tableData,tableTemplate})\\n\\nconst {buttonTemplate, buttonClickHandler} = useButton({formData,exportExcel,getTableData})\\n\\n\\nconst tableSetting:Partial&lt;IPaginationTable&lt;any&gt;&gt; = {\\n\\tpagination:reactive({\\n      currentPageNum: 1,\\n      pageSizes: [15,20,30],\\n      total: 0,\\n      pageSize: 20\\n    })\\n}\\n\\nonMounted(()=&gt;{\\n\\tbuttonClickHandler({prop:&quot;search&quot;,label:\'\'})\\n})\\n\\n\\n&lt;/script&gt;\\n\\n&lt;template&gt;\\n\\t&lt;div class=&quot;end-time-container&quot;&gt;\\n          &lt;FormCondition :template=&quot;formTemplate&quot; :formdata=&quot;formData&quot;&gt;\\n\\t\\t\\t&lt;template #last&gt;\\n\\t\\t\\t\\t&lt;Buttons :template=&quot;buttonTemplate&quot; @button-click=&quot;buttonClickHandler&quot;&gt;&lt;/Buttons&gt;\\n\\t\\t\\t&lt;/template&gt;\\n\\t\\t  &lt;/FormCondition&gt;\\n\\t\\t  &lt;PaginationTable :table-config=&quot;{tableData,tableTemplate}&quot; :pagination=&quot;tableSetting.pagination&quot;&gt;&lt;/PaginationTable&gt;\\n\\n\\t&lt;/div&gt;\\n&lt;/template&gt;\\n</code></pre>\\n\"','Y','/img/vsp0all.png','2','0','2024-09-23','2024-09-23 14:38:58','2025-04-30 15:14:10'),(6,'キャビティーかんばんボード','特定データかんばんボード','[{\"anchor\":\"chartboard\",\"name\":\"chartBoard\",\"tag\":\"h1\",\"children\":[{\"anchor\":\"%E6%95%88%E6%9E%9C\",\"name\":\"效果\",\"tag\":\"h2\",\"children\":[]},{\"anchor\":\"%E6%A7%8B%E9%80%A0\",\"name\":\"構造\",\"tag\":\"h2\",\"children\":[{\"anchor\":\"vue\",\"name\":\"vue\",\"tag\":\"h3\",\"children\":[]},{\"anchor\":\"hooks\",\"name\":\"hooks\",\"tag\":\"h3\",\"children\":[]}]}]}]','\"<h1 id=\\\"chartboard\\\" tabindex=\\\"-1\\\">chartBoard</h1>\\n<h2 id=\\\"%E6%95%88%E6%9E%9C\\\" tabindex=\\\"-1\\\">效果</h2>\\n<p><img src=\\\"C:%5CUsers%5CASUS%5CDesktop%5Cproject%5Cboard.png\\\" alt=\\\"board\\\"></p>\\n<h2 id=\\\"%E6%A7%8B%E9%80%A0\\\" tabindex=\\\"-1\\\">構造</h2>\\n<h3 id=\\\"vue\\\" tabindex=\\\"-1\\\">vue</h3>\\n<pre><code class=\\\"language-vue\\\">//index.vue\\n//整体分为三个hook，一目了然\\n&lt;script lang=&quot;ts&quot; setup&gt;\\n\\nimport EditableTable from \'@/components/common/tables/editableTable/index.vue\'\\nimport { onBeforeUnmount } from \'vue\';\\nimport { plainToClass } from \'class-transformer\'\\nimport useBoardTable from \'./useBoardTable\'\\nimport useWarningList from \'./useWarningList\'\\nimport usePie from \'./usePie\'\\n\\nlet intervalTime = 30 * 1000\\n\\nusePie(intervalTime)\\n\\nconst { tableData, getTableData } = useBoardTable()\\n\\nlet getTableDataTimer = setInterval(() =&gt; {\\n\\tgetTableData()\\n}, intervalTime)\\nonBeforeUnmount(() =&gt; {\\n\\tgetTableDataTimer &amp;&amp; clearInterval(getTableDataTimer)\\n})\\n\\nconst { warningList, getWarningList } = useWarningList()\\nconst getWarningListTimer = setTimeout(() =&gt; {\\n\\tgetWarningList()\\n}, intervalTime);\\nonBeforeUnmount(() =&gt; {\\n\\tgetWarningListTimer &amp;&amp; clearInterval(getWarningListTimer)\\n})\\n\\n\\n&lt;/script&gt;\\n</code></pre>\\n<h3 id=\\\"hooks\\\" tabindex=\\\"-1\\\">hooks</h3>\\n<pre><code class=\\\"language-ts\\\">//usePie.ts\\nimport EchartsHelper from &quot;@/utils/echartsHelper&quot;\\nimport * as API from &quot;@/api/board&quot;\\nimport { onBeforeUnmount, onMounted } from &quot;vue&quot;\\nimport { option } from &quot;./echarts&quot;\\n\\nexport default function (intervalTime: number) {\\n\\n  let echartsInstance: EchartsHelper = null\\n  const getPieDataTimer = setInterval(() =&gt; {\\n    getPieData()\\n  }, intervalTime)\\n  function getPieData() {\\n    API.getPieData().then((v) =&gt; {\\n      echartsInstance?.updateChart({\\n        option: {\\n          dataset: {\\n            source: v\\n          }\\n        }\\n      })\\n    })\\n  }\\n  onMounted(() =&gt; {\\n    const dom = document.querySelector(&quot;#dq9boardContainerPie&quot;) as HTMLElement\\n    echartsInstance = dom &amp;&amp; EchartsHelper.init({ dom })\\n    echartsInstance?.updateChart({ option })\\n    getPieData()\\n  })\\n  onBeforeUnmount(() =&gt; {\\n    echartsInstance?.destroy()\\n    echartsInstance = null\\n    getPieDataTimer &amp;&amp; clearInterval(getPieDataTimer)\\n  })\\n}\\n\\n</code></pre>\\n<pre><code class=\\\"language-ts\\\">// useBoardTable.ts\\nimport { IPaginationTable } from \'@/components/common/tables/editableTable\'\\nimport { reactive } from \'vue\'\\nimport { EventEmitter } from \'@/utils/eventEmitter\';\\nimport * as API from \'@/api/board\'\\n\\n\\n export default function (){\\n\\tconst tableData: Partial&lt;IPaginationTable&lt;Record&lt;string, any&gt;&gt;&gt; = {\\n\\t\\ttableConfig: reactive({\\n\\t\\t\\ttableData: [],\\n\\t\\t\\ttableTemplate: []\\n\\t\\t}),\\n\\t\\tminWidth:{\\n\\t\\t\\tpartNumber:130,lastProdPartNumber:130,\\n\\t\\t\\tworkOrderNumber:130\\n\\t\\n\\t\\t}\\n\\t}\\n\\tfunction getTableData(){\\n\\t\\tAPI.getBoardTableData().then(v =&gt; {\\n\\t\\t\\ttableData.tableConfig.tableData = v\\n\\t\\t})\\n\\t}\\n\\tfunction getTableTemplate(){\\n\\t\\tAPI.getTableTemplate().then(v =&gt; {\\n\\t\\t\\ttableData.tableConfig.tableTemplate = v\\n\\t\\t})\\n\\t}\\n\\tgetTableData();\\n\\tgetTableTemplate()\\n\\treturn {\\n\\t\\ttableData,\\n\\t\\tgetTableData\\n\\t}\\n }\\n</code></pre>\\n<pre><code class=\\\"language-ts\\\">//useWarningList\\nimport { ref } from \'vue\'\\nimport * as API from \'@/api/board\'\\n\\nexport default function(){\\n\\tconst warningList = ref&lt;string[]&gt;([])\\n\\n\\tfunction getWarningList(){\\n\\t\\tAPI.getWarningList().then(v =&gt; {\\n\\t\\t\\twarningList.value = v\\n\\t\\t})\\n\\t}\\n\\tgetWarningList()\\n    return {\\n\\t\\twarningList,getWarningList\\n\\t}\\n\\n}\\n</code></pre>\\n\"','Y','/img/board.png','1','0','2024-09-23','2024-09-23 14:38:58','2024-09-23 16:37:31');
/*!40000 ALTER TABLE `project_jp` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2025-06-02  0:24:32
